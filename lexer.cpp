#line 1 "lexer.cpp"

#line 3 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_create_buffer

    #define yy_delete_buffer yy_delete_buffer

    #define yy_scan_buffer yy_scan_buffer

    #define yy_scan_string yy_scan_string

    #define yy_scan_bytes yy_scan_bytes

    #define yy_init_buffer yy_init_buffer

    #define yy_flush_buffer yy_flush_buffer

    #define yy_load_buffer_state yy_load_buffer_state

    #define yy_switch_to_buffer yy_switch_to_buffer

    #define yypush_buffer_state yypush_buffer_state

    #define yypop_buffer_state yypop_buffer_state

    #define yyensure_buffer_stack yyensure_buffer_stack

    #define yylex yylex

    #define yyrestart yyrestart

    #define yylex_init yylex_init

    #define yylex_init_extra yylex_init_extra

    #define yylex_destroy yylex_destroy

    #define yyget_debug yyget_debug

    #define yyset_debug yyset_debug

    #define yyget_extra yyget_extra

    #define yyset_extra yyset_extra

    #define yyget_in yyget_in

    #define yyset_in yyset_in

    #define yyget_out yyget_out

    #define yyset_out yyset_out

    #define yyget_leng yyget_leng

    #define yyget_text yyget_text

    #define yyget_lineno yyget_lineno

    #define yyset_lineno yyset_lineno

    #define yywrap yywrap

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

    #define yytext yytext

    #define yyleng yyleng

    #define yyin yyin

    #define yyout yyout

    #define yy_flex_debug yy_flex_debug

    #define yylineno yylineno

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 102
#define YY_END_OF_BUFFER 103
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1034] =
    {   0,
      103,  101,  102,   10,  101,  102,    8,   15,  102,  101,
      102,   41,   57,  101,  102,  101,  102,   56,  101,  102,
       26,  101,  102,  101,  102,   47,   57,  101,  102,   48,
       57,  101,  102,   23,   57,  101,  102,   21,   57,  101,
      102,   54,   57,  101,  102,   22,   57,  101,  102,   24,
       57,  101,  102,   99,  101,  102,   53,   57,  101,  102,
       55,   57,  101,  102,   45,   57,  101,  102,   27,   57,
      101,  102,   43,   57,  101,  102,   98,  101,  102,   98,
      101,  102,   98,  101,  102,   98,  101,  102,   51,   57,
      101,  102,   52,   57,  101,  102,  101,  102,   98,  101,

      102,   98,  101,  102,   98,  101,  102,   98,  101,  102,
       98,  101,  102,   98,  101,  102,   98,  101,  102,   98,
      101,  102,   98,  101,  102,   98,  101,  102,   98,  101,
      102,   98,  101,  102,   98,  101,  102,   98,  101,  102,
       98,  101,  102,   98,  101,  102,   98,  101,  102,   49,
       57,  101,  102,  101,  102,   50,   57,  101,  102,    4,
      101,  102,    5,   10,  101,  102,    1,    8,   15,  102,
        4,  101,  102,    4,   41,   57,  101,  102,    4,  101,
      102,    4,   56,  101,  102,    4,   26,  101,  102,    4,
      101,  102,    4,   47,   57,  101,  102,    4,   48,   57,

      101,  102,    4,   23,   57,  101,  102,    4,   21,   57,
      101,  102,    4,   54,   57,  101,  102,    4,   22,   57,
      101,  102,    4,   24,   57,  101,  102,    4,   99,  101,
      102,    4,   53,   57,  101,  102,    4,   55,   57,  101,
      102,    4,   45,   57,  101,  102,    4,   27,   57,  101,
      102,    4,   43,   57,  101,  102,    4,   98,  101,  102,
        4,   98,  101,  102,    4,   98,  101,  102,    4,   98,
      101,  102,    4,   51,   57,  101,  102,    4,   52,   57,
      101,  102,    4,  101,  102,    4,   98,  101,  102,    4,
       98,  101,  102,    4,   98,  101,  102,    4,   98,  101,

      102,    4,   98,  101,  102,    4,   98,  101,  102,    4,
       98,  101,  102,    4,   98,  101,  102,    4,   98,  101,
      102,    4,   98,  101,  102,    4,   98,  101,  102,    4,
       98,  101,  102,    4,   98,  101,  102,    4,   98,  101,
      102,    4,   98,  101,  102,    4,   98,  101,  102,    4,
       98,  101,  102,    4,   49,   57,  101,  102,    4,  101,
      102,    4,   50,   57,  101,  102,    7,  102,  102,    6,
      102,   11,  102,   13,  102,  102,   17,  102,   19,  102,
      102,  101,  102,  101,  102,  101,  102,    4,  101,  102,
        4,  101,  102,    4,  101,  102,    8,   42,   57,    9,

       95,   56,    3,   32,   35,   57,   25,   30,   57,   28,
       57,   29,   57,   31,   57,   99,   46,   57,   40,   57,
       44,   57,   98,   98,   98,   98,   57,   37,   98,   80,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   61,   98,   98,   69,   98,   73,   98,
       98,   98,   98,   91,   98,   98,   98,   98,   98,   98,
       98,   98,   36,    4,    5,    1,    1,    8,    4,   42,
       57,    4,    4,    9,   95,    4,    4,   56,   56,    2,
        3,    4,   56,    4,   32,    4,   35,    4,   57,    4,
       25,    4,   30,   57,    4,   28,   57,    4,   29,   57,

        4,    4,   31,   57,    4,    4,   99,    4,    4,   46,
       57,    4,   40,   57,    4,   44,   57,    4,    4,   98,
        4,   98,    4,   98,    4,   98,    4,    4,   57,    4,
        4,   37,    4,   98,    4,   80,   98,    4,   98,    4,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       98,    4,   61,   98,    4,   98,    4,   69,   98,    4,
       73,   98,    4,   98,    4,   98,    4,   98,    4,   91,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       98,    4,   98,    4,   98,    4,   36,   11,   13,   17,

       19,    9,   95,    4,    9,   95,    4,    4,    9,   95,
       96,   95,   96,    9,   96,   34,   33,  100,   39,   38,
       98,   98,   98,   97,   75,   98,   98,   98,   98,   98,
       98,   98,   98,   81,   98,   86,   98,   98,   98,   98,
       98,   77,   98,   98,   98,   98,   98,   98,   98,   88,
       98,   98,   98,   98,   79,   98,   98,   98,   98,    2,
        4,    4,    9,   95,   96,    4,    4,    4,    9,   96,
        4,   56,    4,   34,    4,   33,    4,  100,    4,   39,
        4,   38,    4,   98,    4,   98,    4,   98,    4,    4,
       97,    4,    4,    4,   75,   98,    4,   98,    4,   98,

        4,   98,    4,   98,    4,   98,    4,   98,    4,   98,
        4,   81,   98,    4,   86,   98,    4,   98,    4,   98,
        4,   98,    4,   98,    4,   77,   98,    4,   98,    4,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       88,   98,    4,   98,    4,   98,    4,   98,    4,   79,
       98,    4,   98,    4,   98,    4,   98,   14,   12,   12,
       20,   18,   18,   16,    9,   16,   95,   96,   16,    4,
       16,    4,    9,   16,   95,   96,    4,   16,   95,    9,
        9,   98,   66,   98,   59,   98,   98,   98,   98,   98,
       94,   98,   98,   98,   63,   98,   62,   98,   98,   98,

       82,   98,   98,   98,   98,   98,   98,   65,   98,   98,
       98,   98,   89,   98,   98,    4,    9,    4,    4,    9,
        4,    4,   98,    4,   66,   98,    4,   59,   98,    4,
        4,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       94,   98,    4,   98,    4,   98,    4,   63,   98,    4,
       62,   98,    4,   98,    4,   98,    4,   82,   98,    4,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       65,   98,    4,   98,    4,   98,    4,   98,    4,   89,
       98,    4,   98,    9,  100,   58,   98,   98,   90,   98,
       60,   98,   67,   98,   71,   98,   98,   98,   98,   98,

       98,   98,   93,   98,   98,   70,   98,   98,   84,   98,
       92,   98,    4,    9,    4,    4,   95,   96,    4,    4,
        4,  100,    4,   58,   98,    4,    4,    4,   98,    4,
       90,   98,    4,   60,   98,    4,   67,   98,    4,   71,
       98,    4,   98,    4,   98,    4,   98,    4,   98,    4,
       98,    4,   98,    4,   93,   98,    4,   98,    4,   70,
       98,    4,   98,    4,   84,   98,    4,   92,   98,   85,
       98,   98,   68,   98,   98,   87,   98,   64,   98,   78,
       98,   98,   74,   98,    4,   95,    4,    4,   85,   98,
        4,   98,    4,   68,   98,    4,   98,    4,   87,   98,

        4,   64,   98,    4,   78,   98,    4,   98,    4,   74,
       98,   98,   63,   72,   98,   98,    4,   98,    4,   72,
       98,    4,   98,   76,   98,   83,   98,    4,   76,   98,
        4,   83,   98
    } ;

static const flex_int16_t yy_accept[530] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,   10,   12,   16,   18,   21,   24,
       26,   30,   34,   38,   42,   46,   50,   54,   57,   61,
       65,   69,   73,   77,   80,   83,   86,   89,   93,   97,
       99,  102,  105,  108,  111,  114,  117,  120,  123,  126,
      129,  132,  135,  138,  141,  144,  147,  150,  154,  156,
      160,  163,  167,  171,  174,  179,  182,  186,  190,  193,
      198,  203,  208,  213,  218,  223,  228,  232,  237,  242,
      247,  252,  257,  261,  265,  269,  273,  278,  283,  286,
      290,  294,  298,  302,  306,  310,  314,  318,  322,  326,

      330,  334,  338,  342,  346,  350,  354,  359,  362,  367,
      369,  370,  372,  374,  376,  377,  379,  381,  382,  384,
      386,  388,  391,  394,  397,  398,  400,  400,  400,  402,
      402,  403,  404,  405,  406,  407,  408,  410,  412,  414,
      414,  416,  416,  417,  417,  419,  421,  423,  423,  424,
      425,  426,  427,  427,  428,  428,  429,  430,  432,  433,
      434,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      444,  446,  447,  449,  451,  452,  453,  454,  456,  457,
      458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      467,  467,  469,  472,  473,  476,  477,  479,  480,  482,

      484,  486,  488,  490,  492,  495,  498,  501,  502,  505,
      506,  508,  509,  512,  515,  518,  519,  521,  523,  525,
      527,  528,  530,  531,  533,  535,  538,  540,  542,  544,
      546,  548,  550,  552,  554,  556,  558,  560,  562,  565,
      567,  570,  573,  575,  577,  579,  582,  584,  586,  588,
      590,  592,  594,  596,  598,  599,  600,  600,  601,  602,
      602,  604,  604,  604,  607,  608,  609,  609,  609,  612,
      612,  614,  614,  614,  616,  616,  617,  618,  619,  620,
      621,  622,  623,  624,  624,  625,  625,  625,  627,  628,
      629,  630,  631,  632,  633,  634,  636,  638,  639,  640,

      641,  642,  644,  645,  646,  647,  648,  649,  650,  652,
      653,  654,  655,  657,  658,  659,  660,  660,  661,  661,
      662,  666,  667,  668,  671,  672,  673,  675,  677,  679,
      681,  683,  685,  687,  689,  690,  692,  693,  694,  697,
      699,  701,  703,  705,  707,  709,  711,  714,  717,  719,
      721,  723,  725,  728,  730,  732,  734,  736,  738,  740,
      743,  745,  747,  749,  752,  754,  756,  758,  759,  760,
      761,  762,  763,  764,  765,  769,  770,  772,  777,  779,
      780,  781,  781,  781,  782,  782,  783,  785,  787,  787,
      787,  788,  789,  790,  791,  793,  794,  795,  797,  799,

      800,  801,  803,  804,  805,  806,  807,  808,  810,  811,
      812,  813,  815,  816,  818,  819,  821,  822,  824,  827,
      830,  831,  832,  834,  836,  838,  840,  843,  845,  847,
      850,  853,  855,  857,  860,  862,  864,  866,  868,  870,
      873,  875,  877,  879,  882,  884,  885,  885,  886,  888,
      888,  888,  889,  891,  893,  895,  897,  898,  898,  899,
      900,  901,  902,  903,  905,  906,  908,  909,  911,  913,
      915,  916,  919,  920,  921,  923,  926,  927,  928,  930,
      933,  936,  939,  942,  944,  946,  948,  950,  952,  954,
      957,  959,  962,  964,  967,  970,  972,  973,  973,  975,

      976,  978,  980,  982,  983,  985,  987,  988,  991,  993,
      996,  998, 1001, 1004, 1007, 1009, 1012, 1013, 1014, 1016,
     1017, 1019, 1022, 1024, 1026, 1028, 1031, 1034, 1034
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,    1,    1,   26,   26,   26,   26,   27,   28,
       26,   26,   26,   26,   26,   26,   26,   29,   26,   26,
       26,   26,   26,   30,   26,   26,   26,   26,   26,   26,
       31,   32,   33,   34,   26,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   26,   44,   45,   46,   47,
       48,   49,   26,   50,   51,   52,   53,   26,   54,   55,
       56,   26,   57,   58,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[60] =
    {   0,
        1,    2,    3,    1,    2,    1,    4,    1,    1,    1,
        4,    1,    1,    1,    1,    5,    1,    1,    1,    6,
        1,    1,    1,    1,    1,    6,    6,    6,    6,    6,
        5,    4,    5,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    4,    1
    } ;

static const flex_int16_t yy_base[554] =
    {   0,
        0,   59,  117,  121,  114,  120,  121,  122,  123,  128,
      942,  943,  943,  943,  938,  916,  133,  936,  914,  913,
      912,  911,  123,  910,  909,  908,  119,  124,  907,  906,
      125,  905,  126,    0,  893,  879,  876,  117,  901,  900,
      108,  873,  121,  883,  112,  127,  876,  136,  885,  884,
      870,  867,  881,  125,  865,  131,  871,  889,  888,  887,
        0,  186,  943,  907,  885,  190,  196,  884,  883,  882,
      881,  147,  880,  879,  878,  139,  184,  877,  876,  161,
      875,  181,  203,  863,  849,  846,  258,  871,  870,  156,
      843,  173,  853,  164,  177,  846,  222,  855,  854,  840,

      837,  851,  176,  835,  170,  841,  859,  858,  857,  943,
      943,  943,    0,  217,  848,    0,  259,  847,  269,  260,
      270,  281,  286,  288,  943,  943,  293,  258,  943,  271,
      875,  943,  943,  943,  943,  853,  943,  943,  943,  852,
      943,  855,  196,  850,  943,  943,  943,  849,    0,  827,
      824,  817,  269,  271,  282,  943,  831,  254,  833,  828,
      815,  830,  817,  266,  183,  826,  815,  811,  812,  811,
        0,  809,    0,    0,  811,  804,  267,    0,  804,  811,
      801,  796,  808,  798,  810,  943,    0,  327,  943,  845,
      232,  943,    0,  335,    0,  319,  345,  304,  943,  350,

        0,    0,    0,  823,    0,    0,    0,  822,    0,  825,
      316,  820,    0,    0,    0,  819,    0,  797,  794,  787,
      354,  358,  363,    0,  801,  313,  803,  798,  785,  800,
      787,  331,  329,  796,  785,  781,  782,  781,    0,  779,
        0,    0,  781,  774,  326,    0,  774,  781,  771,  766,
      778,  768,  780,    0,    0,  334,  786,    0,  370,  785,
      375,  390,  377,  388,  405,  391,  397,  351,  943,  383,
      943,  784,  808,  943,  410,  943,  943,  391,  943,  943,
      763,  774,  773,  760,  943,  387,  390,    0,  771,  762,
      765,  772,  767,  754,  752,    0,    0,  763,  763,  762,

      765,    0,  753,  762,  749,  760,  758,  749,    0,  742,
      741,  738,    0,  745,  747,  743,  421,  943,  423,  429,
        0,  437,  438,    0,  448,  453,    0,    0,  427,    0,
        0,  736,  747,  746,  457,    0,  462,  469,    0,  745,
      736,  739,  746,  741,  728,  726,    0,    0,  737,  737,
      736,  739,    0,  727,  736,  723,  734,  732,  723,    0,
      716,  715,  712,    0,  719,  721,  717,  943,  943,  714,
      943,  943,  713,  943,  943,  472,    0,    0,  479,  943,
      943,  473,  756,  445,  472,  719,    0,    0,  481,  482,
      707,  719,  703,  697,    0,  682,  684,    0,  710,  648,

      635,    0,  639,  599,  610,  603,  561,    0,  569,  557,
      567,    0,  567,    0,  514,  520,  479,  565,    0,    0,
      526,  532,  553,  564,  548,  555,    0,  547,  554,    0,
      591,  546,  549,    0,  558,  541,  551,  546,  539,    0,
      547,  535,  542,    0,  542,  451,  559,  558,    0,  485,
      493,  522,    0,    0,    0,    0,  526,  528,  514,  515,
      513,  503,  515,    0,  508,    0,  493,    0,    0,  536,
      544,    0,  498,  504,  492,    0,  551,  559,  458,    0,
        0,    0,    0,  460,  454,  460,  458,  439,  435,    0,
      431,    0,  374,    0,    0,    0,  366,  335,    0,  306,

        0,    0,    0,  308,    0,    0,  567,    0,  270,    0,
      260,    0,    0,    0,  244,    0,  225,  943,    0,  192,
      178,    0,  151,    0,    0,    0,    0,  943,  610,  616,
      622,  628,  634,  139,  640,  646,  652,  658,  664,  670,
      676,  682,  688,  694,  700,  706,  712,  718,  724,  730,
      736,  742,  748
    } ;

static const flex_int16_t yy_def[554] =
    {   0,
      528,  528,  529,  529,  530,  530,  531,  531,    1,    2,
      528,  528,  528,  528,  528,  528,  532,  533,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  534,  534,  534,  534,  535,  528,  528,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  528,  528,  528,
      536,  528,  528,  536,  536,  537,  538,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,   83,   83,   83,  539,  536,  536,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,  536,  536,  536,  528,
      528,  528,  540,  528,  528,  541,  528,  528,  532,  528,
      528,  537,  536,  536,  528,  528,  542,  543,  528,  544,
      533,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  534,  534,
      534,  534,  535,  535,  535,  528,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  528,  536,  528,  528,  528,
      545,  528,  536,  546,  536,  547,  538,  548,  528,  538,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,   83,   83,   83,   83,
      539,  539,  539,  536,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,  536,  540,  528,  549,  541,  528,  550,
      528,  542,  528,  536,  546,  536,  542,  543,  528,  544,
      528,  528,  544,  528,  532,  528,  528,  528,  528,  528,
      534,  534,  534,  551,  528,  535,  535,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  545,  528,  545,  546,
      536,  547,  547,  536,  537,  548,  536,  536,  536,  536,
      536,   83,   83,   83,  552,  536,  539,  539,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,  528,  528,  528,
      528,  528,  528,  528,  528,  542,  536,  536,  546,  528,
      528,  542,  543,  543,  528,  534,  534,  534,  551,  551,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  536,  546,  553,  536,   83,   83,   83,
      552,  552,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,  543,  528,  528,  534,  551,
      551,  534,  534,  534,  534,  534,  534,  528,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  553,
      553,  536,  536,  536,  536,   83,  552,  552,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,  534,  534,  528,  534,  534,

      534,  534,  534,  534,  534,  536,  553,   83,   83,   83,
       83,   83,   83,   83,   83,   83,  534,  528,  534,  534,
       83,   83,   83,  534,  534,   83,   83,    0,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528
    } ;

static const flex_int16_t yy_nxt[1003] =
    {   0,
       12,   13,   14,   15,   13,   16,   17,   18,   19,   20,
       12,   21,   22,   23,   24,   25,   26,   12,   27,   28,
       29,   30,   31,   32,   33,   34,   34,   35,   36,   37,
       38,   12,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   34,   48,   34,   49,   50,   51,   52,   53,   54,
       34,   55,   34,   56,   34,   57,   58,   59,   60,   61,
       62,   63,   64,   62,   65,   66,   67,   68,   69,   61,
       70,   71,   72,   73,   74,   75,   61,   76,   77,   78,
       79,   80,   81,   82,   83,   83,   84,   85,   86,   87,
       61,   88,   89,   90,   91,   92,   93,   94,   95,   96,

       83,   97,   83,   98,   99,  100,  101,  102,  103,   83,
      104,   83,  105,   83,  106,  107,  108,  109,  111,  111,
      114,  112,  111,  111,  114,  112,  114,  117,  117,  119,
      114,  117,  117,  120,  122,  128,  136,  140,  123,  129,
      154,  142,  141,  143,  149,  115,  137,  144,  145,  147,
      148,  115,  118,  118,  157,  161,  165,  208,  158,  180,
      204,  159,  209,  181,  130,  162,  166,  155,  163,  167,
      205,  114,  183,  184,  168,  171,  169,  114,  117,  117,
      121,  172,  173,  212,  213,  124,  174,  188,  189,  190,
      188,  127,  128,  191,  127,  527,  195,  198,  199,  200,

      198,  210,  225,  211,  215,  216,  226,  229,  233,  227,
      248,  251,  252,  142,  249,  143,  526,  230,  234,  235,
      231,  196,  217,  256,  236,  298,  237,  256,  217,  217,
      217,  217,  217,  299,  318,  319,  525,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  153,
      153,  239,  153,  524,  271,  259,  263,  240,  241,  259,
      263,  128,  242,  187,  256,  261,  263,  274,  523,  262,
      263,  222,  127,  128,  284,  127,  284,  264,  187,  272,
      187,  265,  266,  186,  266,  268,  266,  284,  266,  269,

      130,  285,  275,  285,  289,  296,  199,  326,  223,  290,
      297,  254,  196,  308,  285,  522,  259,  263,  309,  286,
      273,  286,  521,  273,  270,  324,  262,  263,  188,  189,
      190,  188,  287,  210,  191,  211,  267,  268,  265,  267,
      368,  321,  520,  266,  368,  266,  198,  199,  200,  198,
      325,  198,  199,  200,  198,  153,  153,  380,  153,  153,
      153,  519,  153,  340,  153,  153,  322,  153,  341,  335,
      347,  349,  359,  335,  518,  348,  371,  360,  335,  350,
      371,  374,  272,  374,  187,  374,  336,  374,  187,  381,
      336,  368,  268,  187,  377,  336,  375,  377,  377,  268,

      376,  377,  284,  129,  337,  284,  267,  268,  337,  267,
      278,  378,  528,  338,  382,  379,  384,  385,  517,  285,
      516,  270,  285,  318,  319,  318,  319,  371,  270,  385,
      267,  268,  374,  267,  374,  195,  322,  286,  273,  273,
      287,  273,  273,  414,  414,  377,  329,  376,  377,  127,
      528,  271,  127,  417,  416,  199,  326,  380,  389,  389,
      322,  389,  379,  153,  153,  417,  153,  515,  415,  514,
      153,  153,  187,  153,  268,  528,  272,  335,  129,  446,
      267,  268,  272,  267,  335,  195,  447,  187,  447,  187,
      513,  448,  187,  474,  336,  474,  284,  284,  475,  187,

      284,  336,  512,  270,  511,  510,  509,  422,  284,  508,
      322,  475,  337,  285,  285,  267,  528,  285,  267,  338,
      470,  268,  268,  475,  268,  285,  472,  389,  389,  507,
      389,  450,  451,  389,  389,  450,  389,  268,  268,  505,
      268,  335,  506,  451,  504,  268,  268,  335,  268,  503,
      506,  473,  389,  389,  502,  389,  187,  501,  336,  500,
      389,  389,  187,  389,  336,  499,  335,  473,  268,  528,
      498,  268,  497,  496,  335,  473,  477,  448,  448,  495,
      494,  187,  478,  336,  493,  492,  491,  490,  489,  187,
      488,  336,  487,  486,  485,  458,  484,  483,  482,  481,

      480,  477,  479,  476,  469,  468,  467,  466,  465,  478,
      110,  110,  110,  110,  110,  110,  113,  113,  113,  113,
      113,  113,  116,  116,  116,  116,  116,  116,  127,  127,
      127,  127,  127,  127,  131,  131,  131,  131,  131,  131,
      153,  153,  153,  153,  464,  153,  187,  463,  462,  187,
      187,  187,  194,  194,  194,  194,  194,  194,  197,  197,
      197,  197,  197,  197,  221,  221,  221,  221,  221,  221,
      255,  255,  255,  461,  255,  255,  258,  258,  258,  460,
      258,  258,  267,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  268,  268,  273,  273,  459,  273,  273,  273,

      317,  317,  317,  317,  317,  317,  320,  320,  320,  320,
      320,  320,  323,  323,  458,  323,  323,  323,  198,  198,
      198,  198,  198,  198,  369,  369,  457,  369,  369,  369,
      372,  372,  456,  372,  372,  372,  389,  389,  389,  389,
      455,  389,  421,  421,  421,  421,  421,  421,  471,  471,
      471,  471,  471,  471,  454,  453,  452,  449,  528,  372,
      369,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  420,  419,  418,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,

      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  388,  387,  386,  381,  383,  373,  370,  367,  366,
      365,  364,  363,  362,  361,  358,  357,  356,  355,  354,
      353,  352,  351,  346,  345,  344,  343,  342,  339,  334,
      333,  332,  331,  330,  329,  328,  327,  189,  316,  315,
      314,  313,  312,  311,  310,  307,  306,  305,  304,  303,
      302,  301,  300,  295,  294,  293,  292,  291,  288,  283,
      282,  281,  280,  279,  278,  277,  276,  132,  260,  257,
      203,  254,  203,  253,  250,  247,  246,  245,  244,  243,
      238,  232,  228,  224,  203,  220,  219,  218,  214,  203,

      203,  207,  203,  206,  203,  203,  202,  201,  193,  192,
      135,  186,  135,  185,  182,  179,  178,  177,  176,  175,
      170,  164,  160,  156,  135,  152,  151,  150,  146,  135,
      135,  139,  135,  138,  135,  135,  134,  133,  132,  126,
      125,  528,   11,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528
    } ;

static const flex_int16_t yy_chk[1003] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
        5,    3,    4,    4,    5,    4,    6,    7,    8,    9,
        6,    7,    8,    9,   10,   17,   23,   27,   10,   17,
       38,   28,   27,   28,  534,    5,   23,   31,   31,   33,
       33,    6,    7,    8,   41,   43,   45,   76,   41,   54,
       72,   41,   76,   54,   17,   43,   45,   38,   43,   46,
       72,    5,   56,   56,   46,   48,   46,    6,    7,    8,
        9,   48,   48,   80,   80,   10,   48,   62,   62,   62,
       62,   66,   66,   62,   66,  523,   66,   67,   67,   67,

       67,   77,   90,   77,   82,   82,   90,   92,   94,   90,
      103,  105,  105,  143,  103,  143,  521,   92,   94,   95,
       92,   66,   83,  114,   95,  165,   95,  114,   83,   83,
       83,   83,   83,  165,  191,  191,  520,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   87,
       87,   97,   87,  517,  128,  117,  120,   97,   97,  117,
      120,  119,   97,   87,  114,  119,  121,  130,  515,  119,
      121,   87,  122,  122,  153,  122,  154,  122,   87,  128,
       87,  122,  123,  121,  124,  127,  123,  155,  124,  127,

      119,  153,  130,  154,  158,  164,  198,  198,   87,  158,
      164,  124,  122,  177,  155,  511,  117,  120,  177,  153,
      196,  154,  509,  196,  127,  196,  119,  121,  188,  188,
      188,  188,  155,  211,  188,  211,  194,  194,  122,  194,
      256,  194,  504,  123,  256,  124,  197,  197,  197,  197,
      196,  200,  200,  200,  200,  221,  221,  268,  221,  222,
      222,  500,  222,  226,  223,  223,  194,  223,  226,  221,
      232,  233,  245,  222,  498,  232,  259,  245,  223,  233,
      259,  261,  268,  263,  221,  261,  221,  263,  222,  270,
      222,  256,  262,  223,  264,  223,  262,  266,  264,  267,

      262,  266,  286,  267,  221,  287,  265,  265,  222,  265,
      278,  265,  275,  223,  270,  265,  275,  278,  497,  286,
      493,  262,  287,  317,  317,  319,  319,  259,  267,  278,
      320,  320,  261,  320,  263,  320,  265,  286,  322,  323,
      287,  322,  323,  322,  323,  264,  329,  262,  266,  325,
      325,  384,  325,  329,  325,  326,  326,  446,  335,  335,
      320,  335,  265,  337,  337,  329,  337,  491,  322,  489,
      338,  338,  335,  338,  376,  382,  384,  337,  376,  382,
      379,  379,  446,  379,  338,  379,  385,  335,  385,  335,
      488,  385,  337,  417,  337,  417,  389,  390,  417,  338,

      450,  338,  487,  376,  486,  485,  484,  335,  451,  479,
      379,  475,  337,  389,  390,  415,  415,  450,  415,  338,
      415,  416,  416,  474,  416,  451,  416,  421,  421,  473,
      421,  389,  390,  422,  422,  450,  422,  470,  470,  467,
      470,  421,  470,  451,  465,  471,  471,  422,  471,  463,
      471,  416,  477,  477,  462,  477,  421,  461,  421,  460,
      478,  478,  422,  478,  422,  459,  477,  470,  507,  507,
      458,  507,  457,  452,  478,  471,  421,  448,  447,  445,
      443,  477,  422,  477,  442,  441,  439,  438,  437,  478,
      436,  478,  435,  433,  432,  431,  429,  428,  426,  425,

      424,  477,  423,  418,  413,  411,  410,  409,  407,  478,
      529,  529,  529,  529,  529,  529,  530,  530,  530,  530,
      530,  530,  531,  531,  531,  531,  531,  531,  532,  532,
      532,  532,  532,  532,  533,  533,  533,  533,  533,  533,
      535,  535,  535,  535,  406,  535,  536,  405,  404,  536,
      536,  536,  537,  537,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  538,  539,  539,  539,  539,  539,  539,
      540,  540,  540,  403,  540,  540,  541,  541,  541,  401,
      541,  541,  542,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  543,  544,  544,  400,  544,  544,  544,

      545,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  546,  547,  547,  399,  547,  547,  547,  548,  548,
      548,  548,  548,  548,  549,  549,  397,  549,  549,  549,
      550,  550,  396,  550,  550,  550,  551,  551,  551,  551,
      394,  551,  552,  552,  552,  552,  552,  552,  553,  553,
      553,  553,  553,  553,  393,  392,  391,  386,  383,  373,
      370,  367,  366,  365,  363,  362,  361,  359,  358,  357,
      356,  355,  354,  352,  351,  350,  349,  346,  345,  344,
      343,  342,  341,  340,  334,  333,  332,  316,  315,  314,
      312,  311,  310,  308,  307,  306,  305,  304,  303,  301,

      300,  299,  298,  295,  294,  293,  292,  291,  290,  289,
      284,  283,  282,  281,  273,  272,  260,  257,  253,  252,
      251,  250,  249,  248,  247,  244,  243,  240,  238,  237,
      236,  235,  234,  231,  230,  229,  228,  227,  225,  220,
      219,  218,  216,  212,  210,  208,  204,  190,  185,  184,
      183,  182,  181,  180,  179,  176,  175,  172,  170,  169,
      168,  167,  166,  163,  162,  161,  160,  159,  157,  152,
      151,  150,  148,  144,  142,  140,  136,  131,  118,  115,
      109,  108,  107,  106,  104,  102,  101,  100,   99,   98,
       96,   93,   91,   89,   88,   86,   85,   84,   81,   79,

       78,   75,   74,   73,   71,   70,   69,   68,   65,   64,
       60,   59,   58,   57,   55,   53,   52,   51,   50,   49,
       47,   44,   42,   40,   39,   37,   36,   35,   32,   30,
       29,   26,   25,   24,   22,   21,   20,   19,   18,   16,
       15,   11,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  528
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 3 "lexer.l"
#pragma warning (disable: 4005)
#include "parser.hpp"
#include "python_ast_node.hpp"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cmath>
using namespace std;
extern int yylex();
int indent_stack[100];
int top = -1;
int dedent_level = 0;  
void handle_dedent();

char firstChar;
char *copyyytext;
#line 1058 "lexer.cpp"
/* Regular expressions to match tokens */
/*WHITESPACE              [ \t]*/
/* start state for parsing the indentation */

/* normal start state for everything else */
 
#line 1065 "lexer.cpp"

#define INITIAL 0
#define DEDENTATION 1
#define comment 2
#define string 3
#define normal 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 114 "lexer.l"



#line 118 "lexer.l"
    if (top == -1) {
        indent_stack[++top] = 0;
    }



#line 1306 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 529 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 943 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 124 "lexer.l"
{ /* Skip blank lines */ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 126 "lexer.l"
{ /* Skip whole-line comments. */ }
	YY_BREAK
case 3:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 128 "lexer.l"
{ /* Skip comments on the same line as a statement. */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 131 "lexer.l"
{
    if (indent_stack[top]!= 0){
        copyyytext=strdup(yytext);
        firstChar = yytext[0];
        unput(yytext[0]);
        BEGIN(DEDENTATION);
    }
    else
    {
        REJECT;
    }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "lexer.l"
{
    if (indent_stack[top] < yyleng) {
        indent_stack[++top] = yyleng;
    
        return INDENT;
    } else if (indent_stack[top] > yyleng) {
        dedent_level=yyleng;
        unput(32);/*32 for space*/
        BEGIN(DEDENTATION);
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 157 "lexer.l"
{
        if (top >= 0 && indent_stack[top] != dedent_level) {
            handle_dedent();
            return DEDENT;
            unput(32);
        }
        else {
            dedent_level=0;
            BEGIN(normal);
        }
        if (top == -1) {
            fprintf(stderr, "Error: Incorrect indentation on line %d\n", yylineno);
            exit(1);
        }
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 173 "lexer.l"
{
    if (indent_stack[top] != 0) {
        top--;
        unput(yytext[0]);
        return DEDENT;
    }
    else {
        for (int i = strlen(copyyytext) - 1; i >= 0; i--) 
            unput(copyyytext[i]);
        BEGIN(normal);
    }
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 186 "lexer.l"
{
    return NEWLINE;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 190 "lexer.l"
{ 
                    return LITERALSTRING;
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 194 "lexer.l"
{ 
            /* Ignore spaces that haven't been handled above. */ 
        }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 198 "lexer.l"
{ }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 199 "lexer.l"
{ } 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 200 "lexer.l"
{ } 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 201 "lexer.l"
{ BEGIN (DEDENTATION); return MULTILINECOMMENT; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{
    BEGIN (DEDENTATION);
    return NEWLINE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 208 "lexer.l"
{
    BEGIN (string);
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 212 "lexer.l"
{ }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 213 "lexer.l"
{ }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 214 "lexer.l"
{ }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 215 "lexer.l"
{ BEGIN (DEDENTATION); return MULTILINESTRING; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 217 "lexer.l"
{/*printf("ADD: %s\n", yytext);*/return ADD;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 218 "lexer.l"
{/*printf("MINUS: %s\n", yytext);*/return MINUS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 219 "lexer.l"
{/*printf("MULTIPLY: %s\n", yytext);*/return MULTIPLY;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 220 "lexer.l"
{/*printf("DIVIDE: %s\n", yytext);*/return DIVIDE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 221 "lexer.l"
{/*printf("POWER: %s\n", yytext);*/return POWER;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 222 "lexer.l"
{/*printf("MODULO: %s\n", yytext);*/return MODULO;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 223 "lexer.l"
{/*printf("ASSIGN: %s\n", yytext);*/return ASSIGN;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 224 "lexer.l"
{/*printf("ASSIGN_ADD: %s\n", yytext);*/return ASSIGNADD;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 225 "lexer.l"
{/*printf("ASSIGN_MINUS: %s\n", yytext);*/return ASSIGNMINUS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 226 "lexer.l"
{/*printf("ASSIGN_MULTIPLY: %s\n", yytext);*/return ASSIGNMULTIPLY;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 227 "lexer.l"
{/*printf("ASSIGN_DIVIDE: %s\n", yytext);*/return ASSIGNDIVIDE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "lexer.l"
{/*printf("ASSIGN_MODULO: %s\n", yytext);*/return ASSIGNMODULO;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 229 "lexer.l"
{/*printf("ASSIGN_FLOOR_DIVISION: %s\n", yytext);*/return ASSIGNFLOORDIVISION;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 230 "lexer.l"
{/*printf("ASSIGN_EXPONINTIATION: %s\n", yytext);*/return ASSIGNEXPONINTIATION;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 231 "lexer.l"
{/*printf("ASSIGN_BITWISE_AND: %s\n", yytext);*/return ASSIGNBITWISEAND;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 232 "lexer.l"
{/*printf("ASSIGN_BITWISE_OR: %s\n", yytext);*/return ASSIGNBITWISEOR;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 233 "lexer.l"
{/*printf("ASSIGN_BITWISE_XOR: %s\n", yytext);*/return ASSIGNBITWISEXOR;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 234 "lexer.l"
{/*printf("ASSIGN_RIGHT_SHIFT: %s\n", yytext);*/return ASSIGNRIGHTSHIFT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 235 "lexer.l"
{/*printf("ASSIGN_LEFT_SHIFT: %s\n", yytext);*/return ASSIGNLEFTSHIFT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 236 "lexer.l"
{/*printf("EQUAL: %s\n", yytext);*/return EQUAL;}    
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 237 "lexer.l"
{/*printf("NOT: %s\n", yytext);*/return NOT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 238 "lexer.l"
{/*printf("NOT_EQUAL: %s\n", yytext);*/return NOTEQUAL;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 239 "lexer.l"
{/*printf("GREATER_THAN: %s\n", yytext);*/return GREATERTHAN;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 240 "lexer.l"
{/*printf("GREATER_OR_EQUAL: %s\n", yytext);*/return GREATEROREQUAL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 241 "lexer.l"
{/*printf("LESS_THAN: %s\n", yytext);*/return LESSTHAN;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 242 "lexer.l"
{/*printf("LESS_OR_EQUAL: %s\n", yytext);*/return LESSOREQUAL;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 243 "lexer.l"
{/*printf("LEFT_PARENTHES: %s\n", yytext);*/return LEFT_PARENTHES;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 244 "lexer.l"
{/*printf("RIGHT_PARENTHES: %s\n", yytext);*/return RIGHT_PARENTHES;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 245 "lexer.l"
{/*printf("LEFT_BRACES: %s\n", yytext);*/return LEFT_BRACES;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 246 "lexer.l"
{/*printf("RIGHT_BRACES: %s\n", yytext);*/return RIGHT_BRACES;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 247 "lexer.l"
{/*printf("LEFT_BRACKETS: %s\n", yytext);*/return LEFT_BRACKETS;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 248 "lexer.l"
{/*printf("RIGHT_BRACKETS: %s\n", yytext);*/return RIGHT_BRACKETS;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 249 "lexer.l"
{/*printf("COLON: %s\n", yytext);*/return COLON;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 250 "lexer.l"
{/*printf("COMMA: %s\n", yytext);*/return COMMA;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 251 "lexer.l"
{/*printf("SEMICOLON: %s\n", yytext);*/return SEMICOLON;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 252 "lexer.l"
{/*printf("COMMENT: %s\n", yytext);*/return COMMENT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 253 "lexer.l"
{/*printf("OPERATOR: %s\n", yytext);*/return OPERATORS;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 254 "lexer.l"
{/*printf("KEYWORD_FALSE: %s \n",yytext);*/return KEYWORD_FALSE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 255 "lexer.l"
{/*printf("KEYWORD_TRUE: %s \n",yytext);*/return KEYWORD_TRUE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 256 "lexer.l"
{/*printf("KEYWORD_AWAIT: %s \n",yytext);*/return KEYWORD_AWAIT;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 257 "lexer.l"
{/*printf("KEYWORD_IF: %s \n",yytext);*/return KEYWORD_IF;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 258 "lexer.l"
{/*printf("KEYWORD_ELSE: %s \n",yytext);*/return KEYWORD_ELSE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 259 "lexer.l"
{/*printf("KEYWORD_ELSE_IF: %s \n",yytext);*/return KEYWORD_ELSE_IF;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 260 "lexer.l"
{/*printf("KEYWORD_IMPORT: %s \n",yytext);*/return KEYWORD_IMPORT;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 261 "lexer.l"
{/*printf("KEYWORD_PASS: %s \n",yytext);*/return KEYWORD_PASS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 262 "lexer.l"
{/*printf("NONE: %s \n",yytext);*/return KEYWORD_NONE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 263 "lexer.l"
{/*printf("BREAK: %s \n",yytext);*/return KEYWORD_BREAK;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 264 "lexer.l"
{/*printf("KEYWORD_PASS: %s \n",yytext);*/return KEYWORD_EXCEPT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 265 "lexer.l"
{/*printf("KEYWORD_IN: %s \n",yytext);*/return KEYWORD_IN;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 266 "lexer.l"
{/*printf("KEYWORD_RAISE: %s \n",yytext);*/return KEYWORD_RAISE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 267 "lexer.l"
{/*printf("KEYWORD_CLASS: %s \n",yytext);*/return KEYWORD_CLASS;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 268 "lexer.l"
{/*printf("KEYWORD_FINALLY: %s \n",yytext);*/return KEYWORD_FINALLY;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 269 "lexer.l"
{/*printf("KEYWORD_IS: %s \n",yytext);*/return KEYWORD_IS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 270 "lexer.l"
{/*printf("KEYWORD_RETURN: %s \n",yytext);*/return KEYWORD_RETURN;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 271 "lexer.l"
{/*printf("KEYWORD_AND: %s \n",yytext);*/return KEYWORD_AND;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 272 "lexer.l"
{/*printf("KEYWORD_CONTINUE: %s \n",yytext);*/return KEYWORD_CONTINUE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 273 "lexer.l"
{/*printf("KEYWORD_FOR: %s \n",yytext);*/return KEYWORD_FOR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 274 "lexer.l"
{/*printf("KEYWORD_LAMBDA: %s \n",yytext);*/return KEYWORD_LAMBDA;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 275 "lexer.l"
{/*printf("KEYWORD_TRY: %s \n",yytext);*/return KEYWORD_TRY;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 276 "lexer.l"
{/*printf("KEYWORD_AS: %s \n",yytext);*/return KEYWORD_AS;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 277 "lexer.l"
{/*printf("KEYWORD_DEF: %s \n",yytext);*/return KEYWORD_DEF;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 278 "lexer.l"
{/*printf("KEYWORD_FROM: %s \n",yytext);*/return KEYWORD_FROM;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 279 "lexer.l"
{/*printf("KEYWORD_NONLOCAL: %s \n",yytext);*/return KEYWORD_NONLOCAL;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 280 "lexer.l"
{/*printf("KEYWORD_WHILE: %s \n",yytext);*/return KEYWORD_WHILE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 281 "lexer.l"
{/*printf("KEYWORD_ASSERT: %s \n",yytext);*/return KEYWORD_ASSERT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 282 "lexer.l"
{/*printf("KEYWORD_DEL: %s \n",yytext);*/return KEYWORD_DEL;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 283 "lexer.l"
{/*printf("KEYWORD_GLOBAL: %s \n",yytext);*/return KEYWORD_GLOBAL;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 284 "lexer.l"
{/*printf("KEYWORD_NOT: %s \n",yytext);*/return KEYWORD_NOT;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 285 "lexer.l"
{/*printf("KEYWORD_WITH: %s \n",yytext);*/return KEYWORD_WITH;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 286 "lexer.l"
{/*printf("KEYWORD_ASYNC: %s \n",yytext);*/return KEYWORD_ASYNC;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 287 "lexer.l"
{/*printf("KEYWORD_OR: %s \n",yytext);*/return KEYWORD_OR;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 288 "lexer.l"
{/*printf("KEYWORD_YIELD: %s \n",yytext);*/return KEYWORD_YIELD;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 289 "lexer.l"
{/*printf("KEYWORD_MATCH: %s \n",yytext);*/return KEYWORD_MATCH;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 290 "lexer.l"
{/*printf("KEYWORD_CASE: %s \n",yytext);*/return KEYWORD_CASE;}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 291 "lexer.l"
{/*printf("STRING_LITERAL: %s\n", yytext);*/return LITERALSTRING;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 292 "lexer.l"
{/*printf("CHAR_LITERAL: %s\n", yytext);*/return LITERALCHAR;}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 293 "lexer.l"
{/*printf("list: %s \n",yytext);*/return LIST;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 294 "lexer.l"
{/*printf("IDENTIFIER: %s \n",yytext);*/
                            yylval.astNode = new IdentifierNode("IDENTIFIER", "Identifier", yytext);
                            return IDENTIFIER;
                        }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 298 "lexer.l"
{yylval.astNode = new NumberNode("INTEGER", "Integer", atoi(yytext));
                        return INTEGER;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 300 "lexer.l"
{yylval.astNode = new NumberNode("FLOAT", "Float", atoi(yytext));
                        return FLOAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 302 "lexer.l"
{/* Ignore everything else. */ BEGIN (DEDENTATION);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(DEDENTATION):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string):
case YY_STATE_EOF(normal):
#line 303 "lexer.l"
{
            while (top > 0) {
                handle_dedent();
                return DEDENT;            
            }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 310 "lexer.l"
ECHO;
	YY_BREAK
#line 1964 "lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 529 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 529 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 528);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 310 "lexer.l"


void handle_dedent() {
        top--;
}
