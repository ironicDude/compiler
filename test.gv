digraph G {
	Program29 [label="Statements: Program29"]
	Program29 -> Program1;
	Program1 [label="Empty: Program1"]
	Program29 -> Statement2;
	Statement2 [label="Statements: Statement2"]
	Statement2 -> classWithoutInheritance28;
	classWithoutInheritance28 [label="ClassDeclaration: classWithoutInheritance28"]
	classWithoutInheritance28 -> IDENTIFIER0;
	IDENTIFIER0 [label="Identifier: MyClass"]
	classWithoutInheritance28 -> ClassBlock27;
	ClassBlock27 [label="ClassBlock: ClassBlock27"]
	ClassBlock27 -> Classbody5;
	Classbody5 [label="Body: Classbody5"]
	Classbody5 -> Classbody3;
	Classbody3 [label="Body: Classbody3"]
	Classbody3 -> assignment4;
	assignment4 [label="assignment"]
	assignment4 -> IDENTIFIER1;
	IDENTIFIER1 [label="Identifier: s"]
	assignment4 -> INTEGER2;
	INTEGER2 [shape=box,label="Integer: 100"]
	Classbody5 -> function;
	function [label="Declare Fun: function"]
	function -> Args7;
	Args7 [label="Arguments: Args7"]
	Args7 -> Arg6;
	Arg6 [label="Argument: Arg6"]
	Arg6 -> IDENTIFIER4;
	IDENTIFIER4 [label="Identifier: x"]
	Arg6 -> IDENTIFIER5;
	IDENTIFIER5 [label="Identifier: y"]
	function -> block26;
	block26 [label="Block: block26"]
	block26 -> Statement8;
	Statement8 [label="Statements: Statement8"]
	Statement8 -> x;
	x [label="Match: x"]
	x -> IDENTIFIER6;
	IDENTIFIER6 [label="Identifier: x"]
	x -> MatchBlock13;
	MatchBlock13 [label="MatchBlock: MatchBlock13"]
	MatchBlock13 -> Case12;
	Case12 [label="Case: Case12"]
	Case12 -> INTEGER7;
	INTEGER7 [shape=box,label="Integer: 1"]
	Case12 -> block11;
	block11 [label="Block: block11"]
	block11 -> Statement9;
	Statement9 [label="Statements: Statement9"]
	Statement9 -> Return10;
	Return10 [label="Return: Return10"]
	Return10 -> BinaryExpression_IDENTIFIER8PLUSINTEGER9;
	BinaryExpression_IDENTIFIER8PLUSINTEGER9 [label="+"]
	BinaryExpression_IDENTIFIER8PLUSINTEGER9 -> IDENTIFIER8;
	IDENTIFIER8 [label="Identifier: x"]
	BinaryExpression_IDENTIFIER8PLUSINTEGER9 -> INTEGER9;
	INTEGER9 [shape=box,label="Integer: 1"]
	Statement9 -> INTEGER9;
	INTEGER9 [shape=box,label="Integer: 1"]
	MatchBlock13 -> Case17;
	Case17 [label="Case: Case17"]
	Case17 -> INTEGER10;
	INTEGER10 [shape=box,label="Integer: 2"]
	Case17 -> block16;
	block16 [label="Block: block16"]
	block16 -> Statement14;
	Statement14 [label="Statements: Statement14"]
	Statement14 -> Return15;
	Return15 [label="Return: Return15"]
	Return15 -> BinaryExpression_IDENTIFIER11PLUSINTEGER12;
	BinaryExpression_IDENTIFIER11PLUSINTEGER12 [label="+"]
	BinaryExpression_IDENTIFIER11PLUSINTEGER12 -> IDENTIFIER11;
	IDENTIFIER11 [label="Identifier: w"]
	BinaryExpression_IDENTIFIER11PLUSINTEGER12 -> INTEGER12;
	INTEGER12 [shape=box,label="Integer: 2"]
	Statement14 -> INTEGER12;
	INTEGER12 [shape=box,label="Integer: 2"]
	MatchBlock13 -> Case21;
	Case21 [label="Case: Case21"]
	Case21 -> INTEGER13;
	INTEGER13 [shape=box,label="Integer: 1"]
	Case21 -> block20;
	block20 [label="Block: block20"]
	block20 -> Statement18;
	Statement18 [label="Statements: Statement18"]
	Statement18 -> Assert19;
	Assert19 [label="Assert: Assert19"]
	Assert19 -> BinaryExpression_IDENTIFIER14PLUSINTEGER15;
	BinaryExpression_IDENTIFIER14PLUSINTEGER15 [label="+"]
	BinaryExpression_IDENTIFIER14PLUSINTEGER15 -> IDENTIFIER14;
	IDENTIFIER14 [label="Identifier: x"]
	BinaryExpression_IDENTIFIER14PLUSINTEGER15 -> INTEGER15;
	INTEGER15 [shape=box,label="Integer: 1"]
	Statement18 -> INTEGER15;
	INTEGER15 [shape=box,label="Integer: 1"]
	MatchBlock13 -> Case25;
	Case25 [label="Case: Case25"]
	Case25 -> INTEGER16;
	INTEGER16 [shape=box,label="Integer: 2"]
	Case25 -> block24;
	block24 [label="Block: block24"]
	block24 -> Statement22;
	Statement22 [label="Statements: Statement22"]
	Statement22 -> Return23;
	Return23 [label="Return: Return23"]
	Return23 -> BinaryExpression_IDENTIFIER17PLUSINTEGER18;
	BinaryExpression_IDENTIFIER17PLUSINTEGER18 [label="+"]
	BinaryExpression_IDENTIFIER17PLUSINTEGER18 -> IDENTIFIER17;
	IDENTIFIER17 [label="Identifier: w"]
	BinaryExpression_IDENTIFIER17PLUSINTEGER18 -> INTEGER18;
	INTEGER18 [shape=box,label="Integer: 2"]
}
