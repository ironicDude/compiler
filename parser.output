Terminals unused in grammar

   WHITESPACE
   LETTER
   ALPHANUM
   LITERALCHAR
   MULTILINESTRING
   KEYWORD_AWAIT
   KEYWORD_LAMBDA
   KEYWORD_ASYNC
   OPERATORS
   ASSIGNADD
   ASSIGNMINUS
   ASSIGNMULTIPLY
   ASSIGNDIVIDE
   ASSIGNMODULO
   ASSIGNFLOORDIVISION
   ASSIGNEXPONINTIATION
   ASSIGNBITWISEAND
   ASSIGNBITWISEOR
   ASSIGNBITWISEXOR
   ASSIGNRIGHTSHIFT
   ASSIGNLEFTSHIFT
   NOT
   LEFT_BRACES
   RIGHT_BRACES
   LEFT_BRACKETS
   RIGHT_BRACKETS
   SEMICOLON
   '+'
<<<<<<< HEAD
   '-'
=======
   '*'
>>>>>>> main
   '/'


State 0 conflicts: 1 shift/reduce
State 4 conflicts: 1 shift/reduce
State 28 conflicts: 24 shift/reduce
State 32 conflicts: 2 shift/reduce
<<<<<<< HEAD
State 56 conflicts: 12 shift/reduce
State 72 conflicts: 1 shift/reduce
State 75 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 80 conflicts: 26 reduce/reduce
State 83 conflicts: 12 shift/reduce
State 98 conflicts: 26 reduce/reduce
State 107 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 127 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 130 conflicts: 2 shift/reduce
State 131 conflicts: 6 shift/reduce
State 132 conflicts: 1 shift/reduce
State 134 conflicts: 6 shift/reduce
State 153 conflicts: 12 shift/reduce
State 160 conflicts: 12 shift/reduce
State 197 conflicts: 1 shift/reduce
State 201 conflicts: 6 shift/reduce
State 202 conflicts: 6 shift/reduce
State 203 conflicts: 6 shift/reduce
State 204 conflicts: 6 shift/reduce
State 205 conflicts: 6 shift/reduce
State 206 conflicts: 6 shift/reduce
State 213 conflicts: 2 shift/reduce
State 214 conflicts: 2 shift/reduce
State 253 conflicts: 1 shift/reduce
=======
State 56 conflicts: 9 shift/reduce
<<<<<<< HEAD
State 72 conflicts: 1 shift/reduce
State 75 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 79 conflicts: 26 reduce/reduce
State 82 conflicts: 9 shift/reduce
State 97 conflicts: 26 reduce/reduce
State 124 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 127 conflicts: 1 shift/reduce
State 129 conflicts: 2 shift/reduce
State 131 conflicts: 6 shift/reduce
State 132 conflicts: 6 shift/reduce
State 151 conflicts: 9 shift/reduce
State 157 conflicts: 9 shift/reduce
State 197 conflicts: 6 shift/reduce
State 198 conflicts: 6 shift/reduce
State 199 conflicts: 6 shift/reduce
State 200 conflicts: 6 shift/reduce
State 201 conflicts: 6 shift/reduce
State 202 conflicts: 6 shift/reduce
State 209 conflicts: 2 shift/reduce
State 210 conflicts: 2 shift/reduce
State 247 conflicts: 1 shift/reduce
>>>>>>> main
=======
State 73 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce
State 78 conflicts: 1 shift/reduce
State 80 conflicts: 26 reduce/reduce
State 83 conflicts: 9 shift/reduce
State 98 conflicts: 26 reduce/reduce
State 114 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 119 conflicts: 2 shift/reduce
State 121 conflicts: 6 shift/reduce
State 122 conflicts: 6 shift/reduce
State 143 conflicts: 9 shift/reduce
State 149 conflicts: 9 shift/reduce
State 179 conflicts: 6 shift/reduce
State 180 conflicts: 6 shift/reduce
State 181 conflicts: 6 shift/reduce
State 182 conflicts: 6 shift/reduce
State 183 conflicts: 6 shift/reduce
State 184 conflicts: 6 shift/reduce
State 191 conflicts: 2 shift/reduce
State 192 conflicts: 2 shift/reduce
State 229 conflicts: 1 shift/reduce
>>>>>>> main


Grammar

    0 $accept: prog $end

    1 prog: /* empty */
    2     | NEWLINE
    3     | prog statements

    4 statements: statements statement
    5           | statement
    6           | statements NEWLINE

    7 statement: compound_statement
    8          | simple_statement
    9          | NEWLINE
   10          | COMMENT
   11          | MULTILINECOMMENT

   12 simple_statement: assignment
   13                 | return_statement
   14                 | yield_statement
   15                 | assert_statement
   16                 | raise_statement
   17                 | global_statement
   18                 | nonlocal_statement
   19                 | del_statment
   20                 | import_statments
   21                 | function_call
   22                 | with_statment
   23                 | KEYWORD_PASS
   24                 | KEYWORD_BREAK
   25                 | KEYWORD_CONTINUE

   26 compound_statement: function
   27                   | conditional_statement
   28                   | class
   29                   | for_statement
   30                   | while_statement
   31                   | match_statement
   32                   | try_statement

   33 import_statments: import_statment NEWLINE
   34                 | import_statments import_statment

   35 import_statment: KEYWORD_IMPORT member_expression
   36                | KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER
<<<<<<< HEAD
   37                | KEYWORD_FROM member_expression KEYWORD_IMPORT '*'
=======
   37                | KEYWORD_FROM member_expression KEYWORD_IMPORT MULTIPLY
>>>>>>> main
   38                | KEYWORD_IMPORT member_expression KEYWORD_AS IDENTIFIER
   39                | KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER

   40 assignment: IDENTIFIER ASSIGN number

<<<<<<< HEAD
   50 expression: expression ADD expression
   51           | expression MINUS expression
   52           | expression MULTIPLY expression
   53           | expression DIVIDE expression
   54           | expression POWER expression
   55           | expression MODULO expression
   56           | '|' expression
<<<<<<< HEAD
   57           | LEFT_PARENTHES expression RIGHT_PARENTHES
   58           | MINUS expression
=======
   57           | '(' expression ')'
   58           | '-' expression
>>>>>>> main
   59           | number
   60           | member_expression
   61           | function_call
   62           | LITERALSTRING
   63           | LIST
<<<<<<< HEAD
   64           | TUPLE
   65           | KEYWORD_NONE
   66           | KEYWORD_TRUE
   67           | KEYWORD_FALSE

   68 number: INTEGER
   69       | FLOAT

   70 del_statment: KEYWORD_DEL IDENTIFIER
   71             | KEYWORD_DEL IDENTIFIER LIST

   72 return_statement: KEYWORD_RETURN expression
   73                 | KEYWORD_RETURN logical_expression

   74 yield_statement: KEYWORD_YIELD expression

   75 assert_statement: KEYWORD_ASSERT logical_expression
   76                 | KEYWORD_ASSERT logical_expression COMMA LITERALSTRING

   77 raise_statement: KEYWORD_RAISE function_call
   78                | KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER

   79 global_statement: KEYWORD_GLOBAL global_nonlocal_targets

   80 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets

   81 global_nonlocal_targets: IDENTIFIER
   82                        | IDENTIFIER COMMA global_nonlocal_targets
=======
   64           | KEYWORD_NONE
=======
   41 expression: expression ADD expression
   42           | expression MINUS expression
   43           | expression MULTIPLY expression
   44           | expression DIVIDE expression
   45           | expression POWER expression
   46           | expression MODULO expression
   47           | '|' expression
   48           | '(' expression ')'
   49           | '-' expression
   50           | number
   51           | member_expression
   52           | function_call
   53           | LITERALSTRING
   54           | LIST
   55           | KEYWORD_NONE
>>>>>>> main

   56 number: INTEGER
   57       | FLOAT

   58 del_statment: KEYWORD_DEL IDENTIFIER
   59             | KEYWORD_DEL IDENTIFIER LIST

   60 return_statement: KEYWORD_RETURN expression
   61                 | KEYWORD_RETURN logical_expression

   62 yield_statement: KEYWORD_YIELD expression

   63 assert_statement: KEYWORD_ASSERT logical_expression
   64                 | KEYWORD_ASSERT logical_expression COMMA LITERALSTRING

   65 raise_statement: KEYWORD_RAISE function_call
   66                | KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER

   67 global_statement: KEYWORD_GLOBAL global_nonlocal_targets

   68 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets

<<<<<<< HEAD
   78 global_nonlocal_targets: IDENTIFIER
   79                        | IDENTIFIER COMMA global_nonlocal_targets
>>>>>>> main

   83 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block

   84 match_block: NEWLINE INDENT cases DEDENT

   85 cases: cases case
   86      | case

   87 case: KEYWORD_CASE expression COLON block

   88 try_statement: try finally
   89              | try except_statements
   90              | try except_statements finally
   91              | try except_statements else_statement
   92              | try except_statements else_statement finally

   93 try: KEYWORD_TRY COLON block

   94 except: KEYWORD_EXCEPT COLON block
   95       | KEYWORD_EXCEPT member_expression COLON block
   96       | KEYWORD_EXCEPT member_expression KEYWORD_AS IDENTIFIER COLON block

   97 finally: KEYWORD_FINALLY COLON block

   98 except_statements: except_statements except
   99                  | except

  100 with_statment: KEYWORD_WITH with_stmt COLON block

  101 with_stmt: function_call KEYWORD_AS IDENTIFIER
  102          | with_stmt COMMA function_call KEYWORD_AS IDENTIFIER

  103 class: class_with_inheritance
  104      | class_without_inheritance

  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block

  106 class_block: NEWLINE INDENT class_body DEDENT

  107 class_body: /* empty */
  108           | class_body assignment
  109           | class_body function
  110           | class_body NEWLINE

  111 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON class_block

  112 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES
  113              | IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES
  114              | IDENTIFIER LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  115              | IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block

  117 block: NEWLINE INDENT statements DEDENT

<<<<<<< HEAD
  118 args: /* empty */
  119     | args expression COMMA
  120     | args expression
  121     | expression COMMA
  122     | expression

  123 member_expression: IDENTIFIER
  124                  | member_expression IDENTIFIER
  125                  | member_expression function_call

  126 logical_expression: expression
  127                   | expression GREATEROREQUAL expression
  128                   | expression GREATERTHAN expression
  129                   | expression LESSOREQUAL expression
  130                   | expression LESSTHAN expression
  131                   | expression EQUAL expression
  132                   | expression NOTEQUAL expression
  133                   | expression KEYWORD_IS expression
  134                   | logical_expression KEYWORD_AND logical_expression
  135                   | logical_expression KEYWORD_OR logical_expression
  136                   | KEYWORD_NOT logical_expression

  137 conditional_statement: if_statement elif_else

  138 elif_else: /* empty */
  139          | elif_stmts else_statement
  140          | elif_stmts
  141          | else_statement

  142 elif_stmts: elif_statement
  143           | elif_stmts elif_statement

  144 if_statement: KEYWORD_IF logical_expression COLON block
  145             | KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

  146 else_statement: KEYWORD_ELSE COLON block

  147 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block
  148               | KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block
  150              | KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block
  151              | KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  152              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block
  153              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  154              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

  155 while_statement: KEYWORD_WHILE logical_expression COLON block
  156                | KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
=======
  118 member_expression: IDENTIFIER
  119                  | member_expression IDENTIFIER
  120                  | member_expression function_call
=======
   69 global_nonlocal_targets: IDENTIFIER
   70                        | IDENTIFIER COMMA global_nonlocal_targets

   71 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block

   72 match_block: NEWLINE INDENT cases DEDENT

   73 cases: cases case
   74      | case

   75 case: KEYWORD_CASE expression COLON block

   76 try_statement: try finally
   77              | try except_statements
   78              | try except_statements finally
   79              | try except_statements else_statement
   80              | try except_statements else_statement finally

   81 try: KEYWORD_TRY COLON block

   82 except: KEYWORD_EXCEPT COLON block
   83       | KEYWORD_EXCEPT member_expression COLON block

   84 finally: KEYWORD_FINALLY COLON block

   85 except_statements: except_statements except
   86                  | except

   87 with_statment: KEYWORD_WITH with_stmt COLON block

   88 with_stmt: function_call KEYWORD_AS IDENTIFIER
   89          | with_stmt COMMA function_call KEYWORD_AS IDENTIFIER

   90 class: class_with_inheritance
   91      | class_without_inheritance

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block

   93 class_block: NEWLINE INDENT class_body DEDENT

   94 class_body: /* empty */
   95           | class_body assignment
   96           | class_body function
   97           | class_body NEWLINE

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block DEDENT

   99 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES
  100              | IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES
  101              | IDENTIFIER LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block

  104 block: NEWLINE INDENT statements DEDENT

  105 args: /* empty */
  106     | args expression COMMA
  107     | args expression
  108     | expression COMMA
  109     | expression
>>>>>>> main

  110 member_expression: IDENTIFIER
  111                  | member_expression IDENTIFIER
  112                  | member_expression function_call

  113 logical_expression: expression
  114                   | expression GREATEROREQUAL expression
  115                   | expression GREATERTHAN expression
  116                   | expression LESSOREQUAL expression
  117                   | expression LESSTHAN expression
  118                   | expression EQUAL expression
  119                   | expression NOTEQUAL expression
  120                   | logical_expression KEYWORD_AND logical_expression
  121                   | logical_expression KEYWORD_OR logical_expression
  122                   | KEYWORD_NOT logical_expression
  123                   | KEYWORD_TRUE
  124                   | KEYWORD_FALSE

  125 conditional_statement: if_statement elif_else

  126 elif_else: /* empty */
  127          | elif_stmts else_statement
  128          | elif_stmts
  129          | else_statement

  130 elif_stmts: elif_statement
  131           | elif_stmts elif_statement

  132 if_statement: KEYWORD_IF logical_expression COLON block
  133             | KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

  134 else_statement: KEYWORD_ELSE COLON block

  135 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block
  136               | KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

<<<<<<< HEAD
  151 while_statement: KEYWORD_WHILE logical_expression COLON block
  152                | KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
>>>>>>> main
=======
  137 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block
  138              | KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block
  139              | KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  140              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block
  141              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  142              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

  143 while_statement: KEYWORD_WHILE logical_expression COLON block
  144                | KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
>>>>>>> main


Terminals, with rules where they appear

$end (0) 0
<<<<<<< HEAD
<<<<<<< HEAD
'*' (42) 37
'+' (43)
'-' (45)
'.' (46) 154
=======
'(' (40) 57
')' (41) 57
'*' (42)
'+' (43)
'-' (45) 58
'.' (46) 150
>>>>>>> main
=======
'(' (40) 48
')' (41) 48
'*' (42)
'+' (43)
'-' (45) 49
'.' (46) 142
>>>>>>> main
'/' (47)
'|' (124) 47
error (256)
WHITESPACE (258)
LETTER (259)
ALPHANUM (260)
<<<<<<< HEAD
<<<<<<< HEAD
IDENTIFIER (261) 36 38 39 70 71 78 81 82 83 96 101 102 105 111 112
    113 114 115 116 123 124 149 150 152 153 154
LIST (262) 63 71 150
LITERALSTRING (263) 62 76 114
LITERALCHAR (264)
KEYWORD_FALSE (265) 67
KEYWORD_TRUE (266) 66
MULTILINESTRING (267)
KEYWORD_AWAIT (268)
KEYWORD_IF (269) 144 145
KEYWORD_ELSE (270) 146
KEYWORD_ELSE_IF (271) 147 148
KEYWORD_IMPORT (272) 35 36 37 38 39
KEYWORD_PASS (273) 23
KEYWORD_NONE (274) 65
KEYWORD_BREAK (275) 24
KEYWORD_EXCEPT (276) 94 95 96
KEYWORD_IN (277) 149 150 151 152 153 154
KEYWORD_RAISE (278) 77 78
KEYWORD_CLASS (279) 105 111
KEYWORD_FINALLY (280) 97
KEYWORD_IS (281) 133
KEYWORD_RETURN (282) 72 73
KEYWORD_AND (283) 134
KEYWORD_CONTINUE (284) 25
KEYWORD_FOR (285) 149 150 151 152 153 154
KEYWORD_LAMBDA (286)
KEYWORD_TRY (287) 93
KEYWORD_AS (288) 38 39 96 101 102
KEYWORD_DEF (289) 116
KEYWORD_FROM (290) 36 37 39 78
KEYWORD_NONLOCAL (291) 80
KEYWORD_WHILE (292) 155 156
KEYWORD_ASSERT (293) 75 76
KEYWORD_DEL (294) 70 71
KEYWORD_GLOBAL (295) 79
KEYWORD_NOT (296) 136
KEYWORD_WITH (297) 100
KEYWORD_ASYNC (298)
KEYWORD_OR (299) 135
KEYWORD_YIELD (300) 74
OPERATORS (301)
COMMENT (302) 10
ADD (303) 50
MINUS (304) 51 58
MULTIPLY (305) 52
=======
IDENTIFIER (261) 36 38 39 67 68 75 78 79 80 97 98 101 106 107 108 109
    110 111 118 119 145 146 148 149 150
LIST (262) 63 68 146
LITERALSTRING (263) 62 73 109
=======
IDENTIFIER (261) 36 38 39 40 58 59 66 69 70 71 88 89 92 98 99 100 101
    102 103 110 111 137 138 140 141 142
LIST (262) 54 59 138
LITERALSTRING (263) 53 64 101
>>>>>>> main
LITERALCHAR (264)
KEYWORD_FALSE (265) 124
KEYWORD_TRUE (266) 123
MULTILINESTRING (267)
KEYWORD_AWAIT (268)
KEYWORD_IF (269) 132 133
KEYWORD_ELSE (270) 134
KEYWORD_ELSE_IF (271) 135 136
KEYWORD_IMPORT (272) 35 36 37 38 39
KEYWORD_PASS (273) 23
KEYWORD_NONE (274) 55
KEYWORD_BREAK (275) 24
KEYWORD_EXCEPT (276) 82 83
KEYWORD_IN (277) 137 138 139 140 141 142
KEYWORD_RAISE (278) 65 66
KEYWORD_CLASS (279) 92 98
KEYWORD_FINALLY (280) 84
KEYWORD_IS (281)
KEYWORD_RETURN (282) 60 61
KEYWORD_AND (283) 120
KEYWORD_CONTINUE (284) 25
KEYWORD_FOR (285) 137 138 139 140 141 142
KEYWORD_LAMBDA (286)
KEYWORD_TRY (287) 81
KEYWORD_AS (288) 38 39 88 89
KEYWORD_DEF (289) 103
KEYWORD_FROM (290) 36 37 39 66
KEYWORD_NONLOCAL (291) 68
KEYWORD_WHILE (292) 143 144
KEYWORD_ASSERT (293) 63 64
KEYWORD_DEL (294) 58 59
KEYWORD_GLOBAL (295) 67
KEYWORD_NOT (296) 122
KEYWORD_WITH (297) 87
KEYWORD_ASYNC (298)
KEYWORD_OR (299) 121
KEYWORD_YIELD (300) 62
OPERATORS (301)
COMMENT (302) 10
<<<<<<< HEAD
ADD (303) 50
MINUS (304) 51
MULTIPLY (305) 37 52
>>>>>>> main
=======
ADD (303) 41
MINUS (304) 42
MULTIPLY (305) 37 43
>>>>>>> main
MULTILINECOMMENT (306) 11
DIVIDE (307) 44
POWER (308) 45
MODULO (309) 46
ASSIGN (310) 40
ASSIGNADD (311)
ASSIGNMINUS (312)
ASSIGNMULTIPLY (313)
ASSIGNDIVIDE (314)
ASSIGNMODULO (315)
ASSIGNFLOORDIVISION (316)
ASSIGNEXPONINTIATION (317)
ASSIGNBITWISEAND (318)
ASSIGNBITWISEOR (319)
ASSIGNBITWISEXOR (320)
<<<<<<< HEAD
ASSIGNRIGHTSHIFT (321) 48
ASSIGNLEFTSHIFT (322) 49
<<<<<<< HEAD
EQUAL (323) 131
NOT (324)
NOTEQUAL (325) 132
GREATERTHAN (326) 128
GREATEROREQUAL (327) 127
LESSTHAN (328) 130
LESSOREQUAL (329) 129
LEFT_PARENTHES (330) 57 105 112 113 114 115 116 145 148 151 156
RIGHT_PARENTHES (331) 57 105 112 113 114 115 116 145 148 151 156
=======
EQUAL (323) 126
NOT (324)
NOTEQUAL (325) 127
GREATERTHAN (326) 123
GREATEROREQUAL (327) 122
LESSTHAN (328) 125
LESSOREQUAL (329) 124
LEFT_PARENTHES (330) 101 107 108 109 110 111 141 144 147 152
RIGHT_PARENTHES (331) 101 107 108 109 110 111 141 144 147 152
>>>>>>> main
=======
ASSIGNRIGHTSHIFT (321)
ASSIGNLEFTSHIFT (322)
EQUAL (323) 118
NOT (324)
NOTEQUAL (325) 119
GREATERTHAN (326) 115
GREATEROREQUAL (327) 114
LESSTHAN (328) 117
LESSOREQUAL (329) 116
LEFT_PARENTHES (330) 92 99 100 101 102 103 133 136 139 144
RIGHT_PARENTHES (331) 92 99 100 101 102 103 133 136 139 144
>>>>>>> main
LEFT_BRACES (332)
RIGHT_BRACES (333)
LEFT_BRACKETS (334)
RIGHT_BRACKETS (335)
<<<<<<< HEAD
<<<<<<< HEAD
COLON (336) 83 87 93 94 95 96 97 100 105 111 116 144 145 146 147 148
    149 150 151 152 153 154 155 156
COMMA (337) 76 82 102 119 121
SEMICOLON (338)
INTEGER (339) 68
FLOAT (340) 69
DEDENT (341) 84 106 117
INDENT (342) 84 106 117
NEWLINE (343) 2 6 9 33 84 106 110 117
KEYWORD_MATCH (344) 83
KEYWORD_CASE (345) 87
TUPLE (346) 64
UMINUS (347)
=======
COLON (336) 80 84 90 91 92 93 96 101 106 111 140 141 142 143 144 145
    146 147 148 149 150 151 152
COMMA (337) 73 79 98 114 116
=======
COLON (336) 71 75 81 82 83 84 87 92 98 103 132 133 134 135 136 137
    138 139 140 141 142 143 144
COMMA (337) 64 70 89 106 108
>>>>>>> main
SEMICOLON (338)
INTEGER (339) 56
FLOAT (340) 57
DEDENT (341) 72 93 98 104
INDENT (342) 72 93 98 104
NEWLINE (343) 2 6 9 33 72 93 97 98 104
KEYWORD_MATCH (344) 71
KEYWORD_CASE (345) 75
UMINUS (346)
>>>>>>> main


Nonterminals, with rules where they appear

$accept (99)
    on left: 0
prog (100)
    on left: 1 2 3, on right: 0 3
<<<<<<< HEAD
statements (101)
    on left: 4 5 6, on right: 3 4 6 117
statement (102)
=======
statements (102)
    on left: 4 5 6, on right: 3 4 6 104
statement (103)
>>>>>>> main
    on left: 7 8 9 10 11, on right: 4 5
simple_statement (103)
    on left: 12 13 14 15 16 17 18 19 20 21 22 23 24 25, on right: 8
compound_statement (104)
    on left: 26 27 28 29 30 31 32, on right: 7
<<<<<<< HEAD
import_statments (105)
    on left: 33 34, on right: 20 34
import_statment (106)
    on left: 35 36 37 38 39, on right: 33 34
assignment (107)
    on left: 40 41 42 43 44 45 46 47 48 49, on right: 12 108
expression (108)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67,
    on right: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
    58 72 74 87 119 120 121 122 126 127 128 129 130 131 132 133
number (109)
    on left: 68 69, on right: 59 113
del_statment (110)
    on left: 70 71, on right: 19
return_statement (111)
    on left: 72 73, on right: 13
yield_statement (112)
    on left: 74, on right: 14
assert_statement (113)
    on left: 75 76, on right: 15
raise_statement (114)
    on left: 77 78, on right: 16
global_statement (115)
    on left: 79, on right: 17
nonlocal_statement (116)
    on left: 80, on right: 18
global_nonlocal_targets (117)
    on left: 81 82, on right: 79 80 82
match_statement (118)
    on left: 83, on right: 31
match_block (119)
    on left: 84, on right: 83
cases (120)
    on left: 85 86, on right: 84 85
case (121)
    on left: 87, on right: 85 86
try_statement (122)
    on left: 88 89 90 91 92, on right: 32
try (123)
    on left: 93, on right: 88 89 90 91 92
except (124)
    on left: 94 95 96, on right: 98 99
finally (125)
    on left: 97, on right: 88 90 92
except_statements (126)
    on left: 98 99, on right: 89 90 91 92 98
with_statment (127)
    on left: 100, on right: 22
with_stmt (128)
    on left: 101 102, on right: 100 102
class (129)
    on left: 103 104, on right: 28
class_with_inheritance (130)
    on left: 105, on right: 103
class_block (131)
    on left: 106, on right: 105 111
class_body (132)
    on left: 107 108 109 110, on right: 106 108 109 110
=======
import_statments (106)
    on left: 33 34, on right: 20 34
import_statment (107)
    on left: 35 36 37 38 39, on right: 33 34
assignment (108)
    on left: 40, on right: 12 95
expression (109)
    on left: 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55, on right:
    41 42 43 44 45 46 47 48 49 60 62 75 106 107 108 109 113 114 115
    116 117 118 119
number (110)
    on left: 56 57, on right: 40 50 100
del_statment (111)
    on left: 58 59, on right: 19
return_statement (112)
    on left: 60 61, on right: 13
yield_statement (113)
    on left: 62, on right: 14
assert_statement (114)
    on left: 63 64, on right: 15
raise_statement (115)
    on left: 65 66, on right: 16
global_statement (116)
    on left: 67, on right: 17
nonlocal_statement (117)
    on left: 68, on right: 18
global_nonlocal_targets (118)
    on left: 69 70, on right: 67 68 70
match_statement (119)
    on left: 71, on right: 31
match_block (120)
    on left: 72, on right: 71
cases (121)
    on left: 73 74, on right: 72 73
case (122)
    on left: 75, on right: 73 74
try_statement (123)
    on left: 76 77 78 79 80, on right: 32
try (124)
    on left: 81, on right: 76 77 78 79 80
except (125)
    on left: 82 83, on right: 85 86
finally (126)
    on left: 84, on right: 76 78 80
except_statements (127)
    on left: 85 86, on right: 77 78 79 80 85
with_statment (128)
    on left: 87, on right: 22
with_stmt (129)
    on left: 88 89, on right: 87 89
class (130)
    on left: 90 91, on right: 28
class_with_inheritance (131)
    on left: 92, on right: 90
class_block (132)
<<<<<<< HEAD
    on left: 102 103 104 105, on right: 101 103 104 105 106
>>>>>>> main
class_without_inheritance (133)
    on left: 111, on right: 104
function_call (134)
<<<<<<< HEAD
    on left: 112 113 114 115, on right: 21 61 77 78 101 102 115 125
    149 151 153 154
=======
    on left: 107 108 109 110, on right: 21 61 74 75 97 98 110 120 145
    147 149 150
>>>>>>> main
function (135)
    on left: 116, on right: 26 109
block (136)
<<<<<<< HEAD
    on left: 117, on right: 87 93 94 95 96 97 100 116 144 145 146 147
    148 149 150 151 152 153 154 155 156
args (137)
    on left: 118 119 120 121 122, on right: 105 112 116 119 120 151
member_expression (138)
    on left: 123 124 125, on right: 35 36 37 38 39 40 41 42 43 44 45
    46 47 48 49 60 95 96 124 125 152 153 154
logical_expression (139)
    on left: 126 127 128 129 130 131 132 133 134 135 136, on right:
    73 75 76 134 135 136 144 145 147 148 155 156
conditional_statement (140)
    on left: 137, on right: 27
elif_else (141)
    on left: 138 139 140 141, on right: 137
elif_stmts (142)
    on left: 142 143, on right: 139 140 143
if_statement (143)
    on left: 144 145, on right: 137
else_statement (144)
    on left: 146, on right: 91 92 139 141
elif_statement (145)
    on left: 147 148, on right: 142 143
for_statement (146)
    on left: 149 150 151 152 153 154, on right: 29
while_statement (147)
    on left: 155 156, on right: 30
=======
    on left: 112, on right: 84 90 91 92 93 96 111 140 141 142 143 144
    145 146 147 148 149 150 151 152
args (137)
    on left: 113 114 115 116 117, on right: 101 107 111 114 115 147
member_expression (138)
    on left: 118 119 120, on right: 35 36 37 38 39 40 41 42 43 44 45
    46 47 48 49 60 92 119 120 148 149 150
logical_expression (139)
    on left: 121 122 123 124 125 126 127 128 129 130 131 132, on right:
    70 72 73 128 129 130 140 141 143 144 151 152
conditional_statement (140)
    on left: 133, on right: 27
elif_else (141)
    on left: 134 135 136 137, on right: 133
elif_stmts (142)
    on left: 138 139, on right: 135 136 139
if_statement (143)
    on left: 140 141, on right: 133
else_statement (144)
    on left: 142, on right: 88 89 135 137
elif_statement (145)
    on left: 143 144, on right: 138 139
for_statement (146)
    on left: 145 146 147 148 149 150, on right: 29
while_statement (147)
    on left: 151 152, on right: 30
>>>>>>> main
=======
    on left: 93, on right: 92 98
class_body (133)
    on left: 94 95 96 97, on right: 93 95 96 97
class_without_inheritance (134)
    on left: 98, on right: 91
function_call (135)
    on left: 99 100 101 102, on right: 21 52 65 66 88 89 102 112 137
    139 141 142
function (136)
    on left: 103, on right: 26 96
block (137)
    on left: 104, on right: 75 81 82 83 84 87 103 132 133 134 135 136
    137 138 139 140 141 142 143 144
args (138)
    on left: 105 106 107 108 109, on right: 92 99 103 106 107 139
member_expression (139)
    on left: 110 111 112, on right: 35 36 37 38 39 51 83 111 112 140
    141 142
logical_expression (140)
    on left: 113 114 115 116 117 118 119 120 121 122 123 124, on right:
    61 63 64 120 121 122 132 133 135 136 143 144
conditional_statement (141)
    on left: 125, on right: 27
elif_else (142)
    on left: 126 127 128 129, on right: 125
elif_stmts (143)
    on left: 130 131, on right: 127 128 131
if_statement (144)
    on left: 132 133, on right: 125
else_statement (145)
    on left: 134, on right: 79 80 127 129
elif_statement (146)
    on left: 135 136, on right: 130 131
for_statement (147)
    on left: 137 138 139 140 141 142, on right: 29
while_statement (148)
    on left: 143 144, on right: 30
>>>>>>> main


state 0

    0 $accept: . prog $end

    NEWLINE  shift, and go to state 1

    NEWLINE   [reduce using rule 1 (prog)]
    $default  reduce using rule 1 (prog)

    prog  go to state 2


state 1

    2 prog: NEWLINE .

    $default  reduce using rule 2 (prog)


state 2

    0 $accept: prog . $end
    3 prog: prog . statements

    $end              shift, and go to state 3
    IDENTIFIER        shift, and go to state 4
    KEYWORD_IF        shift, and go to state 5
    KEYWORD_IMPORT    shift, and go to state 6
    KEYWORD_PASS      shift, and go to state 7
    KEYWORD_BREAK     shift, and go to state 8
    KEYWORD_RAISE     shift, and go to state 9
    KEYWORD_CLASS     shift, and go to state 10
    KEYWORD_RETURN    shift, and go to state 11
    KEYWORD_CONTINUE  shift, and go to state 12
    KEYWORD_FOR       shift, and go to state 13
    KEYWORD_TRY       shift, and go to state 14
    KEYWORD_DEF       shift, and go to state 15
    KEYWORD_FROM      shift, and go to state 16
    KEYWORD_NONLOCAL  shift, and go to state 17
    KEYWORD_WHILE     shift, and go to state 18
    KEYWORD_ASSERT    shift, and go to state 19
    KEYWORD_DEL       shift, and go to state 20
    KEYWORD_GLOBAL    shift, and go to state 21
    KEYWORD_WITH      shift, and go to state 22
    KEYWORD_YIELD     shift, and go to state 23
    COMMENT           shift, and go to state 24
    MULTILINECOMMENT  shift, and go to state 25
    NEWLINE           shift, and go to state 26
    KEYWORD_MATCH     shift, and go to state 27

    statements                 go to state 28
    statement                  go to state 29
    simple_statement           go to state 30
    compound_statement         go to state 31
    import_statments           go to state 32
    import_statment            go to state 33
    assignment                 go to state 34
    del_statment               go to state 35
    return_statement           go to state 36
    yield_statement            go to state 37
    assert_statement           go to state 38
    raise_statement            go to state 39
    global_statement           go to state 40
    nonlocal_statement         go to state 41
    match_statement            go to state 42
    try_statement              go to state 43
    try                        go to state 44
    with_statment              go to state 45
    class                      go to state 46
    class_with_inheritance     go to state 47
    class_without_inheritance  go to state 48
    function_call              go to state 49
    function                   go to state 50
    conditional_statement      go to state 51
    if_statement               go to state 52
    for_statement              go to state 53
    while_statement            go to state 54


state 3

    0 $accept: prog $end .

    $default  accept


state 4

<<<<<<< HEAD
  112 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  113              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  114              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  115              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
  123 member_expression: IDENTIFIER .
=======
   40 assignment: IDENTIFIER . ASSIGN number
   99 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  100              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  101              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
>>>>>>> main

    ASSIGN          shift, and go to state 55
    LEFT_PARENTHES  shift, and go to state 56

<<<<<<< HEAD
    LEFT_PARENTHES  [reduce using rule 123 (member_expression)]
    $default        reduce using rule 123 (member_expression)


state 5

<<<<<<< HEAD
  144 if_statement: KEYWORD_IF . logical_expression COLON block
  145             | KEYWORD_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
=======
  140 if_statement: KEYWORD_IF . logical_expression COLON block
  141             | KEYWORD_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 64
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======

state 5

  132 if_statement: KEYWORD_IF . logical_expression COLON block
  133             | KEYWORD_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 57
    LIST            shift, and go to state 58
    LITERALSTRING   shift, and go to state 59
    KEYWORD_FALSE   shift, and go to state 60
    KEYWORD_TRUE    shift, and go to state 61
    KEYWORD_NONE    shift, and go to state 62
    KEYWORD_NOT     shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 64
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    '-'             shift, and go to state 67
    '|'             shift, and go to state 68
    '('             shift, and go to state 69
>>>>>>> main

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 74


state 6

   35 import_statment: KEYWORD_IMPORT . member_expression
   38                | KEYWORD_IMPORT . member_expression KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 75

    member_expression  go to state 76


state 7

   23 simple_statement: KEYWORD_PASS .

    $default  reduce using rule 23 (simple_statement)


state 8

   24 simple_statement: KEYWORD_BREAK .

    $default  reduce using rule 24 (simple_statement)


state 9

<<<<<<< HEAD
<<<<<<< HEAD
   77 raise_statement: KEYWORD_RAISE . function_call
   78                | KEYWORD_RAISE . function_call KEYWORD_FROM IDENTIFIER
=======
   74 raise_statement: KEYWORD_RAISE . function_call
   75                | KEYWORD_RAISE . function_call KEYWORD_FROM IDENTIFIER
>>>>>>> main
=======
   65 raise_statement: KEYWORD_RAISE . function_call
   66                | KEYWORD_RAISE . function_call KEYWORD_FROM IDENTIFIER
>>>>>>> main

    IDENTIFIER  shift, and go to state 77

    function_call  go to state 78


state 10

<<<<<<< HEAD
  105 class_with_inheritance: KEYWORD_CLASS . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block
  111 class_without_inheritance: KEYWORD_CLASS . IDENTIFIER COLON class_block
=======
   92 class_with_inheritance: KEYWORD_CLASS . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block
   98 class_without_inheritance: KEYWORD_CLASS . IDENTIFIER COLON NEWLINE INDENT class_block DEDENT
>>>>>>> main

    IDENTIFIER  shift, and go to state 79


state 11

<<<<<<< HEAD
<<<<<<< HEAD
   72 return_statement: KEYWORD_RETURN . expression
   73                 | KEYWORD_RETURN . logical_expression
=======
   69 return_statement: KEYWORD_RETURN . expression
   70                 | KEYWORD_RETURN . logical_expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 80
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
=======
   60 return_statement: KEYWORD_RETURN . expression
   61                 | KEYWORD_RETURN . logical_expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 80
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
>>>>>>> main
    logical_expression  go to state 81


state 12

   25 simple_statement: KEYWORD_CONTINUE .

    $default  reduce using rule 25 (simple_statement)


state 13

<<<<<<< HEAD
<<<<<<< HEAD
  149 for_statement: KEYWORD_FOR . IDENTIFIER KEYWORD_IN function_call COLON block
  150              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN LIST COLON block
  151              | KEYWORD_FOR . LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  152              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression COLON block
  153              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  154              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block
=======
  145 for_statement: KEYWORD_FOR . IDENTIFIER KEYWORD_IN function_call COLON block
  146              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN LIST COLON block
  147              | KEYWORD_FOR . LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  148              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression COLON block
  149              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  150              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block
>>>>>>> main
=======
  137 for_statement: KEYWORD_FOR . IDENTIFIER KEYWORD_IN function_call COLON block
  138              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN LIST COLON block
  139              | KEYWORD_FOR . LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  140              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression COLON block
  141              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  142              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block
>>>>>>> main

    IDENTIFIER      shift, and go to state 82
    LEFT_PARENTHES  shift, and go to state 83


state 14

<<<<<<< HEAD
   93 try: KEYWORD_TRY . COLON block
=======
   81 try: KEYWORD_TRY . COLON block
>>>>>>> main

    COLON  shift, and go to state 84


state 15

<<<<<<< HEAD
  116 function: KEYWORD_DEF . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block
=======
  103 function: KEYWORD_DEF . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block
>>>>>>> main

    IDENTIFIER  shift, and go to state 85


state 16

   36 import_statment: KEYWORD_FROM . member_expression KEYWORD_IMPORT IDENTIFIER
<<<<<<< HEAD
   37                | KEYWORD_FROM . member_expression KEYWORD_IMPORT '*'
=======
   37                | KEYWORD_FROM . member_expression KEYWORD_IMPORT MULTIPLY
>>>>>>> main
   39                | KEYWORD_FROM . member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 75

    member_expression  go to state 86


state 17

<<<<<<< HEAD
<<<<<<< HEAD
   80 nonlocal_statement: KEYWORD_NONLOCAL . global_nonlocal_targets
=======
   77 nonlocal_statement: KEYWORD_NONLOCAL . global_nonlocal_targets
>>>>>>> main
=======
   68 nonlocal_statement: KEYWORD_NONLOCAL . global_nonlocal_targets
>>>>>>> main

    IDENTIFIER  shift, and go to state 87

    global_nonlocal_targets  go to state 88


state 18

<<<<<<< HEAD
<<<<<<< HEAD
  155 while_statement: KEYWORD_WHILE . logical_expression COLON block
  156                | KEYWORD_WHILE . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
=======
  151 while_statement: KEYWORD_WHILE . logical_expression COLON block
  152                | KEYWORD_WHILE . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
<<<<<<< HEAD
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 89
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
    LEFT_PARENTHES  shift, and go to state 88
    INTEGER         shift, and go to state 64
    FLOAT           shift, and go to state 65
    '-'             shift, and go to state 66
    '|'             shift, and go to state 67
    '('             shift, and go to state 68
=======
  143 while_statement: KEYWORD_WHILE . logical_expression COLON block
  144                | KEYWORD_WHILE . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 57
    LIST            shift, and go to state 58
    LITERALSTRING   shift, and go to state 59
    KEYWORD_FALSE   shift, and go to state 60
    KEYWORD_TRUE    shift, and go to state 61
    KEYWORD_NONE    shift, and go to state 62
    KEYWORD_NOT     shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 89
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    '-'             shift, and go to state 67
    '|'             shift, and go to state 68
    '('             shift, and go to state 69
>>>>>>> main

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 90


state 19

   63 assert_statement: KEYWORD_ASSERT . logical_expression
   64                 | KEYWORD_ASSERT . logical_expression COMMA LITERALSTRING

<<<<<<< HEAD
    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 58
    KEYWORD_FALSE  shift, and go to state 59
    KEYWORD_TRUE   shift, and go to state 60
    KEYWORD_NONE   shift, and go to state 61
    KEYWORD_NOT    shift, and go to state 62
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68
>>>>>>> main
=======
    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69
>>>>>>> main

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 91


state 19

   75 assert_statement: KEYWORD_ASSERT . logical_expression
   76                 | KEYWORD_ASSERT . logical_expression COMMA LITERALSTRING

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 91


state 20

<<<<<<< HEAD
<<<<<<< HEAD
   70 del_statment: KEYWORD_DEL . IDENTIFIER
   71             | KEYWORD_DEL . IDENTIFIER LIST
=======
   67 del_statment: KEYWORD_DEL . IDENTIFIER
   68             | KEYWORD_DEL . IDENTIFIER LIST
>>>>>>> main
=======
   58 del_statment: KEYWORD_DEL . IDENTIFIER
   59             | KEYWORD_DEL . IDENTIFIER LIST
>>>>>>> main

    IDENTIFIER  shift, and go to state 92


state 21

<<<<<<< HEAD
<<<<<<< HEAD
   79 global_statement: KEYWORD_GLOBAL . global_nonlocal_targets
=======
   76 global_statement: KEYWORD_GLOBAL . global_nonlocal_targets
>>>>>>> main
=======
   67 global_statement: KEYWORD_GLOBAL . global_nonlocal_targets
>>>>>>> main

    IDENTIFIER  shift, and go to state 87

    global_nonlocal_targets  go to state 93


state 22

<<<<<<< HEAD
  100 with_statment: KEYWORD_WITH . with_stmt COLON block
=======
   87 with_statment: KEYWORD_WITH . with_stmt COLON block
>>>>>>> main

    IDENTIFIER  shift, and go to state 77

    with_stmt      go to state 94
    function_call  go to state 95


state 23

<<<<<<< HEAD
<<<<<<< HEAD
   74 yield_statement: KEYWORD_YIELD . expression
=======
   71 yield_statement: KEYWORD_YIELD . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 96
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
   62 yield_statement: KEYWORD_YIELD . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 96
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73
>>>>>>> main


state 24

   10 statement: COMMENT .

    $default  reduce using rule 10 (statement)


state 25

   11 statement: MULTILINECOMMENT .

    $default  reduce using rule 11 (statement)


state 26

    9 statement: NEWLINE .

    $default  reduce using rule 9 (statement)


state 27

<<<<<<< HEAD
   83 match_statement: KEYWORD_MATCH . IDENTIFIER COLON match_block
=======
   71 match_statement: KEYWORD_MATCH . IDENTIFIER COLON match_block
>>>>>>> main

    IDENTIFIER  shift, and go to state 97


state 28

    3 prog: prog statements .
    4 statements: statements . statement
    6           | statements . NEWLINE

    IDENTIFIER        shift, and go to state 4
    KEYWORD_IF        shift, and go to state 5
    KEYWORD_IMPORT    shift, and go to state 6
    KEYWORD_PASS      shift, and go to state 7
    KEYWORD_BREAK     shift, and go to state 8
    KEYWORD_RAISE     shift, and go to state 9
    KEYWORD_CLASS     shift, and go to state 10
    KEYWORD_RETURN    shift, and go to state 11
    KEYWORD_CONTINUE  shift, and go to state 12
    KEYWORD_FOR       shift, and go to state 13
    KEYWORD_TRY       shift, and go to state 14
    KEYWORD_DEF       shift, and go to state 15
    KEYWORD_FROM      shift, and go to state 16
    KEYWORD_NONLOCAL  shift, and go to state 17
    KEYWORD_WHILE     shift, and go to state 18
    KEYWORD_ASSERT    shift, and go to state 19
    KEYWORD_DEL       shift, and go to state 20
    KEYWORD_GLOBAL    shift, and go to state 21
    KEYWORD_WITH      shift, and go to state 22
    KEYWORD_YIELD     shift, and go to state 23
    COMMENT           shift, and go to state 24
    MULTILINECOMMENT  shift, and go to state 25
    NEWLINE           shift, and go to state 98
    KEYWORD_MATCH     shift, and go to state 27

    IDENTIFIER        [reduce using rule 3 (prog)]
    KEYWORD_IF        [reduce using rule 3 (prog)]
    KEYWORD_IMPORT    [reduce using rule 3 (prog)]
    KEYWORD_PASS      [reduce using rule 3 (prog)]
    KEYWORD_BREAK     [reduce using rule 3 (prog)]
    KEYWORD_RAISE     [reduce using rule 3 (prog)]
    KEYWORD_CLASS     [reduce using rule 3 (prog)]
    KEYWORD_RETURN    [reduce using rule 3 (prog)]
    KEYWORD_CONTINUE  [reduce using rule 3 (prog)]
    KEYWORD_FOR       [reduce using rule 3 (prog)]
    KEYWORD_TRY       [reduce using rule 3 (prog)]
    KEYWORD_DEF       [reduce using rule 3 (prog)]
    KEYWORD_FROM      [reduce using rule 3 (prog)]
    KEYWORD_NONLOCAL  [reduce using rule 3 (prog)]
    KEYWORD_WHILE     [reduce using rule 3 (prog)]
    KEYWORD_ASSERT    [reduce using rule 3 (prog)]
    KEYWORD_DEL       [reduce using rule 3 (prog)]
    KEYWORD_GLOBAL    [reduce using rule 3 (prog)]
    KEYWORD_WITH      [reduce using rule 3 (prog)]
    KEYWORD_YIELD     [reduce using rule 3 (prog)]
    COMMENT           [reduce using rule 3 (prog)]
    MULTILINECOMMENT  [reduce using rule 3 (prog)]
    NEWLINE           [reduce using rule 3 (prog)]
    KEYWORD_MATCH     [reduce using rule 3 (prog)]
    $default          reduce using rule 3 (prog)

    statement                  go to state 99
    simple_statement           go to state 30
    compound_statement         go to state 31
    import_statments           go to state 32
    import_statment            go to state 33
    assignment                 go to state 34
    del_statment               go to state 35
    return_statement           go to state 36
    yield_statement            go to state 37
    assert_statement           go to state 38
    raise_statement            go to state 39
    global_statement           go to state 40
    nonlocal_statement         go to state 41
    match_statement            go to state 42
    try_statement              go to state 43
    try                        go to state 44
    with_statment              go to state 45
    class                      go to state 46
    class_with_inheritance     go to state 47
    class_without_inheritance  go to state 48
    function_call              go to state 49
    function                   go to state 50
    conditional_statement      go to state 51
    if_statement               go to state 52
    for_statement              go to state 53
    while_statement            go to state 54


state 29

    5 statements: statement .

    $default  reduce using rule 5 (statements)


state 30

    8 statement: simple_statement .

    $default  reduce using rule 8 (statement)


state 31

    7 statement: compound_statement .

    $default  reduce using rule 7 (statement)


state 32

   20 simple_statement: import_statments .
   34 import_statments: import_statments . import_statment

    KEYWORD_IMPORT  shift, and go to state 6
    KEYWORD_FROM    shift, and go to state 16

    KEYWORD_IMPORT  [reduce using rule 20 (simple_statement)]
    KEYWORD_FROM    [reduce using rule 20 (simple_statement)]
    $default        reduce using rule 20 (simple_statement)

    import_statment  go to state 100


state 33

   33 import_statments: import_statment . NEWLINE

    NEWLINE  shift, and go to state 101
<<<<<<< HEAD


state 34

   12 simple_statement: assignment .

    $default  reduce using rule 12 (simple_statement)


state 35

   19 simple_statement: del_statment .

    $default  reduce using rule 19 (simple_statement)


state 36

   13 simple_statement: return_statement .

    $default  reduce using rule 13 (simple_statement)


state 37

   14 simple_statement: yield_statement .

    $default  reduce using rule 14 (simple_statement)


state 38

   15 simple_statement: assert_statement .

    $default  reduce using rule 15 (simple_statement)


state 39

   16 simple_statement: raise_statement .

    $default  reduce using rule 16 (simple_statement)


state 40

   17 simple_statement: global_statement .

    $default  reduce using rule 17 (simple_statement)


state 33

<<<<<<< HEAD
   18 simple_statement: nonlocal_statement .
=======
   33 import_statments: import_statment . NEWLINE
>>>>>>> main

    $default  reduce using rule 18 (simple_statement)
=======
>>>>>>> main


state 34

   12 simple_statement: assignment .

    $default  reduce using rule 12 (simple_statement)


state 35

   19 simple_statement: del_statment .

    $default  reduce using rule 19 (simple_statement)


state 36

   13 simple_statement: return_statement .

    $default  reduce using rule 13 (simple_statement)


state 37

   14 simple_statement: yield_statement .

    $default  reduce using rule 14 (simple_statement)


state 38

   15 simple_statement: assert_statement .

    $default  reduce using rule 15 (simple_statement)


state 39

   16 simple_statement: raise_statement .

    $default  reduce using rule 16 (simple_statement)


state 40

   17 simple_statement: global_statement .

    $default  reduce using rule 17 (simple_statement)


state 41

   18 simple_statement: nonlocal_statement .

    $default  reduce using rule 18 (simple_statement)


state 42

   31 compound_statement: match_statement .

    $default  reduce using rule 31 (compound_statement)


state 43

   32 compound_statement: try_statement .

    $default  reduce using rule 32 (compound_statement)


state 44

<<<<<<< HEAD
   88 try_statement: try . finally
   89              | try . except_statements
   90              | try . except_statements finally
   91              | try . except_statements else_statement
   92              | try . except_statements else_statement finally
=======
   76 try_statement: try . finally
   77              | try . except_statements
   78              | try . except_statements finally
   79              | try . except_statements else_statement
   80              | try . except_statements else_statement finally
>>>>>>> main

    KEYWORD_EXCEPT   shift, and go to state 102
    KEYWORD_FINALLY  shift, and go to state 103

    except             go to state 104
    finally            go to state 105
    except_statements  go to state 106


state 45

   22 simple_statement: with_statment .

    $default  reduce using rule 22 (simple_statement)


state 46

   28 compound_statement: class .

    $default  reduce using rule 28 (compound_statement)


state 47

<<<<<<< HEAD
  103 class: class_with_inheritance .

    $default  reduce using rule 103 (class)
=======
   90 class: class_with_inheritance .

    $default  reduce using rule 90 (class)
>>>>>>> main


state 48

<<<<<<< HEAD
  104 class: class_without_inheritance .

    $default  reduce using rule 104 (class)
=======
   91 class: class_without_inheritance .

    $default  reduce using rule 91 (class)
>>>>>>> main


state 49

   21 simple_statement: function_call .

    $default  reduce using rule 21 (simple_statement)


state 50

   26 compound_statement: function .

    $default  reduce using rule 26 (compound_statement)


state 51

<<<<<<< HEAD
   40 assignment: member_expression . ASSIGN expression
   41           | member_expression . ASSIGNADD expression
   42           | member_expression . ASSIGNDIVIDE expression
   43           | member_expression . ASSIGNEXPONINTIATION expression
   44           | member_expression . ASSIGNMULTIPLY expression
   45           | member_expression . ASSIGNMODULO expression
   46           | member_expression . ASSIGNMINUS expression
   47           | member_expression . ASSIGNFLOORDIVISION expression
   48           | member_expression . ASSIGNRIGHTSHIFT expression
   49           | member_expression . ASSIGNLEFTSHIFT expression
<<<<<<< HEAD
  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call
=======
  119 member_expression: member_expression . IDENTIFIER
  120                  | member_expression . function_call
>>>>>>> main

    IDENTIFIER            shift, and go to state 107
    ASSIGN                shift, and go to state 108
    ASSIGNADD             shift, and go to state 109
    ASSIGNMINUS           shift, and go to state 110
    ASSIGNMULTIPLY        shift, and go to state 111
    ASSIGNDIVIDE          shift, and go to state 112
    ASSIGNMODULO          shift, and go to state 113
    ASSIGNFLOORDIVISION   shift, and go to state 114
    ASSIGNEXPONINTIATION  shift, and go to state 115
    ASSIGNRIGHTSHIFT      shift, and go to state 116
    ASSIGNLEFTSHIFT       shift, and go to state 117

    function_call  go to state 118

    function_call  go to state 117


state 52

=======
>>>>>>> main
   27 compound_statement: conditional_statement .

    $default  reduce using rule 27 (compound_statement)


state 52

  125 conditional_statement: if_statement . elif_else

    KEYWORD_ELSE     shift, and go to state 107
    KEYWORD_ELSE_IF  shift, and go to state 108

    $default  reduce using rule 126 (elif_else)

    elif_else       go to state 109
    elif_stmts      go to state 110
    else_statement  go to state 111
    elif_statement  go to state 112


state 53

<<<<<<< HEAD
<<<<<<< HEAD
  137 conditional_statement: if_statement . elif_else

    KEYWORD_ELSE     shift, and go to state 119
    KEYWORD_ELSE_IF  shift, and go to state 120

    $default  reduce using rule 138 (elif_else)

    elif_else       go to state 121
    elif_stmts      go to state 122
    else_statement  go to state 123
    elif_statement  go to state 124
=======
  133 conditional_statement: if_statement . elif_else

    KEYWORD_ELSE     shift, and go to state 118
    KEYWORD_ELSE_IF  shift, and go to state 119

    $default  reduce using rule 134 (elif_else)

    elif_else       go to state 120
    elif_stmts      go to state 121
    else_statement  go to state 122
    elif_statement  go to state 123
>>>>>>> main


state 54

=======
>>>>>>> main
   29 compound_statement: for_statement .

    $default  reduce using rule 29 (compound_statement)


state 54

   30 compound_statement: while_statement .

    $default  reduce using rule 30 (compound_statement)


state 55

   40 assignment: IDENTIFIER ASSIGN . number

    INTEGER  shift, and go to state 65
    FLOAT    shift, and go to state 66

    number  go to state 113


state 56

<<<<<<< HEAD
  112 function_call: IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES
  113              | IDENTIFIER LEFT_PARENTHES . number RIGHT_PARENTHES
  114              | IDENTIFIER LEFT_PARENTHES . LITERALSTRING RIGHT_PARENTHES
  115              | IDENTIFIER LEFT_PARENTHES . function_call RIGHT_PARENTHES

<<<<<<< HEAD
    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 125
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 124
    KEYWORD_NONE   shift, and go to state 61
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68
>>>>>>> main

    IDENTIFIER      [reduce using rule 118 (args)]
    LIST            [reduce using rule 118 (args)]
    LITERALSTRING   [reduce using rule 118 (args)]
    KEYWORD_FALSE   [reduce using rule 118 (args)]
    KEYWORD_TRUE    [reduce using rule 118 (args)]
    KEYWORD_NONE    [reduce using rule 118 (args)]
    MINUS           [reduce using rule 118 (args)]
    LEFT_PARENTHES  [reduce using rule 118 (args)]
    INTEGER         [reduce using rule 118 (args)]
    FLOAT           [reduce using rule 118 (args)]
    TUPLE           [reduce using rule 118 (args)]
    '|'             [reduce using rule 118 (args)]
    $default        reduce using rule 118 (args)

<<<<<<< HEAD
    expression         go to state 126
    number             go to state 127
    function_call      go to state 128
    args               go to state 129
=======
    expression         go to state 125
    number             go to state 126
    function_call      go to state 127
    args               go to state 128
>>>>>>> main
    member_expression  go to state 72
=======
   99 function_call: IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES
  100              | IDENTIFIER LEFT_PARENTHES . number RIGHT_PARENTHES
  101              | IDENTIFIER LEFT_PARENTHES . LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER LEFT_PARENTHES . function_call RIGHT_PARENTHES

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 114
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    IDENTIFIER     [reduce using rule 105 (args)]
    LIST           [reduce using rule 105 (args)]
    LITERALSTRING  [reduce using rule 105 (args)]
    KEYWORD_NONE   [reduce using rule 105 (args)]
    INTEGER        [reduce using rule 105 (args)]
    FLOAT          [reduce using rule 105 (args)]
    '-'            [reduce using rule 105 (args)]
    '|'            [reduce using rule 105 (args)]
    '('            [reduce using rule 105 (args)]
    $default       reduce using rule 105 (args)

    expression         go to state 115
    number             go to state 116
    function_call      go to state 117
    args               go to state 118
    member_expression  go to state 73
>>>>>>> main


state 57

   99 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  100              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  101              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
  110 member_expression: IDENTIFIER .

    LEFT_PARENTHES  shift, and go to state 56

    $default  reduce using rule 110 (member_expression)


state 58

   54 expression: LIST .

    $default  reduce using rule 54 (expression)


state 59

<<<<<<< HEAD
<<<<<<< HEAD
   67 expression: KEYWORD_FALSE .

    $default  reduce using rule 67 (expression)
=======
  132 logical_expression: KEYWORD_FALSE .

    $default  reduce using rule 132 (logical_expression)
>>>>>>> main
=======
   53 expression: LITERALSTRING .

    $default  reduce using rule 53 (expression)
>>>>>>> main


state 60

<<<<<<< HEAD
<<<<<<< HEAD
   66 expression: KEYWORD_TRUE .

    $default  reduce using rule 66 (expression)
=======
  131 logical_expression: KEYWORD_TRUE .

    $default  reduce using rule 131 (logical_expression)
>>>>>>> main
=======
  124 logical_expression: KEYWORD_FALSE .

    $default  reduce using rule 124 (logical_expression)
>>>>>>> main


state 61

<<<<<<< HEAD
<<<<<<< HEAD
   65 expression: KEYWORD_NONE .

    $default  reduce using rule 65 (expression)
=======
   64 expression: KEYWORD_NONE .

    $default  reduce using rule 64 (expression)
>>>>>>> main
=======
  123 logical_expression: KEYWORD_TRUE .

    $default  reduce using rule 123 (logical_expression)
>>>>>>> main


state 62

<<<<<<< HEAD
<<<<<<< HEAD
  136 logical_expression: KEYWORD_NOT . logical_expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 130


state 63

   58 expression: MINUS . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
  130 logical_expression: KEYWORD_NOT . logical_expression
=======
   55 expression: KEYWORD_NONE .
>>>>>>> main

    $default  reduce using rule 55 (expression)


state 63

  122 logical_expression: KEYWORD_NOT . logical_expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 119


state 64

  133 if_statement: KEYWORD_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 120


state 65

   56 number: INTEGER .

    $default  reduce using rule 56 (number)


state 66

   57 number: FLOAT .

<<<<<<< HEAD
    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 58
    KEYWORD_NONE   shift, and go to state 61
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68
>>>>>>> main

    expression         go to state 131
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
    $default  reduce using rule 57 (number)
>>>>>>> main


<<<<<<< HEAD
state 64

   57 expression: LEFT_PARENTHES . expression RIGHT_PARENTHES
  145 if_statement: KEYWORD_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 132
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 133


state 65

   68 number: INTEGER .

    $default  reduce using rule 68 (number)


state 66

   69 number: FLOAT .

    $default  reduce using rule 69 (number)


state 67

<<<<<<< HEAD
   64 expression: TUPLE .

    $default  reduce using rule 64 (expression)


state 68
=======
state 67
>>>>>>> main

   56 expression: '|' . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 134
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
   49 expression: '-' . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 121
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73
>>>>>>> main


state 68

   47 expression: '|' . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 122
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 69

<<<<<<< HEAD
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
<<<<<<< HEAD
  126 logical_expression: expression .
  127                   | expression . GREATEROREQUAL expression
  128                   | expression . GREATERTHAN expression
  129                   | expression . LESSOREQUAL expression
  130                   | expression . LESSTHAN expression
  131                   | expression . EQUAL expression
  132                   | expression . NOTEQUAL expression
  133                   | expression . KEYWORD_IS expression

    KEYWORD_IS      shift, and go to state 135
    ADD             shift, and go to state 136
    MINUS           shift, and go to state 137
    MULTIPLY        shift, and go to state 138
    DIVIDE          shift, and go to state 139
    POWER           shift, and go to state 140
    MODULO          shift, and go to state 141
    EQUAL           shift, and go to state 142
    NOTEQUAL        shift, and go to state 143
    GREATERTHAN     shift, and go to state 144
    GREATEROREQUAL  shift, and go to state 145
    LESSTHAN        shift, and go to state 146
    LESSOREQUAL     shift, and go to state 147

    $default  reduce using rule 126 (logical_expression)
=======
  121 logical_expression: expression .
  122                   | expression . GREATEROREQUAL expression
  123                   | expression . GREATERTHAN expression
  124                   | expression . LESSOREQUAL expression
  125                   | expression . LESSTHAN expression
  126                   | expression . EQUAL expression
  127                   | expression . NOTEQUAL expression
=======
   48 expression: '(' . expression ')'
>>>>>>> main

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

<<<<<<< HEAD
    $default  reduce using rule 121 (logical_expression)
>>>>>>> main
=======
    expression         go to state 123
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73
>>>>>>> main


state 70

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  113 logical_expression: expression .
  114                   | expression . GREATEROREQUAL expression
  115                   | expression . GREATERTHAN expression
  116                   | expression . LESSOREQUAL expression
  117                   | expression . LESSTHAN expression
  118                   | expression . EQUAL expression
  119                   | expression . NOTEQUAL expression

    ADD             shift, and go to state 124
    MINUS           shift, and go to state 125
    MULTIPLY        shift, and go to state 126
    DIVIDE          shift, and go to state 127
    POWER           shift, and go to state 128
    MODULO          shift, and go to state 129
    EQUAL           shift, and go to state 130
    NOTEQUAL        shift, and go to state 131
    GREATERTHAN     shift, and go to state 132
    GREATEROREQUAL  shift, and go to state 133
    LESSTHAN        shift, and go to state 134
    LESSOREQUAL     shift, and go to state 135

    $default  reduce using rule 113 (logical_expression)


state 71

   50 expression: number .

    $default  reduce using rule 50 (expression)


state 72

<<<<<<< HEAD
   60 expression: member_expression .
<<<<<<< HEAD
  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call
=======
  119 member_expression: member_expression . IDENTIFIER
  120                  | member_expression . function_call
>>>>>>> main

    IDENTIFIER  shift, and go to state 107

    IDENTIFIER  [reduce using rule 60 (expression)]
    $default    reduce using rule 60 (expression)

<<<<<<< HEAD
    function_call  go to state 118
=======
    function_call  go to state 117
>>>>>>> main
=======
   52 expression: function_call .

    $default  reduce using rule 52 (expression)
>>>>>>> main


state 73

<<<<<<< HEAD
<<<<<<< HEAD
  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  144 if_statement: KEYWORD_IF logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149
    COLON        shift, and go to state 150
=======
  128 logical_expression: logical_expression . KEYWORD_AND logical_expression
  129                   | logical_expression . KEYWORD_OR logical_expression
  140 if_statement: KEYWORD_IF logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 146
    KEYWORD_OR   shift, and go to state 147
    COLON        shift, and go to state 148
>>>>>>> main
=======
   51 expression: member_expression .
  111 member_expression: member_expression . IDENTIFIER
  112                  | member_expression . function_call

    IDENTIFIER  shift, and go to state 136

    IDENTIFIER  [reduce using rule 51 (expression)]
    $default    reduce using rule 51 (expression)

    function_call  go to state 137
>>>>>>> main


state 74

<<<<<<< HEAD
  123 member_expression: IDENTIFIER .

    $default  reduce using rule 123 (member_expression)
=======
  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  132 if_statement: KEYWORD_IF logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139
    COLON        shift, and go to state 140
>>>>>>> main


state 75

<<<<<<< HEAD
   35 import_statment: KEYWORD_IMPORT member_expression .
   38                | KEYWORD_IMPORT member_expression . KEYWORD_AS IDENTIFIER
<<<<<<< HEAD
  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call

    IDENTIFIER  shift, and go to state 107
    KEYWORD_AS  shift, and go to state 151
=======
  119 member_expression: member_expression . IDENTIFIER
  120                  | member_expression . function_call

    IDENTIFIER  shift, and go to state 106
    KEYWORD_AS  shift, and go to state 149
>>>>>>> main

    IDENTIFIER  [reduce using rule 35 (import_statment)]
    $default    reduce using rule 35 (import_statment)

<<<<<<< HEAD
    function_call  go to state 118
=======
    function_call  go to state 117
>>>>>>> main
=======
  110 member_expression: IDENTIFIER .

    $default  reduce using rule 110 (member_expression)
>>>>>>> main


state 76

<<<<<<< HEAD
  112 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  113              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  114              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  115              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
=======
   35 import_statment: KEYWORD_IMPORT member_expression .
   38                | KEYWORD_IMPORT member_expression . KEYWORD_AS IDENTIFIER
  111 member_expression: member_expression . IDENTIFIER
  112                  | member_expression . function_call
>>>>>>> main

    IDENTIFIER  shift, and go to state 136
    KEYWORD_AS  shift, and go to state 141

    IDENTIFIER  [reduce using rule 35 (import_statment)]
    $default    reduce using rule 35 (import_statment)

    function_call  go to state 137


state 77

<<<<<<< HEAD
<<<<<<< HEAD
   77 raise_statement: KEYWORD_RAISE function_call .
   78                | KEYWORD_RAISE function_call . KEYWORD_FROM IDENTIFIER

    KEYWORD_FROM  shift, and go to state 152

    KEYWORD_FROM  [reduce using rule 77 (raise_statement)]
    $default      reduce using rule 77 (raise_statement)
=======
   74 raise_statement: KEYWORD_RAISE function_call .
   75                | KEYWORD_RAISE function_call . KEYWORD_FROM IDENTIFIER

    KEYWORD_FROM  shift, and go to state 150

    KEYWORD_FROM  [reduce using rule 74 (raise_statement)]
    $default      reduce using rule 74 (raise_statement)
>>>>>>> main
=======
   99 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  100              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  101              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 56
>>>>>>> main


state 78

<<<<<<< HEAD
  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block
  111 class_without_inheritance: KEYWORD_CLASS IDENTIFIER . COLON class_block

<<<<<<< HEAD
    LEFT_PARENTHES  shift, and go to state 153
    COLON           shift, and go to state 154
=======
    LEFT_PARENTHES  shift, and go to state 151
    COLON           shift, and go to state 152
>>>>>>> main
=======
   65 raise_statement: KEYWORD_RAISE function_call .
   66                | KEYWORD_RAISE function_call . KEYWORD_FROM IDENTIFIER

    KEYWORD_FROM  shift, and go to state 142

    KEYWORD_FROM  [reduce using rule 65 (raise_statement)]
    $default      reduce using rule 65 (raise_statement)
>>>>>>> main


state 79

<<<<<<< HEAD
<<<<<<< HEAD
   57 expression: LEFT_PARENTHES . expression RIGHT_PARENTHES

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 155
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   69 return_statement: KEYWORD_RETURN expression .
  121 logical_expression: expression .
  122                   | expression . GREATEROREQUAL expression
  123                   | expression . GREATERTHAN expression
  124                   | expression . LESSOREQUAL expression
  125                   | expression . LESSTHAN expression
  126                   | expression . EQUAL expression
  127                   | expression . NOTEQUAL expression

    ADD             shift, and go to state 134
    MINUS           shift, and go to state 135
    MULTIPLY        shift, and go to state 136
    DIVIDE          shift, and go to state 137
    POWER           shift, and go to state 138
    MODULO          shift, and go to state 139
    EQUAL           shift, and go to state 140
    NOTEQUAL        shift, and go to state 141
    GREATERTHAN     shift, and go to state 142
    GREATEROREQUAL  shift, and go to state 143
    LESSTHAN        shift, and go to state 144
    LESSOREQUAL     shift, and go to state 145

    $end              reduce using rule 69 (return_statement)
    $end              [reduce using rule 121 (logical_expression)]
    IDENTIFIER        reduce using rule 69 (return_statement)
    IDENTIFIER        [reduce using rule 121 (logical_expression)]
    KEYWORD_IF        reduce using rule 69 (return_statement)
    KEYWORD_IF        [reduce using rule 121 (logical_expression)]
    KEYWORD_IMPORT    reduce using rule 69 (return_statement)
    KEYWORD_IMPORT    [reduce using rule 121 (logical_expression)]
    KEYWORD_PASS      reduce using rule 69 (return_statement)
    KEYWORD_PASS      [reduce using rule 121 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 69 (return_statement)
    KEYWORD_BREAK     [reduce using rule 121 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 69 (return_statement)
    KEYWORD_RAISE     [reduce using rule 121 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 69 (return_statement)
    KEYWORD_CLASS     [reduce using rule 121 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 69 (return_statement)
    KEYWORD_RETURN    [reduce using rule 121 (logical_expression)]
    KEYWORD_AND       reduce using rule 121 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 69 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 121 (logical_expression)]
    KEYWORD_FOR       reduce using rule 69 (return_statement)
    KEYWORD_FOR       [reduce using rule 121 (logical_expression)]
    KEYWORD_TRY       reduce using rule 69 (return_statement)
    KEYWORD_TRY       [reduce using rule 121 (logical_expression)]
    KEYWORD_DEF       reduce using rule 69 (return_statement)
    KEYWORD_DEF       [reduce using rule 121 (logical_expression)]
    KEYWORD_FROM      reduce using rule 69 (return_statement)
    KEYWORD_FROM      [reduce using rule 121 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 69 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 121 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 69 (return_statement)
    KEYWORD_WHILE     [reduce using rule 121 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 69 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 121 (logical_expression)]
    KEYWORD_DEL       reduce using rule 69 (return_statement)
    KEYWORD_DEL       [reduce using rule 121 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 69 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 121 (logical_expression)]
    KEYWORD_WITH      reduce using rule 69 (return_statement)
    KEYWORD_WITH      [reduce using rule 121 (logical_expression)]
    KEYWORD_OR        reduce using rule 121 (logical_expression)
    KEYWORD_YIELD     reduce using rule 69 (return_statement)
    KEYWORD_YIELD     [reduce using rule 121 (logical_expression)]
    COMMENT           reduce using rule 69 (return_statement)
    COMMENT           [reduce using rule 121 (logical_expression)]
    MULTILINECOMMENT  reduce using rule 69 (return_statement)
    MULTILINECOMMENT  [reduce using rule 121 (logical_expression)]
    DEDENT            reduce using rule 69 (return_statement)
    DEDENT            [reduce using rule 121 (logical_expression)]
    NEWLINE           reduce using rule 69 (return_statement)
    NEWLINE           [reduce using rule 121 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 69 (return_statement)
    KEYWORD_MATCH     [reduce using rule 121 (logical_expression)]
    $default          reduce using rule 69 (return_statement)
>>>>>>> main
=======
   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block
   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER . COLON NEWLINE INDENT class_block DEDENT

    LEFT_PARENTHES  shift, and go to state 143
    COLON           shift, and go to state 144
>>>>>>> main


state 80

<<<<<<< HEAD
<<<<<<< HEAD
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   72 return_statement: KEYWORD_RETURN expression .
  126 logical_expression: expression .
  127                   | expression . GREATEROREQUAL expression
  128                   | expression . GREATERTHAN expression
  129                   | expression . LESSOREQUAL expression
  130                   | expression . LESSTHAN expression
  131                   | expression . EQUAL expression
  132                   | expression . NOTEQUAL expression
  133                   | expression . KEYWORD_IS expression

    KEYWORD_IS      shift, and go to state 135
    ADD             shift, and go to state 136
    MINUS           shift, and go to state 137
    MULTIPLY        shift, and go to state 138
    DIVIDE          shift, and go to state 139
    POWER           shift, and go to state 140
    MODULO          shift, and go to state 141
    EQUAL           shift, and go to state 142
    NOTEQUAL        shift, and go to state 143
    GREATERTHAN     shift, and go to state 144
    GREATEROREQUAL  shift, and go to state 145
    LESSTHAN        shift, and go to state 146
    LESSOREQUAL     shift, and go to state 147

    $end              reduce using rule 72 (return_statement)
    $end              [reduce using rule 126 (logical_expression)]
    IDENTIFIER        reduce using rule 72 (return_statement)
    IDENTIFIER        [reduce using rule 126 (logical_expression)]
    KEYWORD_IF        reduce using rule 72 (return_statement)
    KEYWORD_IF        [reduce using rule 126 (logical_expression)]
    KEYWORD_IMPORT    reduce using rule 72 (return_statement)
    KEYWORD_IMPORT    [reduce using rule 126 (logical_expression)]
    KEYWORD_PASS      reduce using rule 72 (return_statement)
    KEYWORD_PASS      [reduce using rule 126 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 72 (return_statement)
    KEYWORD_BREAK     [reduce using rule 126 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 72 (return_statement)
    KEYWORD_RAISE     [reduce using rule 126 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 72 (return_statement)
    KEYWORD_CLASS     [reduce using rule 126 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 72 (return_statement)
    KEYWORD_RETURN    [reduce using rule 126 (logical_expression)]
    KEYWORD_AND       reduce using rule 126 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 72 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 126 (logical_expression)]
    KEYWORD_FOR       reduce using rule 72 (return_statement)
    KEYWORD_FOR       [reduce using rule 126 (logical_expression)]
    KEYWORD_TRY       reduce using rule 72 (return_statement)
    KEYWORD_TRY       [reduce using rule 126 (logical_expression)]
    KEYWORD_DEF       reduce using rule 72 (return_statement)
    KEYWORD_DEF       [reduce using rule 126 (logical_expression)]
    KEYWORD_FROM      reduce using rule 72 (return_statement)
    KEYWORD_FROM      [reduce using rule 126 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 72 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 126 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 72 (return_statement)
    KEYWORD_WHILE     [reduce using rule 126 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 72 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 126 (logical_expression)]
    KEYWORD_DEL       reduce using rule 72 (return_statement)
    KEYWORD_DEL       [reduce using rule 126 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 72 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 126 (logical_expression)]
    KEYWORD_WITH      reduce using rule 72 (return_statement)
    KEYWORD_WITH      [reduce using rule 126 (logical_expression)]
    KEYWORD_OR        reduce using rule 126 (logical_expression)
    KEYWORD_YIELD     reduce using rule 72 (return_statement)
    KEYWORD_YIELD     [reduce using rule 126 (logical_expression)]
    COMMENT           reduce using rule 72 (return_statement)
    COMMENT           [reduce using rule 126 (logical_expression)]
    MULTILINECOMMENT  reduce using rule 72 (return_statement)
    MULTILINECOMMENT  [reduce using rule 126 (logical_expression)]
    DEDENT            reduce using rule 72 (return_statement)
    DEDENT            [reduce using rule 126 (logical_expression)]
    NEWLINE           reduce using rule 72 (return_statement)
    NEWLINE           [reduce using rule 126 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 72 (return_statement)
    KEYWORD_MATCH     [reduce using rule 126 (logical_expression)]
    $default          reduce using rule 72 (return_statement)
=======
   70 return_statement: KEYWORD_RETURN logical_expression .
  128 logical_expression: logical_expression . KEYWORD_AND logical_expression
  129                   | logical_expression . KEYWORD_OR logical_expression
=======
   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   60 return_statement: KEYWORD_RETURN expression .
  113 logical_expression: expression .
  114                   | expression . GREATEROREQUAL expression
  115                   | expression . GREATERTHAN expression
  116                   | expression . LESSOREQUAL expression
  117                   | expression . LESSTHAN expression
  118                   | expression . EQUAL expression
  119                   | expression . NOTEQUAL expression
>>>>>>> main

    ADD             shift, and go to state 124
    MINUS           shift, and go to state 125
    MULTIPLY        shift, and go to state 126
    DIVIDE          shift, and go to state 127
    POWER           shift, and go to state 128
    MODULO          shift, and go to state 129
    EQUAL           shift, and go to state 130
    NOTEQUAL        shift, and go to state 131
    GREATERTHAN     shift, and go to state 132
    GREATEROREQUAL  shift, and go to state 133
    LESSTHAN        shift, and go to state 134
    LESSOREQUAL     shift, and go to state 135

<<<<<<< HEAD
    $default  reduce using rule 70 (return_statement)
>>>>>>> main
=======
    $end              reduce using rule 60 (return_statement)
    $end              [reduce using rule 113 (logical_expression)]
    IDENTIFIER        reduce using rule 60 (return_statement)
    IDENTIFIER        [reduce using rule 113 (logical_expression)]
    KEYWORD_IF        reduce using rule 60 (return_statement)
    KEYWORD_IF        [reduce using rule 113 (logical_expression)]
    KEYWORD_IMPORT    reduce using rule 60 (return_statement)
    KEYWORD_IMPORT    [reduce using rule 113 (logical_expression)]
    KEYWORD_PASS      reduce using rule 60 (return_statement)
    KEYWORD_PASS      [reduce using rule 113 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 60 (return_statement)
    KEYWORD_BREAK     [reduce using rule 113 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 60 (return_statement)
    KEYWORD_RAISE     [reduce using rule 113 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 60 (return_statement)
    KEYWORD_CLASS     [reduce using rule 113 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 60 (return_statement)
    KEYWORD_RETURN    [reduce using rule 113 (logical_expression)]
    KEYWORD_AND       reduce using rule 113 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 60 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 113 (logical_expression)]
    KEYWORD_FOR       reduce using rule 60 (return_statement)
    KEYWORD_FOR       [reduce using rule 113 (logical_expression)]
    KEYWORD_TRY       reduce using rule 60 (return_statement)
    KEYWORD_TRY       [reduce using rule 113 (logical_expression)]
    KEYWORD_DEF       reduce using rule 60 (return_statement)
    KEYWORD_DEF       [reduce using rule 113 (logical_expression)]
    KEYWORD_FROM      reduce using rule 60 (return_statement)
    KEYWORD_FROM      [reduce using rule 113 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 60 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 113 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 60 (return_statement)
    KEYWORD_WHILE     [reduce using rule 113 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 60 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 113 (logical_expression)]
    KEYWORD_DEL       reduce using rule 60 (return_statement)
    KEYWORD_DEL       [reduce using rule 113 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 60 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 113 (logical_expression)]
    KEYWORD_WITH      reduce using rule 60 (return_statement)
    KEYWORD_WITH      [reduce using rule 113 (logical_expression)]
    KEYWORD_OR        reduce using rule 113 (logical_expression)
    KEYWORD_YIELD     reduce using rule 60 (return_statement)
    KEYWORD_YIELD     [reduce using rule 113 (logical_expression)]
    COMMENT           reduce using rule 60 (return_statement)
    COMMENT           [reduce using rule 113 (logical_expression)]
    MULTILINECOMMENT  reduce using rule 60 (return_statement)
    MULTILINECOMMENT  [reduce using rule 113 (logical_expression)]
    DEDENT            reduce using rule 60 (return_statement)
    DEDENT            [reduce using rule 113 (logical_expression)]
    NEWLINE           reduce using rule 60 (return_statement)
    NEWLINE           [reduce using rule 113 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 60 (return_statement)
    KEYWORD_MATCH     [reduce using rule 113 (logical_expression)]
    $default          reduce using rule 60 (return_statement)
>>>>>>> main


state 81

<<<<<<< HEAD
<<<<<<< HEAD
   73 return_statement: KEYWORD_RETURN logical_expression .
  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149

    $default  reduce using rule 73 (return_statement)
=======
  145 for_statement: KEYWORD_FOR IDENTIFIER . KEYWORD_IN function_call COLON block
  146              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN LIST COLON block
  148              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression COLON block
  149              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call COLON block
  150              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

    KEYWORD_IN  shift, and go to state 153
>>>>>>> main
=======
   61 return_statement: KEYWORD_RETURN logical_expression .
  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139

    $default  reduce using rule 61 (return_statement)
>>>>>>> main


state 82

<<<<<<< HEAD
<<<<<<< HEAD
  149 for_statement: KEYWORD_FOR IDENTIFIER . KEYWORD_IN function_call COLON block
  150              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN LIST COLON block
  152              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression COLON block
  153              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call COLON block
  154              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

    KEYWORD_IN  shift, and go to state 156
=======
  147 for_statement: KEYWORD_FOR LEFT_PARENTHES . args RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 58
    KEYWORD_NONE   shift, and go to state 61
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68

    IDENTIFIER     [reduce using rule 113 (args)]
    LIST           [reduce using rule 113 (args)]
    LITERALSTRING  [reduce using rule 113 (args)]
    KEYWORD_NONE   [reduce using rule 113 (args)]
    INTEGER        [reduce using rule 113 (args)]
    FLOAT          [reduce using rule 113 (args)]
    '-'            [reduce using rule 113 (args)]
    '|'            [reduce using rule 113 (args)]
    '('            [reduce using rule 113 (args)]
    $default       reduce using rule 113 (args)

    expression         go to state 125
    number             go to state 70
    function_call      go to state 71
    args               go to state 154
    member_expression  go to state 72
>>>>>>> main
=======
  137 for_statement: KEYWORD_FOR IDENTIFIER . KEYWORD_IN function_call COLON block
  138              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN LIST COLON block
  140              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression COLON block
  141              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call COLON block
  142              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

    KEYWORD_IN  shift, and go to state 145
>>>>>>> main


state 83

<<<<<<< HEAD
  151 for_statement: KEYWORD_FOR LEFT_PARENTHES . args RIGHT_PARENTHES KEYWORD_IN function_call COLON block

<<<<<<< HEAD
    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    IDENTIFIER      [reduce using rule 118 (args)]
    LIST            [reduce using rule 118 (args)]
    LITERALSTRING   [reduce using rule 118 (args)]
    KEYWORD_FALSE   [reduce using rule 118 (args)]
    KEYWORD_TRUE    [reduce using rule 118 (args)]
    KEYWORD_NONE    [reduce using rule 118 (args)]
    MINUS           [reduce using rule 118 (args)]
    LEFT_PARENTHES  [reduce using rule 118 (args)]
    INTEGER         [reduce using rule 118 (args)]
    FLOAT           [reduce using rule 118 (args)]
    TUPLE           [reduce using rule 118 (args)]
    '|'             [reduce using rule 118 (args)]
    $default        reduce using rule 118 (args)

    expression         go to state 126
    number             go to state 70
    function_call      go to state 71
    args               go to state 157
    member_expression  go to state 72
=======
    NEWLINE  shift, and go to state 155

    block  go to state 156
>>>>>>> main
=======
  139 for_statement: KEYWORD_FOR LEFT_PARENTHES . args RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    IDENTIFIER     [reduce using rule 105 (args)]
    LIST           [reduce using rule 105 (args)]
    LITERALSTRING  [reduce using rule 105 (args)]
    KEYWORD_NONE   [reduce using rule 105 (args)]
    INTEGER        [reduce using rule 105 (args)]
    FLOAT          [reduce using rule 105 (args)]
    '-'            [reduce using rule 105 (args)]
    '|'            [reduce using rule 105 (args)]
    '('            [reduce using rule 105 (args)]
    $default       reduce using rule 105 (args)

    expression         go to state 115
    number             go to state 71
    function_call      go to state 72
    args               go to state 146
    member_expression  go to state 73
>>>>>>> main


state 84

<<<<<<< HEAD
   93 try: KEYWORD_TRY COLON . block

<<<<<<< HEAD
    NEWLINE  shift, and go to state 158

    block  go to state 159
=======
    LEFT_PARENTHES  shift, and go to state 157
>>>>>>> main
=======
   81 try: KEYWORD_TRY COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 148
>>>>>>> main


state 85

<<<<<<< HEAD
<<<<<<< HEAD
  116 function: KEYWORD_DEF IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON block

    LEFT_PARENTHES  shift, and go to state 160
=======
   36 import_statment: KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER
   37                | KEYWORD_FROM member_expression . KEYWORD_IMPORT MULTIPLY
   39                | KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER
  119 member_expression: member_expression . IDENTIFIER
  120                  | member_expression . function_call

    IDENTIFIER      shift, and go to state 106
    KEYWORD_IMPORT  shift, and go to state 158

    function_call  go to state 117
>>>>>>> main
=======
  103 function: KEYWORD_DEF IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON block

    LEFT_PARENTHES  shift, and go to state 149
>>>>>>> main


state 86

<<<<<<< HEAD
<<<<<<< HEAD
   36 import_statment: KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER
   37                | KEYWORD_FROM member_expression . KEYWORD_IMPORT '*'
   39                | KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER
  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call

    IDENTIFIER      shift, and go to state 107
    KEYWORD_IMPORT  shift, and go to state 161

    function_call  go to state 118
=======
   78 global_nonlocal_targets: IDENTIFIER .
   79                        | IDENTIFIER . COMMA global_nonlocal_targets
=======
   36 import_statment: KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER
   37                | KEYWORD_FROM member_expression . KEYWORD_IMPORT MULTIPLY
   39                | KEYWORD_FROM member_expression . KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER
  111 member_expression: member_expression . IDENTIFIER
  112                  | member_expression . function_call
>>>>>>> main

    IDENTIFIER      shift, and go to state 136
    KEYWORD_IMPORT  shift, and go to state 150

<<<<<<< HEAD
    $default  reduce using rule 78 (global_nonlocal_targets)
>>>>>>> main
=======
    function_call  go to state 137
>>>>>>> main


state 87

<<<<<<< HEAD
<<<<<<< HEAD
   81 global_nonlocal_targets: IDENTIFIER .
   82                        | IDENTIFIER . COMMA global_nonlocal_targets

    COMMA  shift, and go to state 162

    $default  reduce using rule 81 (global_nonlocal_targets)
=======
   77 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets .

    $default  reduce using rule 77 (nonlocal_statement)
>>>>>>> main
=======
   69 global_nonlocal_targets: IDENTIFIER .
   70                        | IDENTIFIER . COMMA global_nonlocal_targets

    COMMA  shift, and go to state 151

    $default  reduce using rule 69 (global_nonlocal_targets)
>>>>>>> main


state 88

<<<<<<< HEAD
<<<<<<< HEAD
   80 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets .

    $default  reduce using rule 80 (nonlocal_statement)
=======
  152 while_statement: KEYWORD_WHILE LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 58
    KEYWORD_FALSE  shift, and go to state 59
    KEYWORD_TRUE   shift, and go to state 60
    KEYWORD_NONE   shift, and go to state 61
    KEYWORD_NOT    shift, and go to state 62
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 160
>>>>>>> main
=======
   68 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets .

    $default  reduce using rule 68 (nonlocal_statement)
>>>>>>> main


state 89

<<<<<<< HEAD
<<<<<<< HEAD
   57 expression: LEFT_PARENTHES . expression RIGHT_PARENTHES
  156 while_statement: KEYWORD_WHILE LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 132
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 163
=======
  128 logical_expression: logical_expression . KEYWORD_AND logical_expression
  129                   | logical_expression . KEYWORD_OR logical_expression
  151 while_statement: KEYWORD_WHILE logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 146
    KEYWORD_OR   shift, and go to state 147
    COLON        shift, and go to state 161
>>>>>>> main
=======
  144 while_statement: KEYWORD_WHILE LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 152
>>>>>>> main


state 90

<<<<<<< HEAD
<<<<<<< HEAD
  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  155 while_statement: KEYWORD_WHILE logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149
    COLON        shift, and go to state 164
=======
   72 assert_statement: KEYWORD_ASSERT logical_expression .
   73                 | KEYWORD_ASSERT logical_expression . COMMA LITERALSTRING
  128 logical_expression: logical_expression . KEYWORD_AND logical_expression
  129                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 146
    KEYWORD_OR   shift, and go to state 147
    COMMA        shift, and go to state 162

    $default  reduce using rule 72 (assert_statement)
>>>>>>> main
=======
  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  143 while_statement: KEYWORD_WHILE logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139
    COLON        shift, and go to state 153
>>>>>>> main


state 91

<<<<<<< HEAD
<<<<<<< HEAD
   75 assert_statement: KEYWORD_ASSERT logical_expression .
   76                 | KEYWORD_ASSERT logical_expression . COMMA LITERALSTRING
  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149
    COMMA        shift, and go to state 165

    $default  reduce using rule 75 (assert_statement)
=======
   67 del_statment: KEYWORD_DEL IDENTIFIER .
   68             | KEYWORD_DEL IDENTIFIER . LIST
=======
   63 assert_statement: KEYWORD_ASSERT logical_expression .
   64                 | KEYWORD_ASSERT logical_expression . COMMA LITERALSTRING
  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
>>>>>>> main

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139
    COMMA        shift, and go to state 154

<<<<<<< HEAD
    $default  reduce using rule 67 (del_statment)
>>>>>>> main
=======
    $default  reduce using rule 63 (assert_statement)
>>>>>>> main


state 92

<<<<<<< HEAD
<<<<<<< HEAD
   70 del_statment: KEYWORD_DEL IDENTIFIER .
   71             | KEYWORD_DEL IDENTIFIER . LIST

    LIST  shift, and go to state 166

    $default  reduce using rule 70 (del_statment)
=======
   76 global_statement: KEYWORD_GLOBAL global_nonlocal_targets .

    $default  reduce using rule 76 (global_statement)
>>>>>>> main
=======
   58 del_statment: KEYWORD_DEL IDENTIFIER .
   59             | KEYWORD_DEL IDENTIFIER . LIST

    LIST  shift, and go to state 155

    $default  reduce using rule 58 (del_statment)
>>>>>>> main


state 93

<<<<<<< HEAD
   79 global_statement: KEYWORD_GLOBAL global_nonlocal_targets .

<<<<<<< HEAD
    $default  reduce using rule 79 (global_statement)
=======
    COLON  shift, and go to state 164
    COMMA  shift, and go to state 165
>>>>>>> main
=======
   67 global_statement: KEYWORD_GLOBAL global_nonlocal_targets .

    $default  reduce using rule 67 (global_statement)
>>>>>>> main


state 94

<<<<<<< HEAD
  100 with_statment: KEYWORD_WITH with_stmt . COLON block
  102 with_stmt: with_stmt . COMMA function_call KEYWORD_AS IDENTIFIER

<<<<<<< HEAD
    COLON  shift, and go to state 167
    COMMA  shift, and go to state 168
=======
    KEYWORD_AS  shift, and go to state 166
>>>>>>> main
=======
   87 with_statment: KEYWORD_WITH with_stmt . COLON block
   89 with_stmt: with_stmt . COMMA function_call KEYWORD_AS IDENTIFIER

    COLON  shift, and go to state 156
    COMMA  shift, and go to state 157
>>>>>>> main


state 95

<<<<<<< HEAD
<<<<<<< HEAD
  101 with_stmt: function_call . KEYWORD_AS IDENTIFIER

    KEYWORD_AS  shift, and go to state 169
=======
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   71 yield_statement: KEYWORD_YIELD expression .

    ADD       shift, and go to state 134
    MINUS     shift, and go to state 135
    MULTIPLY  shift, and go to state 136
    DIVIDE    shift, and go to state 137
    POWER     shift, and go to state 138
    MODULO    shift, and go to state 139

    $default  reduce using rule 71 (yield_statement)
>>>>>>> main
=======
   88 with_stmt: function_call . KEYWORD_AS IDENTIFIER

    KEYWORD_AS  shift, and go to state 158
>>>>>>> main


state 96

<<<<<<< HEAD
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   74 yield_statement: KEYWORD_YIELD expression .

<<<<<<< HEAD
    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 74 (yield_statement)
=======
    COLON  shift, and go to state 167
>>>>>>> main
=======
   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   62 yield_statement: KEYWORD_YIELD expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 62 (yield_statement)
>>>>>>> main


state 97

<<<<<<< HEAD
   83 match_statement: KEYWORD_MATCH IDENTIFIER . COLON match_block

    COLON  shift, and go to state 170
=======
   71 match_statement: KEYWORD_MATCH IDENTIFIER . COLON match_block

    COLON  shift, and go to state 159
>>>>>>> main


state 98

    6 statements: statements NEWLINE .
    9 statement: NEWLINE .

    $end              reduce using rule 6 (statements)
    $end              [reduce using rule 9 (statement)]
    IDENTIFIER        reduce using rule 6 (statements)
    IDENTIFIER        [reduce using rule 9 (statement)]
    KEYWORD_IF        reduce using rule 6 (statements)
    KEYWORD_IF        [reduce using rule 9 (statement)]
    KEYWORD_IMPORT    reduce using rule 6 (statements)
    KEYWORD_IMPORT    [reduce using rule 9 (statement)]
    KEYWORD_PASS      reduce using rule 6 (statements)
    KEYWORD_PASS      [reduce using rule 9 (statement)]
    KEYWORD_BREAK     reduce using rule 6 (statements)
    KEYWORD_BREAK     [reduce using rule 9 (statement)]
    KEYWORD_RAISE     reduce using rule 6 (statements)
    KEYWORD_RAISE     [reduce using rule 9 (statement)]
    KEYWORD_CLASS     reduce using rule 6 (statements)
    KEYWORD_CLASS     [reduce using rule 9 (statement)]
    KEYWORD_RETURN    reduce using rule 6 (statements)
    KEYWORD_RETURN    [reduce using rule 9 (statement)]
    KEYWORD_CONTINUE  reduce using rule 6 (statements)
    KEYWORD_CONTINUE  [reduce using rule 9 (statement)]
    KEYWORD_FOR       reduce using rule 6 (statements)
    KEYWORD_FOR       [reduce using rule 9 (statement)]
    KEYWORD_TRY       reduce using rule 6 (statements)
    KEYWORD_TRY       [reduce using rule 9 (statement)]
    KEYWORD_DEF       reduce using rule 6 (statements)
    KEYWORD_DEF       [reduce using rule 9 (statement)]
    KEYWORD_FROM      reduce using rule 6 (statements)
    KEYWORD_FROM      [reduce using rule 9 (statement)]
    KEYWORD_NONLOCAL  reduce using rule 6 (statements)
    KEYWORD_NONLOCAL  [reduce using rule 9 (statement)]
    KEYWORD_WHILE     reduce using rule 6 (statements)
    KEYWORD_WHILE     [reduce using rule 9 (statement)]
    KEYWORD_ASSERT    reduce using rule 6 (statements)
    KEYWORD_ASSERT    [reduce using rule 9 (statement)]
    KEYWORD_DEL       reduce using rule 6 (statements)
    KEYWORD_DEL       [reduce using rule 9 (statement)]
    KEYWORD_GLOBAL    reduce using rule 6 (statements)
    KEYWORD_GLOBAL    [reduce using rule 9 (statement)]
    KEYWORD_WITH      reduce using rule 6 (statements)
    KEYWORD_WITH      [reduce using rule 9 (statement)]
    KEYWORD_YIELD     reduce using rule 6 (statements)
    KEYWORD_YIELD     [reduce using rule 9 (statement)]
    COMMENT           reduce using rule 6 (statements)
    COMMENT           [reduce using rule 9 (statement)]
    MULTILINECOMMENT  reduce using rule 6 (statements)
    MULTILINECOMMENT  [reduce using rule 9 (statement)]
    DEDENT            reduce using rule 6 (statements)
    DEDENT            [reduce using rule 9 (statement)]
    NEWLINE           reduce using rule 6 (statements)
    NEWLINE           [reduce using rule 9 (statement)]
    KEYWORD_MATCH     reduce using rule 6 (statements)
    KEYWORD_MATCH     [reduce using rule 9 (statement)]
    $default          reduce using rule 6 (statements)


state 99

    4 statements: statements statement .

    $default  reduce using rule 4 (statements)


<<<<<<< HEAD
<<<<<<< HEAD
state 100

   34 import_statments: import_statments import_statment .

    $default  reduce using rule 34 (import_statments)
=======
state 99
=======
state 100
>>>>>>> main

   34 import_statments: import_statments import_statment .

    $default  reduce using rule 34 (import_statments)


state 101

   33 import_statments: import_statment NEWLINE .

    $default  reduce using rule 33 (import_statments)
>>>>>>> main


<<<<<<< HEAD
state 101

   33 import_statments: import_statment NEWLINE .

<<<<<<< HEAD
    $default  reduce using rule 33 (import_statments)
=======
    IDENTIFIER  shift, and go to state 74
    COLON       shift, and go to state 168

    member_expression  go to state 169
>>>>>>> main


state 102

   94 except: KEYWORD_EXCEPT . COLON block
   95       | KEYWORD_EXCEPT . member_expression COLON block
   96       | KEYWORD_EXCEPT . member_expression KEYWORD_AS IDENTIFIER COLON block

<<<<<<< HEAD
    IDENTIFIER  shift, and go to state 74
    COLON       shift, and go to state 171

    member_expression  go to state 172
=======
    COLON  shift, and go to state 170
>>>>>>> main
=======
state 102

   82 except: KEYWORD_EXCEPT . COLON block
   83       | KEYWORD_EXCEPT . member_expression COLON block

    IDENTIFIER  shift, and go to state 75
    COLON       shift, and go to state 160

    member_expression  go to state 161
>>>>>>> main


state 103

<<<<<<< HEAD
   97 finally: KEYWORD_FINALLY . COLON block

    COLON  shift, and go to state 173
=======
   84 finally: KEYWORD_FINALLY . COLON block

    COLON  shift, and go to state 162
>>>>>>> main


state 104

<<<<<<< HEAD
   99 except_statements: except .

    $default  reduce using rule 99 (except_statements)
=======
   86 except_statements: except .

    $default  reduce using rule 86 (except_statements)
>>>>>>> main


state 105

<<<<<<< HEAD
   88 try_statement: try finally .

<<<<<<< HEAD
    $default  reduce using rule 88 (try_statement)
=======
    KEYWORD_ELSE     shift, and go to state 118
    KEYWORD_EXCEPT   shift, and go to state 101
    KEYWORD_FINALLY  shift, and go to state 102

    $default  reduce using rule 86 (try_statement)

    except          go to state 171
    finally         go to state 172
    else_statement  go to state 173
>>>>>>> main
=======
   76 try_statement: try finally .

    $default  reduce using rule 76 (try_statement)
>>>>>>> main


state 106

<<<<<<< HEAD
<<<<<<< HEAD
   89 try_statement: try except_statements .
   90              | try except_statements . finally
   91              | try except_statements . else_statement
   92              | try except_statements . else_statement finally
   98 except_statements: except_statements . except

    KEYWORD_ELSE     shift, and go to state 119
    KEYWORD_EXCEPT   shift, and go to state 102
    KEYWORD_FINALLY  shift, and go to state 103

    $default  reduce using rule 89 (try_statement)

    except          go to state 174
    finally         go to state 175
    else_statement  go to state 176
=======
  107 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  108              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  109              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  110              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
  119 member_expression: member_expression IDENTIFIER .
=======
   77 try_statement: try except_statements .
   78              | try except_statements . finally
   79              | try except_statements . else_statement
   80              | try except_statements . else_statement finally
   85 except_statements: except_statements . except
>>>>>>> main

    KEYWORD_ELSE     shift, and go to state 107
    KEYWORD_EXCEPT   shift, and go to state 102
    KEYWORD_FINALLY  shift, and go to state 103

<<<<<<< HEAD
    $default  reduce using rule 119 (member_expression)
>>>>>>> main
=======
    $default  reduce using rule 77 (try_statement)

    except          go to state 163
    finally         go to state 164
    else_statement  go to state 165
>>>>>>> main


state 107

<<<<<<< HEAD
<<<<<<< HEAD
  112 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  113              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  114              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  115              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
  124 member_expression: member_expression IDENTIFIER .

    LEFT_PARENTHES  shift, and go to state 56

    LEFT_PARENTHES  [reduce using rule 124 (member_expression)]
    $default        reduce using rule 124 (member_expression)


state 108

   40 assignment: member_expression ASSIGN . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
   40 assignment: member_expression ASSIGN . expression
=======
  134 else_statement: KEYWORD_ELSE . COLON block
>>>>>>> main

    COLON  shift, and go to state 166


state 108

  135 elif_statement: KEYWORD_ELSE_IF . logical_expression COLON block
  136               | KEYWORD_ELSE_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 57
    LIST            shift, and go to state 58
    LITERALSTRING   shift, and go to state 59
    KEYWORD_FALSE   shift, and go to state 60
    KEYWORD_TRUE    shift, and go to state 61
    KEYWORD_NONE    shift, and go to state 62
    KEYWORD_NOT     shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 167
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    '-'             shift, and go to state 67
    '|'             shift, and go to state 68
    '('             shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 168


state 109

  125 conditional_statement: if_statement elif_else .

    $default  reduce using rule 125 (conditional_statement)


state 110

  127 elif_else: elif_stmts . else_statement
  128          | elif_stmts .
  131 elif_stmts: elif_stmts . elif_statement

<<<<<<< HEAD
    IDENTIFIER     shift, and go to state 4
    LIST           shift, and go to state 57
    LITERALSTRING  shift, and go to state 58
    KEYWORD_NONE   shift, and go to state 61
    INTEGER        shift, and go to state 64
    FLOAT          shift, and go to state 65
    '-'            shift, and go to state 66
    '|'            shift, and go to state 67
    '('            shift, and go to state 68
>>>>>>> main
=======
    KEYWORD_ELSE     shift, and go to state 107
    KEYWORD_ELSE_IF  shift, and go to state 108
>>>>>>> main

    $default  reduce using rule 128 (elif_else)

    else_statement  go to state 169
    elif_statement  go to state 170


<<<<<<< HEAD
state 109

   41 assignment: member_expression ASSIGNADD . expression
=======
state 111

<<<<<<< HEAD
   42 assignment: member_expression ASSIGNDIVIDE . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 178
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
  129 elif_else: else_statement .

    $default  reduce using rule 129 (elif_else)
>>>>>>> main


<<<<<<< HEAD
state 110

   46 assignment: member_expression ASSIGNMINUS . expression
=======
state 112

<<<<<<< HEAD
   45 assignment: member_expression ASSIGNMODULO . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 179
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
  130 elif_stmts: elif_statement .

    $default  reduce using rule 130 (elif_stmts)
>>>>>>> main


<<<<<<< HEAD
state 111

   44 assignment: member_expression ASSIGNMULTIPLY . expression
=======
state 113

<<<<<<< HEAD
   47 assignment: member_expression ASSIGNFLOORDIVISION . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 180
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
   40 assignment: IDENTIFIER ASSIGN number .

    $default  reduce using rule 40 (assignment)
>>>>>>> main


<<<<<<< HEAD
state 112

   42 assignment: member_expression ASSIGNDIVIDE . expression
=======
state 114

<<<<<<< HEAD
   43 assignment: member_expression ASSIGNEXPONINTIATION . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
   53 expression: LITERALSTRING .
  101 function_call: IDENTIFIER LEFT_PARENTHES LITERALSTRING . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 171
>>>>>>> main

    RIGHT_PARENTHES  [reduce using rule 53 (expression)]
    $default         reduce using rule 53 (expression)


<<<<<<< HEAD
state 113

   45 assignment: member_expression ASSIGNMODULO . expression
=======
state 115

<<<<<<< HEAD
   48 assignment: member_expression ASSIGNRIGHTSHIFT . expression
>>>>>>> main

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68
=======
   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  108 args: expression . COMMA
  109     | expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129
    COMMA     shift, and go to state 172
>>>>>>> main

    $default  reduce using rule 109 (args)


<<<<<<< HEAD
state 114

   47 assignment: member_expression ASSIGNFLOORDIVISION . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 183
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 115

   43 assignment: member_expression ASSIGNEXPONINTIATION . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 184
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 116

<<<<<<< HEAD
   48 assignment: member_expression ASSIGNRIGHTSHIFT . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 185
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 117

   49 assignment: member_expression ASSIGNLEFTSHIFT . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 186
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 118

  125 member_expression: member_expression function_call .

    $default  reduce using rule 125 (member_expression)


state 119

  146 else_statement: KEYWORD_ELSE . COLON block

    COLON  shift, and go to state 187


state 120

  147 elif_statement: KEYWORD_ELSE_IF . logical_expression COLON block
  148               | KEYWORD_ELSE_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 188
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 189


state 121

  137 conditional_statement: if_statement elif_else .

    $default  reduce using rule 137 (conditional_statement)


state 122

  139 elif_else: elif_stmts . else_statement
  140          | elif_stmts .
  143 elif_stmts: elif_stmts . elif_statement

    KEYWORD_ELSE     shift, and go to state 119
    KEYWORD_ELSE_IF  shift, and go to state 120

    $default  reduce using rule 140 (elif_else)

    else_statement  go to state 190
    elif_statement  go to state 191


state 123

  141 elif_else: else_statement .

    $default  reduce using rule 141 (elif_else)


state 124

  142 elif_stmts: elif_statement .

    $default  reduce using rule 142 (elif_stmts)


state 125

   62 expression: LITERALSTRING .
  114 function_call: IDENTIFIER LEFT_PARENTHES LITERALSTRING . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 192

    RIGHT_PARENTHES  [reduce using rule 62 (expression)]
    $default         reduce using rule 62 (expression)


state 126

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  121 args: expression . COMMA
  122     | expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141
    COMMA     shift, and go to state 193

    MINUS     [reduce using rule 122 (args)]
    $default  reduce using rule 122 (args)


state 127

   59 expression: number .
  113 function_call: IDENTIFIER LEFT_PARENTHES number . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 194

    RIGHT_PARENTHES  [reduce using rule 59 (expression)]
    $default         reduce using rule 59 (expression)


state 128

   61 expression: function_call .
  115 function_call: IDENTIFIER LEFT_PARENTHES function_call . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 195

    RIGHT_PARENTHES  [reduce using rule 61 (expression)]
    $default         reduce using rule 61 (expression)


state 129

  112 function_call: IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES
  119 args: args . expression COMMA
  120     | args . expression

    IDENTIFIER       shift, and go to state 4
    LIST             shift, and go to state 57
    LITERALSTRING    shift, and go to state 58
    KEYWORD_FALSE    shift, and go to state 59
    KEYWORD_TRUE     shift, and go to state 60
    KEYWORD_NONE     shift, and go to state 61
    MINUS            shift, and go to state 63
    LEFT_PARENTHES   shift, and go to state 79
    RIGHT_PARENTHES  shift, and go to state 196
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    TUPLE            shift, and go to state 67
    '|'              shift, and go to state 68

    expression         go to state 197
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 130

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  136                   | KEYWORD_NOT logical_expression .

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149

    KEYWORD_AND  [reduce using rule 136 (logical_expression)]
    KEYWORD_OR   [reduce using rule 136 (logical_expression)]
    $default     reduce using rule 136 (logical_expression)


state 131

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   58           | MINUS expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 58 (expression)]
    MINUS     [reduce using rule 58 (expression)]
    MULTIPLY  [reduce using rule 58 (expression)]
    DIVIDE    [reduce using rule 58 (expression)]
    POWER     [reduce using rule 58 (expression)]
    MODULO    [reduce using rule 58 (expression)]
    $default  reduce using rule 58 (expression)


state 132

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   57           | LEFT_PARENTHES expression . RIGHT_PARENTHES
  126 logical_expression: expression .
  127                   | expression . GREATEROREQUAL expression
  128                   | expression . GREATERTHAN expression
  129                   | expression . LESSOREQUAL expression
  130                   | expression . LESSTHAN expression
  131                   | expression . EQUAL expression
  132                   | expression . NOTEQUAL expression
  133                   | expression . KEYWORD_IS expression

    KEYWORD_IS       shift, and go to state 135
    ADD              shift, and go to state 136
    MINUS            shift, and go to state 137
    MULTIPLY         shift, and go to state 138
    DIVIDE           shift, and go to state 139
    POWER            shift, and go to state 140
    MODULO           shift, and go to state 141
    EQUAL            shift, and go to state 142
    NOTEQUAL         shift, and go to state 143
    GREATERTHAN      shift, and go to state 144
    GREATEROREQUAL   shift, and go to state 145
    LESSTHAN         shift, and go to state 146
    LESSOREQUAL      shift, and go to state 147
    RIGHT_PARENTHES  shift, and go to state 198

    RIGHT_PARENTHES  [reduce using rule 126 (logical_expression)]
    $default         reduce using rule 126 (logical_expression)


state 133

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  145 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 148
    KEYWORD_OR       shift, and go to state 149
    RIGHT_PARENTHES  shift, and go to state 199


state 134

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   56           | '|' expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 56 (expression)]
    MINUS     [reduce using rule 56 (expression)]
    MULTIPLY  [reduce using rule 56 (expression)]
    DIVIDE    [reduce using rule 56 (expression)]
    POWER     [reduce using rule 56 (expression)]
    MODULO    [reduce using rule 56 (expression)]
    $default  reduce using rule 56 (expression)


state 135

  133 logical_expression: expression KEYWORD_IS . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 200
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 136

   50 expression: expression ADD . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 201
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 137

   51 expression: expression MINUS . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 202
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 138

   52 expression: expression MULTIPLY . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 203
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 139

   53 expression: expression DIVIDE . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 204
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 140

   54 expression: expression POWER . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 205
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 141

   55 expression: expression MODULO . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 206
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 142

  131 logical_expression: expression EQUAL . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 207
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 143

  132 logical_expression: expression NOTEQUAL . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 208
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 144

  128 logical_expression: expression GREATERTHAN . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 209
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 145

  127 logical_expression: expression GREATEROREQUAL . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 210
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 146

  130 logical_expression: expression LESSTHAN . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 211
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 147

  129 logical_expression: expression LESSOREQUAL . expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 212
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 148

  134 logical_expression: logical_expression KEYWORD_AND . logical_expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 213


state 149

  135 logical_expression: logical_expression KEYWORD_OR . logical_expression

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 69
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 214


state 150

  144 if_statement: KEYWORD_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 215


state 151

   38 import_statment: KEYWORD_IMPORT member_expression KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 216


state 152

   78 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM . IDENTIFIER

    IDENTIFIER  shift, and go to state 217


state 153

  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON class_block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    IDENTIFIER      [reduce using rule 118 (args)]
    LIST            [reduce using rule 118 (args)]
    LITERALSTRING   [reduce using rule 118 (args)]
    KEYWORD_FALSE   [reduce using rule 118 (args)]
    KEYWORD_TRUE    [reduce using rule 118 (args)]
    KEYWORD_NONE    [reduce using rule 118 (args)]
    MINUS           [reduce using rule 118 (args)]
    LEFT_PARENTHES  [reduce using rule 118 (args)]
    INTEGER         [reduce using rule 118 (args)]
    FLOAT           [reduce using rule 118 (args)]
    TUPLE           [reduce using rule 118 (args)]
    '|'             [reduce using rule 118 (args)]
    $default        reduce using rule 118 (args)

    expression         go to state 126
    number             go to state 70
    function_call      go to state 71
    args               go to state 218
    member_expression  go to state 72


state 154

  111 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON . class_block

    NEWLINE  shift, and go to state 219

    class_block  go to state 220


state 155

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   57           | LEFT_PARENTHES expression . RIGHT_PARENTHES

    ADD              shift, and go to state 136
    MINUS            shift, and go to state 137
    MULTIPLY         shift, and go to state 138
    DIVIDE           shift, and go to state 139
    POWER            shift, and go to state 140
    MODULO           shift, and go to state 141
    RIGHT_PARENTHES  shift, and go to state 198


state 156

  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN . function_call COLON block
  150              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . LIST COLON block
  152              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression COLON block
  153              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call COLON block
  154              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 4
    LIST        shift, and go to state 221

    function_call      go to state 222
    member_expression  go to state 223


state 157

  119 args: args . expression COMMA
  120     | args . expression
  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args . RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER       shift, and go to state 4
    LIST             shift, and go to state 57
    LITERALSTRING    shift, and go to state 58
    KEYWORD_FALSE    shift, and go to state 59
    KEYWORD_TRUE     shift, and go to state 60
    KEYWORD_NONE     shift, and go to state 61
    MINUS            shift, and go to state 63
    LEFT_PARENTHES   shift, and go to state 79
    RIGHT_PARENTHES  shift, and go to state 224
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    TUPLE            shift, and go to state 67
    '|'              shift, and go to state 68

    expression         go to state 197
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


state 158

  117 block: NEWLINE . INDENT statements DEDENT

    INDENT  shift, and go to state 225


state 159

   93 try: KEYWORD_TRY COLON block .

    $default  reduce using rule 93 (try)


state 160

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    IDENTIFIER      [reduce using rule 118 (args)]
    LIST            [reduce using rule 118 (args)]
    LITERALSTRING   [reduce using rule 118 (args)]
    KEYWORD_FALSE   [reduce using rule 118 (args)]
    KEYWORD_TRUE    [reduce using rule 118 (args)]
    KEYWORD_NONE    [reduce using rule 118 (args)]
    MINUS           [reduce using rule 118 (args)]
    LEFT_PARENTHES  [reduce using rule 118 (args)]
    INTEGER         [reduce using rule 118 (args)]
    FLOAT           [reduce using rule 118 (args)]
    TUPLE           [reduce using rule 118 (args)]
    '|'             [reduce using rule 118 (args)]
    $default        reduce using rule 118 (args)

    expression         go to state 126
    number             go to state 70
    function_call      go to state 71
    args               go to state 226
    member_expression  go to state 72


state 161

   36 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT . IDENTIFIER
   37                | KEYWORD_FROM member_expression KEYWORD_IMPORT . '*'
   39                | KEYWORD_FROM member_expression KEYWORD_IMPORT . IDENTIFIER KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 227
    '*'         shift, and go to state 228


state 162

   82 global_nonlocal_targets: IDENTIFIER COMMA . global_nonlocal_targets

    IDENTIFIER  shift, and go to state 87

    global_nonlocal_targets  go to state 229


state 163

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  156 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 148
    KEYWORD_OR       shift, and go to state 149
    RIGHT_PARENTHES  shift, and go to state 230


state 164

  155 while_statement: KEYWORD_WHILE logical_expression COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 231


state 165

   76 assert_statement: KEYWORD_ASSERT logical_expression COMMA . LITERALSTRING

    LITERALSTRING  shift, and go to state 232


state 166

   71 del_statment: KEYWORD_DEL IDENTIFIER LIST .

    $default  reduce using rule 71 (del_statment)


state 167

  100 with_statment: KEYWORD_WITH with_stmt COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 233


state 168

  102 with_stmt: with_stmt COMMA . function_call KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 76

    function_call  go to state 234


state 169

  101 with_stmt: function_call KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 235


state 170

   83 match_statement: KEYWORD_MATCH IDENTIFIER COLON . match_block

    NEWLINE  shift, and go to state 236

    match_block  go to state 237


state 171

   94 except: KEYWORD_EXCEPT COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 238


state 172

   95 except: KEYWORD_EXCEPT member_expression . COLON block
   96       | KEYWORD_EXCEPT member_expression . KEYWORD_AS IDENTIFIER COLON block
  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call

    IDENTIFIER  shift, and go to state 107
    KEYWORD_AS  shift, and go to state 239
    COLON       shift, and go to state 240

    function_call  go to state 118


state 173

   97 finally: KEYWORD_FINALLY COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 241


state 174

   98 except_statements: except_statements except .

    $default  reduce using rule 98 (except_statements)


state 175

   90 try_statement: try except_statements finally .

    $default  reduce using rule 90 (try_statement)


state 176

   91 try_statement: try except_statements else_statement .
   92              | try except_statements else_statement . finally

    KEYWORD_FINALLY  shift, and go to state 103

    $default  reduce using rule 91 (try_statement)

    finally  go to state 242


state 177

   40 assignment: member_expression ASSIGN expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 40 (assignment)


state 178

   41 assignment: member_expression ASSIGNADD expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 41 (assignment)


state 179

   46 assignment: member_expression ASSIGNMINUS expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 46 (assignment)


state 180

   44 assignment: member_expression ASSIGNMULTIPLY expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 44 (assignment)


state 181

   42 assignment: member_expression ASSIGNDIVIDE expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 42 (assignment)


state 182

   45 assignment: member_expression ASSIGNMODULO expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 45 (assignment)


state 183

   47 assignment: member_expression ASSIGNFLOORDIVISION expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 47 (assignment)


state 184

   43 assignment: member_expression ASSIGNEXPONINTIATION expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 43 (assignment)


state 185

   48 assignment: member_expression ASSIGNRIGHTSHIFT expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 48 (assignment)


state 186

   49 assignment: member_expression ASSIGNLEFTSHIFT expression .
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 49 (assignment)


state 187

  146 else_statement: KEYWORD_ELSE COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 243


state 188

   57 expression: LEFT_PARENTHES . expression RIGHT_PARENTHES
  148 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    KEYWORD_NOT     shift, and go to state 62
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression          go to state 132
    number              go to state 70
    function_call       go to state 71
    member_expression   go to state 72
    logical_expression  go to state 244


state 189

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  147 elif_statement: KEYWORD_ELSE_IF logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149
    COLON        shift, and go to state 245


state 190

  139 elif_else: elif_stmts else_statement .

    $default  reduce using rule 139 (elif_else)


state 191

  143 elif_stmts: elif_stmts elif_statement .

    $default  reduce using rule 143 (elif_stmts)


state 192

  114 function_call: IDENTIFIER LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES .

    $default  reduce using rule 114 (function_call)


state 193

  121 args: expression COMMA .

    $default  reduce using rule 121 (args)


state 194

  113 function_call: IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES .

    $default  reduce using rule 113 (function_call)


state 195

  115 function_call: IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES .

    $default  reduce using rule 115 (function_call)


state 196

  112 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES .

    $default  reduce using rule 112 (function_call)


state 197

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  119 args: args expression . COMMA
  120     | args expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141
    COMMA     shift, and go to state 246

    MINUS     [reduce using rule 120 (args)]
    $default  reduce using rule 120 (args)


state 198

   57 expression: LEFT_PARENTHES expression RIGHT_PARENTHES .

    $default  reduce using rule 57 (expression)


state 199

  145 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 247


state 200

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  133 logical_expression: expression KEYWORD_IS expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 133 (logical_expression)


state 201

   50 expression: expression . ADD expression
   50           | expression ADD expression .
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 50 (expression)]
    MINUS     [reduce using rule 50 (expression)]
    MULTIPLY  [reduce using rule 50 (expression)]
    DIVIDE    [reduce using rule 50 (expression)]
    POWER     [reduce using rule 50 (expression)]
    MODULO    [reduce using rule 50 (expression)]
    $default  reduce using rule 50 (expression)


state 202

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   51           | expression MINUS expression .
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 51 (expression)]
    MINUS     [reduce using rule 51 (expression)]
    MULTIPLY  [reduce using rule 51 (expression)]
    DIVIDE    [reduce using rule 51 (expression)]
    POWER     [reduce using rule 51 (expression)]
    MODULO    [reduce using rule 51 (expression)]
    $default  reduce using rule 51 (expression)


state 203

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   52           | expression MULTIPLY expression .
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 52 (expression)]
    MINUS     [reduce using rule 52 (expression)]
    MULTIPLY  [reduce using rule 52 (expression)]
    DIVIDE    [reduce using rule 52 (expression)]
    POWER     [reduce using rule 52 (expression)]
    MODULO    [reduce using rule 52 (expression)]
    $default  reduce using rule 52 (expression)


state 204

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   53           | expression DIVIDE expression .
   54           | expression . POWER expression
   55           | expression . MODULO expression

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 53 (expression)]
    MINUS     [reduce using rule 53 (expression)]
    MULTIPLY  [reduce using rule 53 (expression)]
    DIVIDE    [reduce using rule 53 (expression)]
    POWER     [reduce using rule 53 (expression)]
    MODULO    [reduce using rule 53 (expression)]
    $default  reduce using rule 53 (expression)


state 205

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   54           | expression POWER expression .
   55           | expression . MODULO expression
=======
state 116

   49 assignment: member_expression ASSIGNLEFTSHIFT . expression
>>>>>>> main

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

<<<<<<< HEAD
    ADD       [reduce using rule 54 (expression)]
    MINUS     [reduce using rule 54 (expression)]
    MULTIPLY  [reduce using rule 54 (expression)]
    DIVIDE    [reduce using rule 54 (expression)]
    POWER     [reduce using rule 54 (expression)]
    MODULO    [reduce using rule 54 (expression)]
    $default  reduce using rule 54 (expression)


state 206

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   55           | expression MODULO expression .
=======
    expression         go to state 183
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
   50 expression: number .
  100 function_call: IDENTIFIER LEFT_PARENTHES number . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 173

    RIGHT_PARENTHES  [reduce using rule 50 (expression)]
    $default         reduce using rule 50 (expression)
>>>>>>> main


state 117

   52 expression: function_call .
  102 function_call: IDENTIFIER LEFT_PARENTHES function_call . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 174

    RIGHT_PARENTHES  [reduce using rule 52 (expression)]
    $default         reduce using rule 52 (expression)


state 118

   99 function_call: IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES
  106 args: args . expression COMMA
  107     | args . expression

    IDENTIFIER       shift, and go to state 57
    LIST             shift, and go to state 58
    LITERALSTRING    shift, and go to state 59
    KEYWORD_NONE     shift, and go to state 62
    RIGHT_PARENTHES  shift, and go to state 175
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    '-'              shift, and go to state 67
    '|'              shift, and go to state 68
    '('              shift, and go to state 69

    expression         go to state 176
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 119

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  122                   | KEYWORD_NOT logical_expression .

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139

    KEYWORD_AND  [reduce using rule 122 (logical_expression)]
    KEYWORD_OR   [reduce using rule 122 (logical_expression)]
    $default     reduce using rule 122 (logical_expression)


state 120

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  133 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 138
    KEYWORD_OR       shift, and go to state 139
    RIGHT_PARENTHES  shift, and go to state 177


state 121

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   49           | '-' expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 49 (expression)]
    MINUS     [reduce using rule 49 (expression)]
    MULTIPLY  [reduce using rule 49 (expression)]
    DIVIDE    [reduce using rule 49 (expression)]
    POWER     [reduce using rule 49 (expression)]
    MODULO    [reduce using rule 49 (expression)]
    $default  reduce using rule 49 (expression)


state 122

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   47           | '|' expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 47 (expression)]
    MINUS     [reduce using rule 47 (expression)]
    MULTIPLY  [reduce using rule 47 (expression)]
    DIVIDE    [reduce using rule 47 (expression)]
    POWER     [reduce using rule 47 (expression)]
    MODULO    [reduce using rule 47 (expression)]
    $default  reduce using rule 47 (expression)


state 123

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   48           | '(' expression . ')'

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129
    ')'       shift, and go to state 178


state 124

   41 expression: expression ADD . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 179
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 125

   42 expression: expression MINUS . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 180
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 126

   43 expression: expression MULTIPLY . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 181
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 127

   44 expression: expression DIVIDE . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 182
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 128

   45 expression: expression POWER . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 183
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 129

   46 expression: expression MODULO . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 184
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 130

  118 logical_expression: expression EQUAL . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 185
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 131

  119 logical_expression: expression NOTEQUAL . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 186
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 132

  115 logical_expression: expression GREATERTHAN . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 187
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 133

  114 logical_expression: expression GREATEROREQUAL . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 188
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 134

<<<<<<< HEAD
   50 expression: expression ADD . expression
>>>>>>> main

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    ADD       [reduce using rule 55 (expression)]
    MINUS     [reduce using rule 55 (expression)]
    MULTIPLY  [reduce using rule 55 (expression)]
    DIVIDE    [reduce using rule 55 (expression)]
    POWER     [reduce using rule 55 (expression)]
    MODULO    [reduce using rule 55 (expression)]
    $default  reduce using rule 55 (expression)


state 207

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  131 logical_expression: expression EQUAL expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 131 (logical_expression)


state 208

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  132 logical_expression: expression NOTEQUAL expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 132 (logical_expression)


state 209

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  128 logical_expression: expression GREATERTHAN expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 128 (logical_expression)


state 210

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  127 logical_expression: expression GREATEROREQUAL expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 127 (logical_expression)


state 211

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  130 logical_expression: expression LESSTHAN expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 130 (logical_expression)


state 212

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
  129 logical_expression: expression LESSOREQUAL expression .

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141

    $default  reduce using rule 129 (logical_expression)


state 213

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  134                   | logical_expression KEYWORD_AND logical_expression .
  135                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149

    KEYWORD_AND  [reduce using rule 134 (logical_expression)]
    KEYWORD_OR   [reduce using rule 134 (logical_expression)]
    $default     reduce using rule 134 (logical_expression)


state 214

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  135                   | logical_expression KEYWORD_OR logical_expression .

    KEYWORD_AND  shift, and go to state 148
    KEYWORD_OR   shift, and go to state 149

    KEYWORD_AND  [reduce using rule 135 (logical_expression)]
    KEYWORD_OR   [reduce using rule 135 (logical_expression)]
    $default     reduce using rule 135 (logical_expression)


state 215

  144 if_statement: KEYWORD_IF logical_expression COLON block .

    $default  reduce using rule 144 (if_statement)


state 216

   38 import_statment: KEYWORD_IMPORT member_expression KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 38 (import_statment)


state 217

   78 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER .

    $default  reduce using rule 78 (raise_statement)


state 218

  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON class_block
  119 args: args . expression COMMA
  120     | args . expression

    IDENTIFIER       shift, and go to state 4
    LIST             shift, and go to state 57
    LITERALSTRING    shift, and go to state 58
    KEYWORD_FALSE    shift, and go to state 59
    KEYWORD_TRUE     shift, and go to state 60
    KEYWORD_NONE     shift, and go to state 61
    MINUS            shift, and go to state 63
    LEFT_PARENTHES   shift, and go to state 79
    RIGHT_PARENTHES  shift, and go to state 248
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    TUPLE            shift, and go to state 67
    '|'              shift, and go to state 68
=======
  117 logical_expression: expression LESSTHAN . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69
>>>>>>> main

    expression         go to state 189
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


<<<<<<< HEAD
state 219
=======
state 135

  116 logical_expression: expression LESSOREQUAL . expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 190
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 136

   99 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  100              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  101              | IDENTIFIER . LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES
  102              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES
  111 member_expression: member_expression IDENTIFIER .

    LEFT_PARENTHES  shift, and go to state 56

    $default  reduce using rule 111 (member_expression)


state 137

  112 member_expression: member_expression function_call .

    $default  reduce using rule 112 (member_expression)


state 138

  120 logical_expression: logical_expression KEYWORD_AND . logical_expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 191


state 139

  121 logical_expression: logical_expression KEYWORD_OR . logical_expression

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 192


state 140

  132 if_statement: KEYWORD_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 193


state 141

   38 import_statment: KEYWORD_IMPORT member_expression KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 194


state 142

   66 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM . IDENTIFIER

    IDENTIFIER  shift, and go to state 195


state 143

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON class_block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    IDENTIFIER     [reduce using rule 105 (args)]
    LIST           [reduce using rule 105 (args)]
    LITERALSTRING  [reduce using rule 105 (args)]
    KEYWORD_NONE   [reduce using rule 105 (args)]
    INTEGER        [reduce using rule 105 (args)]
    FLOAT          [reduce using rule 105 (args)]
    '-'            [reduce using rule 105 (args)]
    '|'            [reduce using rule 105 (args)]
    '('            [reduce using rule 105 (args)]
    $default       reduce using rule 105 (args)

    expression         go to state 115
    number             go to state 71
    function_call      go to state 72
    args               go to state 196
    member_expression  go to state 73


state 144

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON . NEWLINE INDENT class_block DEDENT

    NEWLINE  shift, and go to state 197


state 145

  137 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN . function_call COLON block
  138              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . LIST COLON block
  140              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression COLON block
  141              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call COLON block
  142              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 57
    LIST        shift, and go to state 198

    function_call      go to state 199
    member_expression  go to state 200


state 146

  106 args: args . expression COMMA
  107     | args . expression
  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args . RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER       shift, and go to state 57
    LIST             shift, and go to state 58
    LITERALSTRING    shift, and go to state 59
    KEYWORD_NONE     shift, and go to state 62
    RIGHT_PARENTHES  shift, and go to state 201
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    '-'              shift, and go to state 67
    '|'              shift, and go to state 68
    '('              shift, and go to state 69

    expression         go to state 176
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 147

  104 block: NEWLINE . INDENT statements DEDENT

    INDENT  shift, and go to state 202


state 148

   81 try: KEYWORD_TRY COLON block .

    $default  reduce using rule 81 (try)


state 149

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    IDENTIFIER     [reduce using rule 105 (args)]
    LIST           [reduce using rule 105 (args)]
    LITERALSTRING  [reduce using rule 105 (args)]
    KEYWORD_NONE   [reduce using rule 105 (args)]
    INTEGER        [reduce using rule 105 (args)]
    FLOAT          [reduce using rule 105 (args)]
    '-'            [reduce using rule 105 (args)]
    '|'            [reduce using rule 105 (args)]
    '('            [reduce using rule 105 (args)]
    $default       reduce using rule 105 (args)

    expression         go to state 115
    number             go to state 71
    function_call      go to state 72
    args               go to state 203
    member_expression  go to state 73


state 150

   36 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT . IDENTIFIER
   37                | KEYWORD_FROM member_expression KEYWORD_IMPORT . MULTIPLY
   39                | KEYWORD_FROM member_expression KEYWORD_IMPORT . IDENTIFIER KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 204
    MULTIPLY    shift, and go to state 205


state 151

   70 global_nonlocal_targets: IDENTIFIER COMMA . global_nonlocal_targets

    IDENTIFIER  shift, and go to state 87

    global_nonlocal_targets  go to state 206


state 152

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  144 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 138
    KEYWORD_OR       shift, and go to state 139
    RIGHT_PARENTHES  shift, and go to state 207


state 153

  143 while_statement: KEYWORD_WHILE logical_expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 208


state 154

   64 assert_statement: KEYWORD_ASSERT logical_expression COMMA . LITERALSTRING

    LITERALSTRING  shift, and go to state 209


state 155

   59 del_statment: KEYWORD_DEL IDENTIFIER LIST .

    $default  reduce using rule 59 (del_statment)


state 156

   87 with_statment: KEYWORD_WITH with_stmt COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 210


state 157

   89 with_stmt: with_stmt COMMA . function_call KEYWORD_AS IDENTIFIER

    IDENTIFIER  shift, and go to state 77

    function_call  go to state 211


state 158

   88 with_stmt: function_call KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 212


state 159

   71 match_statement: KEYWORD_MATCH IDENTIFIER COLON . match_block

    NEWLINE  shift, and go to state 213

    match_block  go to state 214


state 160

   82 except: KEYWORD_EXCEPT COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 215


state 161

   83 except: KEYWORD_EXCEPT member_expression . COLON block
  111 member_expression: member_expression . IDENTIFIER
  112                  | member_expression . function_call

    IDENTIFIER  shift, and go to state 136
    COLON       shift, and go to state 216

    function_call  go to state 137


state 162

   84 finally: KEYWORD_FINALLY COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 217


state 163

   85 except_statements: except_statements except .

    $default  reduce using rule 85 (except_statements)


state 164

   78 try_statement: try except_statements finally .

    $default  reduce using rule 78 (try_statement)


state 165

   79 try_statement: try except_statements else_statement .
   80              | try except_statements else_statement . finally

    KEYWORD_FINALLY  shift, and go to state 103

    $default  reduce using rule 79 (try_statement)

    finally  go to state 218


state 166

  134 else_statement: KEYWORD_ELSE COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 219


state 167

  136 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_FALSE  shift, and go to state 60
    KEYWORD_TRUE   shift, and go to state 61
    KEYWORD_NONE   shift, and go to state 62
    KEYWORD_NOT    shift, and go to state 63
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression          go to state 70
    number              go to state 71
    function_call       go to state 72
    member_expression   go to state 73
    logical_expression  go to state 220


state 168

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  135 elif_statement: KEYWORD_ELSE_IF logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139
    COLON        shift, and go to state 221


state 169

  127 elif_else: elif_stmts else_statement .

    $default  reduce using rule 127 (elif_else)


state 170

  131 elif_stmts: elif_stmts elif_statement .

    $default  reduce using rule 131 (elif_stmts)


state 171

  101 function_call: IDENTIFIER LEFT_PARENTHES LITERALSTRING RIGHT_PARENTHES .

    $default  reduce using rule 101 (function_call)


state 172

  108 args: expression COMMA .

    $default  reduce using rule 108 (args)


state 173

  100 function_call: IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES .

    $default  reduce using rule 100 (function_call)


state 174

  102 function_call: IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES .

    $default  reduce using rule 102 (function_call)


state 175

   99 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES .

    $default  reduce using rule 99 (function_call)


state 176

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  106 args: args expression . COMMA
  107     | args expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129
    COMMA     shift, and go to state 222

    $default  reduce using rule 107 (args)


state 177

  133 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 223


state 178

   48 expression: '(' expression ')' .

    $default  reduce using rule 48 (expression)


state 179

   41 expression: expression . ADD expression
   41           | expression ADD expression .
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 41 (expression)]
    MINUS     [reduce using rule 41 (expression)]
    MULTIPLY  [reduce using rule 41 (expression)]
    DIVIDE    [reduce using rule 41 (expression)]
    POWER     [reduce using rule 41 (expression)]
    MODULO    [reduce using rule 41 (expression)]
    $default  reduce using rule 41 (expression)


state 180

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   42           | expression MINUS expression .
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 42 (expression)]
    MINUS     [reduce using rule 42 (expression)]
    MULTIPLY  [reduce using rule 42 (expression)]
    DIVIDE    [reduce using rule 42 (expression)]
    POWER     [reduce using rule 42 (expression)]
    MODULO    [reduce using rule 42 (expression)]
    $default  reduce using rule 42 (expression)


state 181

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   43           | expression MULTIPLY expression .
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 43 (expression)]
    MINUS     [reduce using rule 43 (expression)]
    MULTIPLY  [reduce using rule 43 (expression)]
    DIVIDE    [reduce using rule 43 (expression)]
    POWER     [reduce using rule 43 (expression)]
    MODULO    [reduce using rule 43 (expression)]
    $default  reduce using rule 43 (expression)


state 182

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   44           | expression DIVIDE expression .
   45           | expression . POWER expression
   46           | expression . MODULO expression

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 44 (expression)]
    MINUS     [reduce using rule 44 (expression)]
    MULTIPLY  [reduce using rule 44 (expression)]
    DIVIDE    [reduce using rule 44 (expression)]
    POWER     [reduce using rule 44 (expression)]
    MODULO    [reduce using rule 44 (expression)]
    $default  reduce using rule 44 (expression)


state 183

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   45           | expression POWER expression .
   46           | expression . MODULO expression

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 45 (expression)]
    MINUS     [reduce using rule 45 (expression)]
    MULTIPLY  [reduce using rule 45 (expression)]
    DIVIDE    [reduce using rule 45 (expression)]
    POWER     [reduce using rule 45 (expression)]
    MODULO    [reduce using rule 45 (expression)]
    $default  reduce using rule 45 (expression)


state 184

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   46           | expression MODULO expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    ADD       [reduce using rule 46 (expression)]
    MINUS     [reduce using rule 46 (expression)]
    MULTIPLY  [reduce using rule 46 (expression)]
    DIVIDE    [reduce using rule 46 (expression)]
    POWER     [reduce using rule 46 (expression)]
    MODULO    [reduce using rule 46 (expression)]
    $default  reduce using rule 46 (expression)


state 185

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  118 logical_expression: expression EQUAL expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 118 (logical_expression)


state 186

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  119 logical_expression: expression NOTEQUAL expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 119 (logical_expression)


state 187

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  115 logical_expression: expression GREATERTHAN expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 115 (logical_expression)


state 188

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  114 logical_expression: expression GREATEROREQUAL expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 114 (logical_expression)


state 189

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  117 logical_expression: expression LESSTHAN expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 117 (logical_expression)


state 190

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
  116 logical_expression: expression LESSOREQUAL expression .

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129

    $default  reduce using rule 116 (logical_expression)


state 191

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  120                   | logical_expression KEYWORD_AND logical_expression .
  121                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139

    KEYWORD_AND  [reduce using rule 120 (logical_expression)]
    KEYWORD_OR   [reduce using rule 120 (logical_expression)]
    $default     reduce using rule 120 (logical_expression)


state 192

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  121                   | logical_expression KEYWORD_OR logical_expression .

    KEYWORD_AND  shift, and go to state 138
    KEYWORD_OR   shift, and go to state 139

    KEYWORD_AND  [reduce using rule 121 (logical_expression)]
    KEYWORD_OR   [reduce using rule 121 (logical_expression)]
    $default     reduce using rule 121 (logical_expression)


state 193

  132 if_statement: KEYWORD_IF logical_expression COLON block .

    $default  reduce using rule 132 (if_statement)


state 194

   38 import_statment: KEYWORD_IMPORT member_expression KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 38 (import_statment)


state 195

   66 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER .

    $default  reduce using rule 66 (raise_statement)


state 196

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON class_block
  106 args: args . expression COMMA
  107     | args . expression

    IDENTIFIER       shift, and go to state 57
    LIST             shift, and go to state 58
    LITERALSTRING    shift, and go to state 59
    KEYWORD_NONE     shift, and go to state 62
    RIGHT_PARENTHES  shift, and go to state 224
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    '-'              shift, and go to state 67
    '|'              shift, and go to state 68
    '('              shift, and go to state 69

    expression         go to state 176
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 197

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE . INDENT class_block DEDENT

    INDENT  shift, and go to state 225


state 198

  138 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST . COLON block

    COLON  shift, and go to state 226


state 199

  137 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 227


state 200

  111 member_expression: member_expression . IDENTIFIER
  112                  | member_expression . function_call
  140 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . COLON block
  141              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call COLON block
  142              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 136
    COLON       shift, and go to state 228

    function_call  go to state 229


state 201

  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES . KEYWORD_IN function_call COLON block

    KEYWORD_IN  shift, and go to state 230


<<<<<<< HEAD
state 220
>>>>>>> main

  106 class_block: NEWLINE . INDENT class_body DEDENT

    INDENT  shift, and go to state 249


state 220

  111 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON class_block .

    $default  reduce using rule 111 (class_without_inheritance)


state 221

  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST . COLON block

    COLON  shift, and go to state 250


state 222

  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 251


state 223

  124 member_expression: member_expression . IDENTIFIER
  125                  | member_expression . function_call
  152 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . COLON block
  153              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call COLON block
  154              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 107
    COLON       shift, and go to state 252

    function_call  go to state 253


state 224

  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES . KEYWORD_IN function_call COLON block

    KEYWORD_IN  shift, and go to state 254


state 225

  117 block: NEWLINE INDENT . statements DEDENT
=======
state 202

  104 block: NEWLINE INDENT . statements DEDENT
>>>>>>> main

    IDENTIFIER        shift, and go to state 4
    KEYWORD_IF        shift, and go to state 5
    KEYWORD_IMPORT    shift, and go to state 6
    KEYWORD_PASS      shift, and go to state 7
    KEYWORD_BREAK     shift, and go to state 8
    KEYWORD_RAISE     shift, and go to state 9
    KEYWORD_CLASS     shift, and go to state 10
    KEYWORD_RETURN    shift, and go to state 11
    KEYWORD_CONTINUE  shift, and go to state 12
    KEYWORD_FOR       shift, and go to state 13
    KEYWORD_TRY       shift, and go to state 14
    KEYWORD_DEF       shift, and go to state 15
    KEYWORD_FROM      shift, and go to state 16
    KEYWORD_NONLOCAL  shift, and go to state 17
    KEYWORD_WHILE     shift, and go to state 18
    KEYWORD_ASSERT    shift, and go to state 19
    KEYWORD_DEL       shift, and go to state 20
    KEYWORD_GLOBAL    shift, and go to state 21
    KEYWORD_WITH      shift, and go to state 22
    KEYWORD_YIELD     shift, and go to state 23
    COMMENT           shift, and go to state 24
    MULTILINECOMMENT  shift, and go to state 25
    NEWLINE           shift, and go to state 26
    KEYWORD_MATCH     shift, and go to state 27

<<<<<<< HEAD
    statements                 go to state 255
=======
    statements                 go to state 231
>>>>>>> main
    statement                  go to state 29
    simple_statement           go to state 30
    compound_statement         go to state 31
    import_statments           go to state 32
    import_statment            go to state 33
    assignment                 go to state 34
    del_statment               go to state 35
    return_statement           go to state 36
    yield_statement            go to state 37
    assert_statement           go to state 38
    raise_statement            go to state 39
    global_statement           go to state 40
    nonlocal_statement         go to state 41
    match_statement            go to state 42
    try_statement              go to state 43
    try                        go to state 44
    with_statment              go to state 45
    class                      go to state 46
    class_with_inheritance     go to state 47
    class_without_inheritance  go to state 48
    function_call              go to state 49
    function                   go to state 50
    conditional_statement      go to state 51
    if_statement               go to state 52
    for_statement              go to state 53
    while_statement            go to state 54


<<<<<<< HEAD
<<<<<<< HEAD
state 226
=======
state 221
>>>>>>> main

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON block
  119 args: args . expression COMMA
  120     | args . expression

    IDENTIFIER       shift, and go to state 4
    LIST             shift, and go to state 57
    LITERALSTRING    shift, and go to state 58
    KEYWORD_FALSE    shift, and go to state 59
    KEYWORD_TRUE     shift, and go to state 60
    KEYWORD_NONE     shift, and go to state 61
    MINUS            shift, and go to state 63
    LEFT_PARENTHES   shift, and go to state 79
    RIGHT_PARENTHES  shift, and go to state 256
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    TUPLE            shift, and go to state 67
    '|'              shift, and go to state 68

<<<<<<< HEAD
    expression         go to state 197
=======
    expression         go to state 194
>>>>>>> main
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72


<<<<<<< HEAD
state 227

   36 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER .
   39                | KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER . KEYWORD_AS IDENTIFIER
=======
state 222
=======
state 203

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON block
  106 args: args . expression COMMA
  107     | args . expression

    IDENTIFIER       shift, and go to state 57
    LIST             shift, and go to state 58
    LITERALSTRING    shift, and go to state 59
    KEYWORD_NONE     shift, and go to state 62
    RIGHT_PARENTHES  shift, and go to state 232
    INTEGER          shift, and go to state 65
    FLOAT            shift, and go to state 66
    '-'              shift, and go to state 67
    '|'              shift, and go to state 68
    '('              shift, and go to state 69

    expression         go to state 176
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 204
>>>>>>> main

   36 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER .
   39                | KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER . KEYWORD_AS IDENTIFIER

    KEYWORD_AS  shift, and go to state 233

    $default  reduce using rule 36 (import_statment)


state 205

   37 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT MULTIPLY .

    $default  reduce using rule 37 (import_statment)


state 206

   70 global_nonlocal_targets: IDENTIFIER COMMA global_nonlocal_targets .

    $default  reduce using rule 70 (global_nonlocal_targets)


state 207

  144 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 234


state 208

  143 while_statement: KEYWORD_WHILE logical_expression COLON block .

    $default  reduce using rule 143 (while_statement)


state 209

   64 assert_statement: KEYWORD_ASSERT logical_expression COMMA LITERALSTRING .

    $default  reduce using rule 64 (assert_statement)


state 210

   87 with_statment: KEYWORD_WITH with_stmt COLON block .

    $default  reduce using rule 87 (with_statment)


state 211

   89 with_stmt: with_stmt COMMA function_call . KEYWORD_AS IDENTIFIER

    KEYWORD_AS  shift, and go to state 235


state 212

   88 with_stmt: function_call KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 88 (with_stmt)


state 213

   72 match_block: NEWLINE . INDENT cases DEDENT

    INDENT  shift, and go to state 236


state 214

   71 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block .

    $default  reduce using rule 71 (match_statement)


state 215

   82 except: KEYWORD_EXCEPT COLON block .

    $default  reduce using rule 82 (except)


state 216

   83 except: KEYWORD_EXCEPT member_expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 237


state 217

   84 finally: KEYWORD_FINALLY COLON block .

    $default  reduce using rule 84 (finally)


state 218

   80 try_statement: try except_statements else_statement finally .

    $default  reduce using rule 80 (try_statement)


state 219

  134 else_statement: KEYWORD_ELSE COLON block .

    $default  reduce using rule 134 (else_statement)


state 220

  120 logical_expression: logical_expression . KEYWORD_AND logical_expression
  121                   | logical_expression . KEYWORD_OR logical_expression
  136 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 138
    KEYWORD_OR       shift, and go to state 139
    RIGHT_PARENTHES  shift, and go to state 238


state 221

  135 elif_statement: KEYWORD_ELSE_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 239


state 222

  106 args: args expression COMMA .

    $default  reduce using rule 106 (args)


state 223

  133 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 240


state 224

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON class_block

    COLON  shift, and go to state 241


state 225

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT . class_block DEDENT

    NEWLINE  shift, and go to state 242

    class_block  go to state 243


state 226

  138 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 244


state 227

  137 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 245


state 228

<<<<<<< HEAD
   96 with_statment: KEYWORD_WITH with_stmt COLON block .
>>>>>>> main

    KEYWORD_AS  shift, and go to state 257

    $default  reduce using rule 36 (import_statment)
=======
  140 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 246
>>>>>>> main


state 229

<<<<<<< HEAD
   37 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT '*' .

    $default  reduce using rule 37 (import_statment)
=======
  112 member_expression: member_expression function_call .
  141 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . COLON block
  142              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . '.' IDENTIFIER COLON block

    COLON  shift, and go to state 247
    '.'    shift, and go to state 248

    COLON     [reduce using rule 112 (member_expression)]
    $default  reduce using rule 112 (member_expression)
>>>>>>> main


state 230

<<<<<<< HEAD
   82 global_nonlocal_targets: IDENTIFIER COMMA global_nonlocal_targets .

    $default  reduce using rule 82 (global_nonlocal_targets)
=======
  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN . function_call COLON block

    IDENTIFIER  shift, and go to state 77

    function_call  go to state 249
>>>>>>> main


state 231

<<<<<<< HEAD
  156 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 258


state 232

  155 while_statement: KEYWORD_WHILE logical_expression COLON block .

    $default  reduce using rule 155 (while_statement)


state 233

   76 assert_statement: KEYWORD_ASSERT logical_expression COMMA LITERALSTRING .

    $default  reduce using rule 76 (assert_statement)


state 234

  100 with_statment: KEYWORD_WITH with_stmt COLON block .

<<<<<<< HEAD
    $default  reduce using rule 100 (with_statment)
=======
    NEWLINE  shift, and go to state 155

    block  go to state 255
>>>>>>> main


state 235

  102 with_stmt: with_stmt COMMA function_call . KEYWORD_AS IDENTIFIER

    KEYWORD_AS  shift, and go to state 259


state 236

  101 with_stmt: function_call KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 101 (with_stmt)


<<<<<<< HEAD
state 236

   84 match_block: NEWLINE . INDENT cases DEDENT

    INDENT  shift, and go to state 260


state 237

   83 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block .

    $default  reduce using rule 83 (match_statement)
=======
state 237

  142 else_statement: KEYWORD_ELSE COLON block .

    $default  reduce using rule 142 (else_statement)
>>>>>>> main


state 238

<<<<<<< HEAD
   94 except: KEYWORD_EXCEPT COLON block .

    $default  reduce using rule 94 (except)
=======
  128 logical_expression: logical_expression . KEYWORD_AND logical_expression
  129                   | logical_expression . KEYWORD_OR logical_expression
  144 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 146
    KEYWORD_OR       shift, and go to state 147
    RIGHT_PARENTHES  shift, and go to state 256


state 239

  143 elif_statement: KEYWORD_ELSE_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 257
>>>>>>> main


state 240

   96 except: KEYWORD_EXCEPT member_expression KEYWORD_AS . IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 261


state 241

<<<<<<< HEAD
   95 except: KEYWORD_EXCEPT member_expression COLON . block

    NEWLINE  shift, and go to state 158
=======
  141 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 258


state 242

  101 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON NEWLINE INDENT class_block DEDENT

    COLON  shift, and go to state 259


state 243

  106 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT . class_block DEDENT

    $default  reduce using rule 102 (class_block)

    class_block  go to state 260


state 244

  146 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 261


state 245

  145 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 155
>>>>>>> main

    block  go to state 262


<<<<<<< HEAD
state 241

   97 finally: KEYWORD_FINALLY COLON block .

    $default  reduce using rule 97 (finally)


state 242

   92 try_statement: try except_statements else_statement finally .

    $default  reduce using rule 92 (try_statement)


state 243

  146 else_statement: KEYWORD_ELSE COLON block .

    $default  reduce using rule 146 (else_statement)


state 244

  134 logical_expression: logical_expression . KEYWORD_AND logical_expression
  135                   | logical_expression . KEYWORD_OR logical_expression
  148 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 148
    KEYWORD_OR       shift, and go to state 149
    RIGHT_PARENTHES  shift, and go to state 263


state 245

  147 elif_statement: KEYWORD_ELSE_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 264


state 246

  119 args: args expression COMMA .

    $default  reduce using rule 119 (args)
=======
state 246

  148 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 263
>>>>>>> main


state 247

<<<<<<< HEAD
  145 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block
=======
  120 member_expression: member_expression function_call .
  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . COLON block
  150              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . '.' IDENTIFIER COLON block
>>>>>>> main

    NEWLINE  shift, and go to state 158

    block  go to state 265

    COLON     [reduce using rule 120 (member_expression)]
    $default  reduce using rule 120 (member_expression)


state 248

<<<<<<< HEAD
  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON class_block
=======
  147 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN . function_call COLON block
>>>>>>> main

    COLON  shift, and go to state 266


state 249

  106 class_block: NEWLINE INDENT . class_body DEDENT

    $default  reduce using rule 107 (class_body)

    class_body  go to state 267


state 250

  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 268


state 251

  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 269


state 252

  152 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 270


state 253

  125 member_expression: member_expression function_call .
  153 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . COLON block
  154              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . '.' IDENTIFIER COLON block

    COLON  shift, and go to state 271
    '.'    shift, and go to state 272

    COLON     [reduce using rule 125 (member_expression)]
    $default  reduce using rule 125 (member_expression)


state 254

  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN . function_call COLON block

    IDENTIFIER  shift, and go to state 76

    function_call  go to state 273


state 255

    4 statements: statements . statement
    6           | statements . NEWLINE
  117 block: NEWLINE INDENT statements . DEDENT
=======
    4 statements: statements . statement
    6           | statements . NEWLINE
  104 block: NEWLINE INDENT statements . DEDENT
>>>>>>> main

    IDENTIFIER        shift, and go to state 4
    KEYWORD_IF        shift, and go to state 5
    KEYWORD_IMPORT    shift, and go to state 6
    KEYWORD_PASS      shift, and go to state 7
    KEYWORD_BREAK     shift, and go to state 8
    KEYWORD_RAISE     shift, and go to state 9
    KEYWORD_CLASS     shift, and go to state 10
    KEYWORD_RETURN    shift, and go to state 11
    KEYWORD_CONTINUE  shift, and go to state 12
    KEYWORD_FOR       shift, and go to state 13
    KEYWORD_TRY       shift, and go to state 14
    KEYWORD_DEF       shift, and go to state 15
    KEYWORD_FROM      shift, and go to state 16
    KEYWORD_NONLOCAL  shift, and go to state 17
    KEYWORD_WHILE     shift, and go to state 18
    KEYWORD_ASSERT    shift, and go to state 19
    KEYWORD_DEL       shift, and go to state 20
    KEYWORD_GLOBAL    shift, and go to state 21
    KEYWORD_WITH      shift, and go to state 22
    KEYWORD_YIELD     shift, and go to state 23
    COMMENT           shift, and go to state 24
    MULTILINECOMMENT  shift, and go to state 25
<<<<<<< HEAD
    DEDENT            shift, and go to state 274
=======
    DEDENT            shift, and go to state 250
>>>>>>> main
    NEWLINE           shift, and go to state 98
    KEYWORD_MATCH     shift, and go to state 27

    statement                  go to state 99
    simple_statement           go to state 30
    compound_statement         go to state 31
    import_statments           go to state 32
    import_statment            go to state 33
    assignment                 go to state 34
    del_statment               go to state 35
    return_statement           go to state 36
    yield_statement            go to state 37
    assert_statement           go to state 38
    raise_statement            go to state 39
    global_statement           go to state 40
    nonlocal_statement         go to state 41
    match_statement            go to state 42
    try_statement              go to state 43
    try                        go to state 44
    with_statment              go to state 45
    class                      go to state 46
    class_with_inheritance     go to state 47
    class_without_inheritance  go to state 48
    function_call              go to state 49
    function                   go to state 50
    conditional_statement      go to state 51
    if_statement               go to state 52
    for_statement              go to state 53
    while_statement            go to state 54


state 232

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 251


state 233

   39 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 252


state 234

  144 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 253


state 235

   89 with_stmt: with_stmt COMMA function_call KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 254


state 236

   72 match_block: NEWLINE INDENT . cases DEDENT

    KEYWORD_CASE  shift, and go to state 255

    cases  go to state 256
    case   go to state 257


state 237

   83 except: KEYWORD_EXCEPT member_expression COLON block .

    $default  reduce using rule 83 (except)


state 238

  136 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 258


state 239

  135 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block .

    $default  reduce using rule 135 (elif_statement)


state 240

  133 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 133 (if_statement)


state 241

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . class_block

    NEWLINE  shift, and go to state 242

    class_block  go to state 259


state 242

   93 class_block: NEWLINE . INDENT class_body DEDENT

    INDENT  shift, and go to state 260


state 243

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block . DEDENT

    DEDENT  shift, and go to state 261


state 244

  138 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block .

    $default  reduce using rule 138 (for_statement)


state 245

  137 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block .

    $default  reduce using rule 137 (for_statement)


state 246

  140 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block .

    $default  reduce using rule 140 (for_statement)


state 247

  141 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 262


state 248

  142 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' . IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 263


state 249

  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 264


<<<<<<< HEAD
state 256

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON block
=======
state 250

  104 block: NEWLINE INDENT statements DEDENT .

    $default  reduce using rule 104 (block)


state 251

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 265


state 252

<<<<<<< HEAD
  152 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 270


state 253

   98 with_stmt: with_stmt COMMA function_call KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 271


state 254

   81 match_block: NEWLINE INDENT . cases DEDENT

    KEYWORD_CASE  shift, and go to state 272

    cases  go to state 273
    case   go to state 274


state 255

   92 except: KEYWORD_EXCEPT member_expression COLON block .

    $default  reduce using rule 92 (except)


state 256

  144 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block
>>>>>>> main

    COLON  shift, and go to state 275


state 257

<<<<<<< HEAD
   39 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 276
=======
  143 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block .

    $default  reduce using rule 143 (elif_statement)
>>>>>>> main


state 258

<<<<<<< HEAD
  156 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 277
=======
  141 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 141 (if_statement)
>>>>>>> main


state 259

  102 with_stmt: with_stmt COMMA function_call KEYWORD_AS . IDENTIFIER

    IDENTIFIER  shift, and go to state 278


state 260

   84 match_block: NEWLINE INDENT . cases DEDENT

    KEYWORD_CASE  shift, and go to state 279

    cases  go to state 280
    case   go to state 281


state 261

<<<<<<< HEAD
   96 except: KEYWORD_EXCEPT member_expression KEYWORD_AS IDENTIFIER . COLON block

    COLON  shift, and go to state 282
=======
  146 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block .

    $default  reduce using rule 146 (for_statement)
>>>>>>> main


state 262

<<<<<<< HEAD
   95 except: KEYWORD_EXCEPT member_expression COLON block .

    $default  reduce using rule 95 (except)
=======
  145 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block .

    $default  reduce using rule 145 (for_statement)
>>>>>>> main


state 263

<<<<<<< HEAD
  148 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block
=======
  148 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block .

    $default  reduce using rule 148 (for_statement)


state 264

  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 281


state 265

  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' . IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 282


state 266

  147 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call . COLON block
>>>>>>> main

    COLON  shift, and go to state 283


state 264

  147 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block .

    $default  reduce using rule 147 (elif_statement)


state 265

  145 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 145 (if_statement)


state 266

  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . class_block

    NEWLINE  shift, and go to state 219

    class_block  go to state 284


state 267

  106 class_block: NEWLINE INDENT class_body . DEDENT
  108 class_body: class_body . assignment
  109           | class_body . function
  110           | class_body . NEWLINE

    IDENTIFIER   shift, and go to state 74
    KEYWORD_DEF  shift, and go to state 15
    DEDENT       shift, and go to state 285
    NEWLINE      shift, and go to state 286

    assignment         go to state 287
    function           go to state 288
    member_expression  go to state 51


state 268

  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block .

<<<<<<< HEAD
    $default  reduce using rule 150 (for_statement)
=======
    NEWLINE  shift, and go to state 155

    block  go to state 284
>>>>>>> main


state 269

<<<<<<< HEAD
  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block .

    $default  reduce using rule 149 (for_statement)
=======
   39 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 39 (import_statment)
>>>>>>> main


state 270

<<<<<<< HEAD
  152 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block .

    $default  reduce using rule 152 (for_statement)
=======
  152 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 152 (while_statement)
>>>>>>> main


state 271

  153 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 289


state 272

  154 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' . IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 290


state 273

  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 291


state 274

  117 block: NEWLINE INDENT statements DEDENT .

    $default  reduce using rule 117 (block)


state 275

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 292


state 276

=======
>>>>>>> main
   39 import_statment: KEYWORD_FROM member_expression KEYWORD_IMPORT IDENTIFIER KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 39 (import_statment)


<<<<<<< HEAD
state 277

  156 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 156 (while_statement)
=======
state 253

  144 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 144 (while_statement)


state 254

   89 with_stmt: with_stmt COMMA function_call KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 89 (with_stmt)


state 255

   75 case: KEYWORD_CASE . expression COLON block

    IDENTIFIER     shift, and go to state 57
    LIST           shift, and go to state 58
    LITERALSTRING  shift, and go to state 59
    KEYWORD_NONE   shift, and go to state 62
    INTEGER        shift, and go to state 65
    FLOAT          shift, and go to state 66
    '-'            shift, and go to state 67
    '|'            shift, and go to state 68
    '('            shift, and go to state 69

    expression         go to state 266
    number             go to state 71
    function_call      go to state 72
    member_expression  go to state 73


state 256

   72 match_block: NEWLINE INDENT cases . DEDENT
   73 cases: cases . case

    DEDENT        shift, and go to state 267
    KEYWORD_CASE  shift, and go to state 255

    case  go to state 268


state 257

   74 cases: case .

    $default  reduce using rule 74 (cases)


state 258

  136 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 269


state 259

   92 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block .

    $default  reduce using rule 92 (class_with_inheritance)


state 260

   93 class_block: NEWLINE INDENT . class_body DEDENT

    $default  reduce using rule 94 (class_body)

    class_body  go to state 270


state 261

   98 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block DEDENT .

    $default  reduce using rule 98 (class_without_inheritance)


state 262

  141 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block .

    $default  reduce using rule 141 (for_statement)


state 263

  142 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER . COLON block

    COLON  shift, and go to state 271


state 264

  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 272


state 265

  103 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block .

    $default  reduce using rule 103 (function)


state 266

   41 expression: expression . ADD expression
   42           | expression . MINUS expression
   43           | expression . MULTIPLY expression
   44           | expression . DIVIDE expression
   45           | expression . POWER expression
   46           | expression . MODULO expression
   75 case: KEYWORD_CASE expression . COLON block

    ADD       shift, and go to state 124
    MINUS     shift, and go to state 125
    MULTIPLY  shift, and go to state 126
    DIVIDE    shift, and go to state 127
    POWER     shift, and go to state 128
    MODULO    shift, and go to state 129
    COLON     shift, and go to state 273


state 267

   72 match_block: NEWLINE INDENT cases DEDENT .

    $default  reduce using rule 72 (match_block)


state 268

   73 cases: cases case .

    $default  reduce using rule 73 (cases)


state 269

  136 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 136 (elif_statement)


state 270

   93 class_block: NEWLINE INDENT class_body . DEDENT
   95 class_body: class_body . assignment
   96           | class_body . function
   97           | class_body . NEWLINE

    IDENTIFIER   shift, and go to state 274
    KEYWORD_DEF  shift, and go to state 15
    DEDENT       shift, and go to state 275
    NEWLINE      shift, and go to state 276

    assignment  go to state 277
    function    go to state 278
>>>>>>> main


state 278

<<<<<<< HEAD
  102 with_stmt: with_stmt COMMA function_call KEYWORD_AS IDENTIFIER .

    $default  reduce using rule 102 (with_stmt)
=======
  142 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 279
>>>>>>> main


state 279

<<<<<<< HEAD
   87 case: KEYWORD_CASE . expression COLON block

    IDENTIFIER      shift, and go to state 4
    LIST            shift, and go to state 57
    LITERALSTRING   shift, and go to state 58
    KEYWORD_FALSE   shift, and go to state 59
    KEYWORD_TRUE    shift, and go to state 60
    KEYWORD_NONE    shift, and go to state 61
    MINUS           shift, and go to state 63
    LEFT_PARENTHES  shift, and go to state 79
    INTEGER         shift, and go to state 65
    FLOAT           shift, and go to state 66
    TUPLE           shift, and go to state 67
    '|'             shift, and go to state 68

    expression         go to state 293
    number             go to state 70
    function_call      go to state 71
    member_expression  go to state 72
=======
  139 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block .

    $default  reduce using rule 139 (for_statement)
>>>>>>> main


<<<<<<< HEAD
=======
state 273

   75 case: KEYWORD_CASE expression COLON . block

    NEWLINE  shift, and go to state 147

    block  go to state 280


state 274

   40 assignment: IDENTIFIER . ASSIGN number

    ASSIGN  shift, and go to state 55


state 275

   93 class_block: NEWLINE INDENT class_body DEDENT .

    $default  reduce using rule 93 (class_block)


state 276

   97 class_body: class_body NEWLINE .

    $default  reduce using rule 97 (class_body)


state 277

   95 class_body: class_body assignment .

    $default  reduce using rule 95 (class_body)


state 278

   96 class_body: class_body function .

    $default  reduce using rule 96 (class_body)


state 279

  142 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block .

    $default  reduce using rule 142 (for_statement)


>>>>>>> main
state 280

<<<<<<< HEAD
   84 match_block: NEWLINE INDENT cases . DEDENT
   85 cases: cases . case

    DEDENT        shift, and go to state 294
    KEYWORD_CASE  shift, and go to state 279

    case  go to state 295


state 281

<<<<<<< HEAD
   86 cases: case .

    $default  reduce using rule 86 (cases)
=======
  149 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block .

    $default  reduce using rule 149 (for_statement)
>>>>>>> main


state 282

<<<<<<< HEAD
   96 except: KEYWORD_EXCEPT member_expression KEYWORD_AS IDENTIFIER COLON . block
=======
  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER . COLON block
>>>>>>> main

    NEWLINE  shift, and go to state 158

    block  go to state 296


state 283

<<<<<<< HEAD
  148 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 158
=======
  147 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 155
>>>>>>> main

    block  go to state 297


state 284

  105 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON class_block .

    $default  reduce using rule 105 (class_with_inheritance)


state 285

<<<<<<< HEAD
  106 class_block: NEWLINE INDENT class_body DEDENT .

    $default  reduce using rule 106 (class_block)
=======
   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   84 case: KEYWORD_CASE expression . COLON block

    ADD       shift, and go to state 134
    MINUS     shift, and go to state 135
    MULTIPLY  shift, and go to state 136
    DIVIDE    shift, and go to state 137
    POWER     shift, and go to state 138
    MODULO    shift, and go to state 139
    COLON     shift, and go to state 292
>>>>>>> main


state 286

  110 class_body: class_body NEWLINE .

    $default  reduce using rule 110 (class_body)


state 287

  108 class_body: class_body assignment .

    $default  reduce using rule 108 (class_body)


state 288

<<<<<<< HEAD
  109 class_body: class_body function .

    $default  reduce using rule 109 (class_body)
=======
  144 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 144 (elif_statement)
>>>>>>> main


state 289

  153 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block .

    $default  reduce using rule 153 (for_statement)


state 290

<<<<<<< HEAD
  154 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER . COLON block

    COLON  shift, and go to state 298
=======
  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON . block

    NEWLINE  shift, and go to state 155

    block  go to state 294
>>>>>>> main


state 291

<<<<<<< HEAD
  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 299
=======
  147 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block .

    $default  reduce using rule 147 (for_statement)
>>>>>>> main


state 292

  116 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block .

<<<<<<< HEAD
    $default  reduce using rule 116 (function)
=======
    NEWLINE  shift, and go to state 155

    block  go to state 295
>>>>>>> main


state 293

   50 expression: expression . ADD expression
   51           | expression . MINUS expression
   52           | expression . MULTIPLY expression
   53           | expression . DIVIDE expression
   54           | expression . POWER expression
   55           | expression . MODULO expression
   87 case: KEYWORD_CASE expression . COLON block

    ADD       shift, and go to state 136
    MINUS     shift, and go to state 137
    MULTIPLY  shift, and go to state 138
    DIVIDE    shift, and go to state 139
    POWER     shift, and go to state 140
    MODULO    shift, and go to state 141
    COLON     shift, and go to state 300


state 294

<<<<<<< HEAD
   84 match_block: NEWLINE INDENT cases DEDENT .

    $default  reduce using rule 84 (match_block)
=======
  150 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block .

    $default  reduce using rule 150 (for_statement)
>>>>>>> main


state 295

   85 cases: cases case .

    $default  reduce using rule 85 (cases)


state 296

   96 except: KEYWORD_EXCEPT member_expression KEYWORD_AS IDENTIFIER COLON block .

    $default  reduce using rule 96 (except)


state 297

  148 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 148 (elif_statement)


state 298

  154 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 301


state 299

  151 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block .

    $default  reduce using rule 151 (for_statement)


state 300

   87 case: KEYWORD_CASE expression COLON . block

    NEWLINE  shift, and go to state 158

    block  go to state 302


state 301

  154 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block .

    $default  reduce using rule 154 (for_statement)


state 302

   87 case: KEYWORD_CASE expression COLON block .

    $default  reduce using rule 87 (case)
=======
   75 case: KEYWORD_CASE expression COLON block .

    $default  reduce using rule 75 (case)
>>>>>>> main
