Terminals unused in grammar

   WHITESPACE
   LETTER
   ALPHANUM
   LITERALCHAR
   KEYWORD_AWAIT
   KEYWORD_IMPORT
   KEYWORD_IS
   KEYWORD_LAMBDA
   KEYWORD_AS
   KEYWORD_DEL
   KEYWORD_WITH
   KEYWORD_ASYNC
   OPERATORS
   COMMENT
   ASSIGNADD
   ASSIGNMINUS
   ASSIGNMULTIPLY
   ASSIGNDIVIDE
   ASSIGNMODULO
   ASSIGNFLOORDIVISION
   ASSIGNEXPONINTIATION
   ASSIGNBITWISEAND
   ASSIGNBITWISEOR
   ASSIGNBITWISEXOR
   ASSIGNRIGHTSHIFT
   ASSIGNLEFTSHIFT
   NOT
   LEFT_BRACES
   RIGHT_BRACES
   LEFT_BRACKETS
   RIGHT_BRACKETS
   SEMICOLON
   INCREMENT
   DECREMENT
   '+'
   '*'
   '/'


State 61 conflicts: 20 reduce/reduce
State 62 conflicts: 20 reduce/reduce
State 63 conflicts: 20 reduce/reduce
State 65 conflicts: 20 reduce/reduce
State 66 conflicts: 1 shift/reduce
State 69 conflicts: 7 shift/reduce
State 79 conflicts: 1 shift/reduce
State 82 conflicts: 1 reduce/reduce
State 84 conflicts: 19 reduce/reduce
State 98 conflicts: 7 shift/reduce
State 99 conflicts: 2 shift/reduce
State 101 conflicts: 6 shift/reduce
State 102 conflicts: 6 shift/reduce
State 120 conflicts: 7 shift/reduce
State 127 conflicts: 7 shift/reduce
State 145 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce
State 150 conflicts: 6 shift/reduce
State 151 conflicts: 6 shift/reduce
State 152 conflicts: 6 shift/reduce
State 153 conflicts: 6 shift/reduce
State 154 conflicts: 6 shift/reduce
State 155 conflicts: 6 shift/reduce
State 162 conflicts: 2 shift/reduce
State 163 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: /* empty */
    2     | NEWLINE
    3     | statements prog

    4 statements: statements statement
    5           | statement
    6           | statements NEWLINE

    7 statement: compound_statement
    8          | simple_statement

    9 simple_statement: assignment
   10                 | return_statement
   11                 | yield_statement
   12                 | assert_statement
   13                 | raise_statement
   14                 | global_statement
   15                 | nonlocal_statement
   16                 | KEYWORD_PASS
   17                 | KEYWORD_BREAK
   18                 | KEYWORD_CONTINUE

   19 compound_statement: function
   20                   | conditional_statement
   21                   | class
   22                   | for_statement
   23                   | while_statement
   24                   | match_statement
   25                   | try_statement

   26 assignment: member_expression ASSIGN expression

   27 expression: expression ADD expression
   28           | expression MINUS expression
   29           | expression MULTIPLY expression
   30           | expression DIVIDE expression
   31           | expression POWER expression
   32           | expression MODULO expression
   33           | '|' expression
   34           | '(' expression ')'
   35           | '-' expression
   36           | number
   37           | IDENTIFIER
   38           | function_call
   39           | LITERALSTRING

   40 number: INTEGER
   41       | FLOAT

   42 return_statement: KEYWORD_RETURN member_expression
   43                 | KEYWORD_RETURN expression
   44                 | KEYWORD_RETURN KEYWORD_TRUE
   45                 | KEYWORD_RETURN KEYWORD_FALSE
   46                 | KEYWORD_RETURN KEYWORD_NONE
   47                 | KEYWORD_RETURN logical_expression

   48 yield_statement: KEYWORD_YIELD member_expression
   49                | KEYWORD_YIELD expression

   50 assert_statement: KEYWORD_ASSERT logical_expression
   51                 | KEYWORD_ASSERT logical_expression COMMA LITERALSTRING

   52 raise_statement: KEYWORD_RAISE function_call
   53                | KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER

   54 global_statement: KEYWORD_GLOBAL global_nonlocal_targets

   55 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets

   56 global_nonlocal_targets: IDENTIFIER
   57                        | IDENTIFIER COMMA global_nonlocal_targets

   58 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block

   59 match_block: NEWLINE INDENT cases DEDENT

   60 cases: cases case
   61      | case

   62 case: KEYWORD_CASE expression COLON block

   63 try_statement: try finally
   64              | try except_statements
   65              | try except_statements finally
   66              | try except_statements else_statement
   67              | try except_statements else_statement finally

   68 try: KEYWORD_TRY COLON block

   69 except: KEYWORD_EXCEPT COLON block
   70       | KEYWORD_EXCEPT member_expression COLON block

   71 finally: KEYWORD_FINALLY COLON block

   72 except_statements: except_statements except
   73                  | except

   74 class: class_with_inheritance
   75      | class_without_inheritance

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT

   77 class_block: /* empty */
   78            | class_block assignment
   79            | class_block function
   80            | class_block NEWLINE

   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block DEDENT

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block

   83 block: NEWLINE INDENT statements DEDENT

   84 args: /* empty */
   85     | args expression COMMA
   86     | args expression
   87     | expression COMMA
   88     | expression

   89 member_expression: IDENTIFIER
   90                  | member_expression IDENTIFIER

   91 conditional_statement: if_statement elif_else

   92 elif_else: /* empty */
   93          | elif_stmts else_statement
   94          | elif_stmts
   95          | else_statement

   96 elif_stmts: elif_statement
   97           | elif_stmts elif_statement

   98 if_statement: KEYWORD_IF logical_expression COLON block
   99             | KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

  100 else_statement: KEYWORD_ELSE COLON block

  101 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block
  102               | KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

  103 logical_expression: expression
  104                   | expression GREATEROREQUAL expression
  105                   | expression GREATERTHAN expression
  106                   | expression LESSOREQUAL expression
  107                   | expression LESSTHAN expression
  108                   | expression EQUAL expression
  109                   | expression NOTEQUAL expression
  110                   | logical_expression KEYWORD_AND logical_expression
  111                   | logical_expression KEYWORD_OR logical_expression
  112                   | KEYWORD_NOT logical_expression
  113                   | KEYWORD_TRUE
  114                   | KEYWORD_FALSE

  115 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES

  118 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block
  119              | KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block
  120              | KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  121              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block
  122              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  123              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

  124 while_statement: KEYWORD_WHILE logical_expression COLON block
  125                | KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block


Terminals, with rules where they appear

$end (0) 0
'(' (40) 34
')' (41) 34
'*' (42)
'+' (43)
'-' (45) 35
'.' (46) 123
'/' (47)
'|' (124) 33
error (256)
WHITESPACE (258)
LETTER (259)
ALPHANUM (260)
IDENTIFIER (261) 37 53 56 57 58 76 81 82 89 90 115 116 117 118 119
    121 122 123
LIST (262) 119
LITERALSTRING (263) 39 51
LITERALCHAR (264)
KEYWORD_FALSE (265) 45 114
KEYWORD_TRUE (266) 44 113
KEYWORD_AWAIT (267)
KEYWORD_IF (268) 98 99
KEYWORD_ELSE (269) 100
KEYWORD_ELSE_IF (270) 101 102
KEYWORD_IMPORT (271)
KEYWORD_PASS (272) 16
KEYWORD_NONE (273) 46
KEYWORD_BREAK (274) 17
KEYWORD_EXCEPT (275) 69 70
KEYWORD_IN (276) 118 119 120 121 122 123
KEYWORD_RAISE (277) 52 53
KEYWORD_CLASS (278) 76 81
KEYWORD_FINALLY (279) 71
KEYWORD_IS (280)
KEYWORD_RETURN (281) 42 43 44 45 46 47
KEYWORD_AND (282) 110
KEYWORD_CONTINUE (283) 18
KEYWORD_FOR (284) 118 119 120 121 122 123
KEYWORD_LAMBDA (285)
KEYWORD_TRY (286) 68
KEYWORD_AS (287)
KEYWORD_DEF (288) 82
KEYWORD_FROM (289) 53
KEYWORD_NONLOCAL (290) 55
KEYWORD_WHILE (291) 124 125
KEYWORD_ASSERT (292) 50 51
KEYWORD_DEL (293)
KEYWORD_GLOBAL (294) 54
KEYWORD_NOT (295) 112
KEYWORD_WITH (296)
KEYWORD_ASYNC (297)
KEYWORD_OR (298) 111
KEYWORD_YIELD (299) 48 49
OPERATORS (300)
COMMENT (301)
ADD (302) 27
MINUS (303) 28
MULTIPLY (304) 29
DIVIDE (305) 30
POWER (306) 31
MODULO (307) 32
ASSIGN (308) 26
ASSIGNADD (309)
ASSIGNMINUS (310)
ASSIGNMULTIPLY (311)
ASSIGNDIVIDE (312)
ASSIGNMODULO (313)
ASSIGNFLOORDIVISION (314)
ASSIGNEXPONINTIATION (315)
ASSIGNBITWISEAND (316)
ASSIGNBITWISEOR (317)
ASSIGNBITWISEXOR (318)
ASSIGNRIGHTSHIFT (319)
ASSIGNLEFTSHIFT (320)
EQUAL (321) 108
NOT (322)
NOTEQUAL (323) 109
GREATERTHAN (324) 105
GREATEROREQUAL (325) 104
LESSTHAN (326) 107
LESSOREQUAL (327) 106
LEFT_PARENTHES (328) 76 82 99 102 115 116 117 120 125
RIGHT_PARENTHES (329) 76 82 99 102 115 116 117 120 125
LEFT_BRACES (330)
RIGHT_BRACES (331)
LEFT_BRACKETS (332)
RIGHT_BRACKETS (333)
COLON (334) 58 62 68 69 70 71 76 81 82 98 99 100 101 102 118 119 120
    121 122 123 124 125
COMMA (335) 51 57 85 87
SEMICOLON (336)
INCREMENT (337)
DECREMENT (338)
INTEGER (339) 40
FLOAT (340) 41
DEDENT (341) 59 76 81 83
INDENT (342) 59 76 81 83
NEWLINE (343) 2 6 59 76 80 81 83
KEYWORD_MATCH (344) 58
KEYWORD_CASE (345) 62
UMINUS (346)


Nonterminals, with rules where they appear

$accept (100)
    on left: 0
prog (101)
    on left: 1 2 3, on right: 0 3
statements (102)
    on left: 4 5 6, on right: 3 4 6 83
statement (103)
    on left: 7 8, on right: 4 5
simple_statement (104)
    on left: 9 10 11 12 13 14 15 16 17 18, on right: 8
compound_statement (105)
    on left: 19 20 21 22 23 24 25, on right: 7
assignment (106)
    on left: 26, on right: 9 78
expression (107)
    on left: 27 28 29 30 31 32 33 34 35 36 37 38 39, on right: 26 27
    28 29 30 31 32 33 34 35 43 49 62 85 86 87 88 103 104 105 106 107
    108 109
number (108)
    on left: 40 41, on right: 36 116
return_statement (109)
    on left: 42 43 44 45 46 47, on right: 10
yield_statement (110)
    on left: 48 49, on right: 11
assert_statement (111)
    on left: 50 51, on right: 12
raise_statement (112)
    on left: 52 53, on right: 13
global_statement (113)
    on left: 54, on right: 14
nonlocal_statement (114)
    on left: 55, on right: 15
global_nonlocal_targets (115)
    on left: 56 57, on right: 54 55 57
match_statement (116)
    on left: 58, on right: 24
match_block (117)
    on left: 59, on right: 58
cases (118)
    on left: 60 61, on right: 59 60
case (119)
    on left: 62, on right: 60 61
try_statement (120)
    on left: 63 64 65 66 67, on right: 25
try (121)
    on left: 68, on right: 63 64 65 66 67
except (122)
    on left: 69 70, on right: 72 73
finally (123)
    on left: 71, on right: 63 65 67
except_statements (124)
    on left: 72 73, on right: 64 65 66 67 72
class (125)
    on left: 74 75, on right: 21
class_with_inheritance (126)
    on left: 76, on right: 74
class_block (127)
    on left: 77 78 79 80, on right: 76 78 79 80 81
class_without_inheritance (128)
    on left: 81, on right: 75
function (129)
    on left: 82, on right: 19 79
block (130)
    on left: 83, on right: 62 68 69 70 71 82 98 99 100 101 102 118
    119 120 121 122 123 124 125
args (131)
    on left: 84 85 86 87 88, on right: 76 82 85 86 115 120
member_expression (132)
    on left: 89 90, on right: 26 42 48 70 90 121 122 123
conditional_statement (133)
    on left: 91, on right: 20
elif_else (134)
    on left: 92 93 94 95, on right: 91
elif_stmts (135)
    on left: 96 97, on right: 93 94 97
if_statement (136)
    on left: 98 99, on right: 91
else_statement (137)
    on left: 100, on right: 66 67 93 95
elif_statement (138)
    on left: 101 102, on right: 96 97
logical_expression (139)
    on left: 103 104 105 106 107 108 109 110 111 112 113 114, on right:
    47 50 51 98 99 101 102 110 111 112 124 125
function_call (140)
    on left: 115 116 117, on right: 38 52 53 117 118 120 122 123
for_statement (141)
    on left: 118 119 120 121 122 123, on right: 22
while_statement (142)
    on left: 124 125, on right: 23


state 0

    0 $accept: . prog $end

    IDENTIFIER        shift, and go to state 1
    KEYWORD_IF        shift, and go to state 2
    KEYWORD_PASS      shift, and go to state 3
    KEYWORD_BREAK     shift, and go to state 4
    KEYWORD_RAISE     shift, and go to state 5
    KEYWORD_CLASS     shift, and go to state 6
    KEYWORD_RETURN    shift, and go to state 7
    KEYWORD_CONTINUE  shift, and go to state 8
    KEYWORD_FOR       shift, and go to state 9
    KEYWORD_TRY       shift, and go to state 10
    KEYWORD_DEF       shift, and go to state 11
    KEYWORD_NONLOCAL  shift, and go to state 12
    KEYWORD_WHILE     shift, and go to state 13
    KEYWORD_ASSERT    shift, and go to state 14
    KEYWORD_GLOBAL    shift, and go to state 15
    KEYWORD_YIELD     shift, and go to state 16
    NEWLINE           shift, and go to state 17
    KEYWORD_MATCH     shift, and go to state 18

    $default  reduce using rule 1 (prog)

    prog                       go to state 19
    statements                 go to state 20
    statement                  go to state 21
    simple_statement           go to state 22
    compound_statement         go to state 23
    assignment                 go to state 24
    return_statement           go to state 25
    yield_statement            go to state 26
    assert_statement           go to state 27
    raise_statement            go to state 28
    global_statement           go to state 29
    nonlocal_statement         go to state 30
    match_statement            go to state 31
    try_statement              go to state 32
    try                        go to state 33
    class                      go to state 34
    class_with_inheritance     go to state 35
    class_without_inheritance  go to state 36
    function                   go to state 37
    member_expression          go to state 38
    conditional_statement      go to state 39
    if_statement               go to state 40
    for_statement              go to state 41
    while_statement            go to state 42


state 1

   89 member_expression: IDENTIFIER .

    $default  reduce using rule 89 (member_expression)


state 2

   98 if_statement: KEYWORD_IF . logical_expression COLON block
   99             | KEYWORD_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 43
    LITERALSTRING   shift, and go to state 44
    KEYWORD_FALSE   shift, and go to state 45
    KEYWORD_TRUE    shift, and go to state 46
    KEYWORD_NOT     shift, and go to state 47
    LEFT_PARENTHES  shift, and go to state 48
    INTEGER         shift, and go to state 49
    FLOAT           shift, and go to state 50
    '-'             shift, and go to state 51
    '|'             shift, and go to state 52
    '('             shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 56
    function_call       go to state 57


state 3

   16 simple_statement: KEYWORD_PASS .

    $default  reduce using rule 16 (simple_statement)


state 4

   17 simple_statement: KEYWORD_BREAK .

    $default  reduce using rule 17 (simple_statement)


state 5

   52 raise_statement: KEYWORD_RAISE . function_call
   53                | KEYWORD_RAISE . function_call KEYWORD_FROM IDENTIFIER

    IDENTIFIER  shift, and go to state 58

    function_call  go to state 59


state 6

   76 class_with_inheritance: KEYWORD_CLASS . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT
   81 class_without_inheritance: KEYWORD_CLASS . IDENTIFIER COLON NEWLINE INDENT class_block DEDENT

    IDENTIFIER  shift, and go to state 60


state 7

   42 return_statement: KEYWORD_RETURN . member_expression
   43                 | KEYWORD_RETURN . expression
   44                 | KEYWORD_RETURN . KEYWORD_TRUE
   45                 | KEYWORD_RETURN . KEYWORD_FALSE
   46                 | KEYWORD_RETURN . KEYWORD_NONE
   47                 | KEYWORD_RETURN . logical_expression

    IDENTIFIER     shift, and go to state 61
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 62
    KEYWORD_TRUE   shift, and go to state 63
    KEYWORD_NONE   shift, and go to state 64
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 65
    number              go to state 55
    member_expression   go to state 66
    logical_expression  go to state 67
    function_call       go to state 57


state 8

   18 simple_statement: KEYWORD_CONTINUE .

    $default  reduce using rule 18 (simple_statement)


state 9

  118 for_statement: KEYWORD_FOR . IDENTIFIER KEYWORD_IN function_call COLON block
  119              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN LIST COLON block
  120              | KEYWORD_FOR . LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block
  121              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression COLON block
  122              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call COLON block
  123              | KEYWORD_FOR . IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

    IDENTIFIER      shift, and go to state 68
    LEFT_PARENTHES  shift, and go to state 69


state 10

   68 try: KEYWORD_TRY . COLON block

    COLON  shift, and go to state 70


state 11

   82 function: KEYWORD_DEF . IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block

    IDENTIFIER  shift, and go to state 71


state 12

   55 nonlocal_statement: KEYWORD_NONLOCAL . global_nonlocal_targets

    IDENTIFIER  shift, and go to state 72

    global_nonlocal_targets  go to state 73


state 13

  124 while_statement: KEYWORD_WHILE . logical_expression COLON block
  125                | KEYWORD_WHILE . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 43
    LITERALSTRING   shift, and go to state 44
    KEYWORD_FALSE   shift, and go to state 45
    KEYWORD_TRUE    shift, and go to state 46
    KEYWORD_NOT     shift, and go to state 47
    LEFT_PARENTHES  shift, and go to state 74
    INTEGER         shift, and go to state 49
    FLOAT           shift, and go to state 50
    '-'             shift, and go to state 51
    '|'             shift, and go to state 52
    '('             shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 75
    function_call       go to state 57


state 14

   50 assert_statement: KEYWORD_ASSERT . logical_expression
   51                 | KEYWORD_ASSERT . logical_expression COMMA LITERALSTRING

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 76
    function_call       go to state 57


state 15

   54 global_statement: KEYWORD_GLOBAL . global_nonlocal_targets

    IDENTIFIER  shift, and go to state 72

    global_nonlocal_targets  go to state 77


state 16

   48 yield_statement: KEYWORD_YIELD . member_expression
   49                | KEYWORD_YIELD . expression

    IDENTIFIER     shift, and go to state 61
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression         go to state 78
    number             go to state 55
    member_expression  go to state 79
    function_call      go to state 57


state 17

    2 prog: NEWLINE .

    $default  reduce using rule 2 (prog)


state 18

   58 match_statement: KEYWORD_MATCH . IDENTIFIER COLON match_block

    IDENTIFIER  shift, and go to state 80


state 19

    0 $accept: prog . $end

    $end  shift, and go to state 81


state 20

    3 prog: statements . prog
    4 statements: statements . statement
    6           | statements . NEWLINE

    IDENTIFIER        shift, and go to state 1
    KEYWORD_IF        shift, and go to state 2
    KEYWORD_PASS      shift, and go to state 3
    KEYWORD_BREAK     shift, and go to state 4
    KEYWORD_RAISE     shift, and go to state 5
    KEYWORD_CLASS     shift, and go to state 6
    KEYWORD_RETURN    shift, and go to state 7
    KEYWORD_CONTINUE  shift, and go to state 8
    KEYWORD_FOR       shift, and go to state 9
    KEYWORD_TRY       shift, and go to state 10
    KEYWORD_DEF       shift, and go to state 11
    KEYWORD_NONLOCAL  shift, and go to state 12
    KEYWORD_WHILE     shift, and go to state 13
    KEYWORD_ASSERT    shift, and go to state 14
    KEYWORD_GLOBAL    shift, and go to state 15
    KEYWORD_YIELD     shift, and go to state 16
    NEWLINE           shift, and go to state 82
    KEYWORD_MATCH     shift, and go to state 18

    $default  reduce using rule 1 (prog)

    prog                       go to state 83
    statements                 go to state 20
    statement                  go to state 84
    simple_statement           go to state 22
    compound_statement         go to state 23
    assignment                 go to state 24
    return_statement           go to state 25
    yield_statement            go to state 26
    assert_statement           go to state 27
    raise_statement            go to state 28
    global_statement           go to state 29
    nonlocal_statement         go to state 30
    match_statement            go to state 31
    try_statement              go to state 32
    try                        go to state 33
    class                      go to state 34
    class_with_inheritance     go to state 35
    class_without_inheritance  go to state 36
    function                   go to state 37
    member_expression          go to state 38
    conditional_statement      go to state 39
    if_statement               go to state 40
    for_statement              go to state 41
    while_statement            go to state 42


state 21

    5 statements: statement .

    $default  reduce using rule 5 (statements)


state 22

    8 statement: simple_statement .

    $default  reduce using rule 8 (statement)


state 23

    7 statement: compound_statement .

    $default  reduce using rule 7 (statement)


state 24

    9 simple_statement: assignment .

    $default  reduce using rule 9 (simple_statement)


state 25

   10 simple_statement: return_statement .

    $default  reduce using rule 10 (simple_statement)


state 26

   11 simple_statement: yield_statement .

    $default  reduce using rule 11 (simple_statement)


state 27

   12 simple_statement: assert_statement .

    $default  reduce using rule 12 (simple_statement)


state 28

   13 simple_statement: raise_statement .

    $default  reduce using rule 13 (simple_statement)


state 29

   14 simple_statement: global_statement .

    $default  reduce using rule 14 (simple_statement)


state 30

   15 simple_statement: nonlocal_statement .

    $default  reduce using rule 15 (simple_statement)


state 31

   24 compound_statement: match_statement .

    $default  reduce using rule 24 (compound_statement)


state 32

   25 compound_statement: try_statement .

    $default  reduce using rule 25 (compound_statement)


state 33

   63 try_statement: try . finally
   64              | try . except_statements
   65              | try . except_statements finally
   66              | try . except_statements else_statement
   67              | try . except_statements else_statement finally

    KEYWORD_EXCEPT   shift, and go to state 85
    KEYWORD_FINALLY  shift, and go to state 86

    except             go to state 87
    finally            go to state 88
    except_statements  go to state 89


state 34

   21 compound_statement: class .

    $default  reduce using rule 21 (compound_statement)


state 35

   74 class: class_with_inheritance .

    $default  reduce using rule 74 (class)


state 36

   75 class: class_without_inheritance .

    $default  reduce using rule 75 (class)


state 37

   19 compound_statement: function .

    $default  reduce using rule 19 (compound_statement)


state 38

   26 assignment: member_expression . ASSIGN expression
   90 member_expression: member_expression . IDENTIFIER

    IDENTIFIER  shift, and go to state 90
    ASSIGN      shift, and go to state 91


state 39

   20 compound_statement: conditional_statement .

    $default  reduce using rule 20 (compound_statement)


state 40

   91 conditional_statement: if_statement . elif_else

    KEYWORD_ELSE     shift, and go to state 92
    KEYWORD_ELSE_IF  shift, and go to state 93

    $default  reduce using rule 92 (elif_else)

    elif_else       go to state 94
    elif_stmts      go to state 95
    else_statement  go to state 96
    elif_statement  go to state 97


state 41

   22 compound_statement: for_statement .

    $default  reduce using rule 22 (compound_statement)


state 42

   23 compound_statement: while_statement .

    $default  reduce using rule 23 (compound_statement)


state 43

   37 expression: IDENTIFIER .
  115 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 98

    $default  reduce using rule 37 (expression)


state 44

   39 expression: LITERALSTRING .

    $default  reduce using rule 39 (expression)


state 45

  114 logical_expression: KEYWORD_FALSE .

    $default  reduce using rule 114 (logical_expression)


state 46

  113 logical_expression: KEYWORD_TRUE .

    $default  reduce using rule 113 (logical_expression)


state 47

  112 logical_expression: KEYWORD_NOT . logical_expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 99
    function_call       go to state 57


state 48

   99 if_statement: KEYWORD_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 100
    function_call       go to state 57


state 49

   40 number: INTEGER .

    $default  reduce using rule 40 (number)


state 50

   41 number: FLOAT .

    $default  reduce using rule 41 (number)


state 51

   35 expression: '-' . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 101
    number         go to state 55
    function_call  go to state 57


state 52

   33 expression: '|' . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 102
    number         go to state 55
    function_call  go to state 57


state 53

   34 expression: '(' . expression ')'

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 103
    number         go to state 55
    function_call  go to state 57


state 54

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  103 logical_expression: expression .
  104                   | expression . GREATEROREQUAL expression
  105                   | expression . GREATERTHAN expression
  106                   | expression . LESSOREQUAL expression
  107                   | expression . LESSTHAN expression
  108                   | expression . EQUAL expression
  109                   | expression . NOTEQUAL expression

    ADD             shift, and go to state 104
    MINUS           shift, and go to state 105
    MULTIPLY        shift, and go to state 106
    DIVIDE          shift, and go to state 107
    POWER           shift, and go to state 108
    MODULO          shift, and go to state 109
    EQUAL           shift, and go to state 110
    NOTEQUAL        shift, and go to state 111
    GREATERTHAN     shift, and go to state 112
    GREATEROREQUAL  shift, and go to state 113
    LESSTHAN        shift, and go to state 114
    LESSOREQUAL     shift, and go to state 115

    $default  reduce using rule 103 (logical_expression)


state 55

   36 expression: number .

    $default  reduce using rule 36 (expression)


state 56

   98 if_statement: KEYWORD_IF logical_expression . COLON block
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117
    COLON        shift, and go to state 118


state 57

   38 expression: function_call .

    $default  reduce using rule 38 (expression)


state 58

  115 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 98


state 59

   52 raise_statement: KEYWORD_RAISE function_call .
   53                | KEYWORD_RAISE function_call . KEYWORD_FROM IDENTIFIER

    KEYWORD_FROM  shift, and go to state 119

    $default  reduce using rule 52 (raise_statement)


state 60

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT
   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER . COLON NEWLINE INDENT class_block DEDENT

    LEFT_PARENTHES  shift, and go to state 120
    COLON           shift, and go to state 121


state 61

   37 expression: IDENTIFIER .
   89 member_expression: IDENTIFIER .
  115 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 98

    $end              reduce using rule 37 (expression)
    $end              [reduce using rule 89 (member_expression)]
    IDENTIFIER        reduce using rule 37 (expression)
    IDENTIFIER        [reduce using rule 89 (member_expression)]
    KEYWORD_IF        reduce using rule 37 (expression)
    KEYWORD_IF        [reduce using rule 89 (member_expression)]
    KEYWORD_PASS      reduce using rule 37 (expression)
    KEYWORD_PASS      [reduce using rule 89 (member_expression)]
    KEYWORD_BREAK     reduce using rule 37 (expression)
    KEYWORD_BREAK     [reduce using rule 89 (member_expression)]
    KEYWORD_RAISE     reduce using rule 37 (expression)
    KEYWORD_RAISE     [reduce using rule 89 (member_expression)]
    KEYWORD_CLASS     reduce using rule 37 (expression)
    KEYWORD_CLASS     [reduce using rule 89 (member_expression)]
    KEYWORD_RETURN    reduce using rule 37 (expression)
    KEYWORD_RETURN    [reduce using rule 89 (member_expression)]
    KEYWORD_CONTINUE  reduce using rule 37 (expression)
    KEYWORD_CONTINUE  [reduce using rule 89 (member_expression)]
    KEYWORD_FOR       reduce using rule 37 (expression)
    KEYWORD_FOR       [reduce using rule 89 (member_expression)]
    KEYWORD_TRY       reduce using rule 37 (expression)
    KEYWORD_TRY       [reduce using rule 89 (member_expression)]
    KEYWORD_DEF       reduce using rule 37 (expression)
    KEYWORD_DEF       [reduce using rule 89 (member_expression)]
    KEYWORD_NONLOCAL  reduce using rule 37 (expression)
    KEYWORD_NONLOCAL  [reduce using rule 89 (member_expression)]
    KEYWORD_WHILE     reduce using rule 37 (expression)
    KEYWORD_WHILE     [reduce using rule 89 (member_expression)]
    KEYWORD_ASSERT    reduce using rule 37 (expression)
    KEYWORD_ASSERT    [reduce using rule 89 (member_expression)]
    KEYWORD_GLOBAL    reduce using rule 37 (expression)
    KEYWORD_GLOBAL    [reduce using rule 89 (member_expression)]
    KEYWORD_YIELD     reduce using rule 37 (expression)
    KEYWORD_YIELD     [reduce using rule 89 (member_expression)]
    DEDENT            reduce using rule 37 (expression)
    DEDENT            [reduce using rule 89 (member_expression)]
    NEWLINE           reduce using rule 37 (expression)
    NEWLINE           [reduce using rule 89 (member_expression)]
    KEYWORD_MATCH     reduce using rule 37 (expression)
    KEYWORD_MATCH     [reduce using rule 89 (member_expression)]
    $default          reduce using rule 37 (expression)


state 62

   45 return_statement: KEYWORD_RETURN KEYWORD_FALSE .
  114 logical_expression: KEYWORD_FALSE .

    $end              reduce using rule 45 (return_statement)
    $end              [reduce using rule 114 (logical_expression)]
    IDENTIFIER        reduce using rule 45 (return_statement)
    IDENTIFIER        [reduce using rule 114 (logical_expression)]
    KEYWORD_IF        reduce using rule 45 (return_statement)
    KEYWORD_IF        [reduce using rule 114 (logical_expression)]
    KEYWORD_PASS      reduce using rule 45 (return_statement)
    KEYWORD_PASS      [reduce using rule 114 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 45 (return_statement)
    KEYWORD_BREAK     [reduce using rule 114 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 45 (return_statement)
    KEYWORD_RAISE     [reduce using rule 114 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 45 (return_statement)
    KEYWORD_CLASS     [reduce using rule 114 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 45 (return_statement)
    KEYWORD_RETURN    [reduce using rule 114 (logical_expression)]
    KEYWORD_AND       reduce using rule 114 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 45 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 114 (logical_expression)]
    KEYWORD_FOR       reduce using rule 45 (return_statement)
    KEYWORD_FOR       [reduce using rule 114 (logical_expression)]
    KEYWORD_TRY       reduce using rule 45 (return_statement)
    KEYWORD_TRY       [reduce using rule 114 (logical_expression)]
    KEYWORD_DEF       reduce using rule 45 (return_statement)
    KEYWORD_DEF       [reduce using rule 114 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 45 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 114 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 45 (return_statement)
    KEYWORD_WHILE     [reduce using rule 114 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 45 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 114 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 45 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 114 (logical_expression)]
    KEYWORD_OR        reduce using rule 114 (logical_expression)
    KEYWORD_YIELD     reduce using rule 45 (return_statement)
    KEYWORD_YIELD     [reduce using rule 114 (logical_expression)]
    DEDENT            reduce using rule 45 (return_statement)
    DEDENT            [reduce using rule 114 (logical_expression)]
    NEWLINE           reduce using rule 45 (return_statement)
    NEWLINE           [reduce using rule 114 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 45 (return_statement)
    KEYWORD_MATCH     [reduce using rule 114 (logical_expression)]
    $default          reduce using rule 45 (return_statement)


state 63

   44 return_statement: KEYWORD_RETURN KEYWORD_TRUE .
  113 logical_expression: KEYWORD_TRUE .

    $end              reduce using rule 44 (return_statement)
    $end              [reduce using rule 113 (logical_expression)]
    IDENTIFIER        reduce using rule 44 (return_statement)
    IDENTIFIER        [reduce using rule 113 (logical_expression)]
    KEYWORD_IF        reduce using rule 44 (return_statement)
    KEYWORD_IF        [reduce using rule 113 (logical_expression)]
    KEYWORD_PASS      reduce using rule 44 (return_statement)
    KEYWORD_PASS      [reduce using rule 113 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 44 (return_statement)
    KEYWORD_BREAK     [reduce using rule 113 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 44 (return_statement)
    KEYWORD_RAISE     [reduce using rule 113 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 44 (return_statement)
    KEYWORD_CLASS     [reduce using rule 113 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 44 (return_statement)
    KEYWORD_RETURN    [reduce using rule 113 (logical_expression)]
    KEYWORD_AND       reduce using rule 113 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 44 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 113 (logical_expression)]
    KEYWORD_FOR       reduce using rule 44 (return_statement)
    KEYWORD_FOR       [reduce using rule 113 (logical_expression)]
    KEYWORD_TRY       reduce using rule 44 (return_statement)
    KEYWORD_TRY       [reduce using rule 113 (logical_expression)]
    KEYWORD_DEF       reduce using rule 44 (return_statement)
    KEYWORD_DEF       [reduce using rule 113 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 44 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 113 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 44 (return_statement)
    KEYWORD_WHILE     [reduce using rule 113 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 44 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 113 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 44 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 113 (logical_expression)]
    KEYWORD_OR        reduce using rule 113 (logical_expression)
    KEYWORD_YIELD     reduce using rule 44 (return_statement)
    KEYWORD_YIELD     [reduce using rule 113 (logical_expression)]
    DEDENT            reduce using rule 44 (return_statement)
    DEDENT            [reduce using rule 113 (logical_expression)]
    NEWLINE           reduce using rule 44 (return_statement)
    NEWLINE           [reduce using rule 113 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 44 (return_statement)
    KEYWORD_MATCH     [reduce using rule 113 (logical_expression)]
    $default          reduce using rule 44 (return_statement)


state 64

   46 return_statement: KEYWORD_RETURN KEYWORD_NONE .

    $default  reduce using rule 46 (return_statement)


state 65

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   43 return_statement: KEYWORD_RETURN expression .
  103 logical_expression: expression .
  104                   | expression . GREATEROREQUAL expression
  105                   | expression . GREATERTHAN expression
  106                   | expression . LESSOREQUAL expression
  107                   | expression . LESSTHAN expression
  108                   | expression . EQUAL expression
  109                   | expression . NOTEQUAL expression

    ADD             shift, and go to state 104
    MINUS           shift, and go to state 105
    MULTIPLY        shift, and go to state 106
    DIVIDE          shift, and go to state 107
    POWER           shift, and go to state 108
    MODULO          shift, and go to state 109
    EQUAL           shift, and go to state 110
    NOTEQUAL        shift, and go to state 111
    GREATERTHAN     shift, and go to state 112
    GREATEROREQUAL  shift, and go to state 113
    LESSTHAN        shift, and go to state 114
    LESSOREQUAL     shift, and go to state 115

    $end              reduce using rule 43 (return_statement)
    $end              [reduce using rule 103 (logical_expression)]
    IDENTIFIER        reduce using rule 43 (return_statement)
    IDENTIFIER        [reduce using rule 103 (logical_expression)]
    KEYWORD_IF        reduce using rule 43 (return_statement)
    KEYWORD_IF        [reduce using rule 103 (logical_expression)]
    KEYWORD_PASS      reduce using rule 43 (return_statement)
    KEYWORD_PASS      [reduce using rule 103 (logical_expression)]
    KEYWORD_BREAK     reduce using rule 43 (return_statement)
    KEYWORD_BREAK     [reduce using rule 103 (logical_expression)]
    KEYWORD_RAISE     reduce using rule 43 (return_statement)
    KEYWORD_RAISE     [reduce using rule 103 (logical_expression)]
    KEYWORD_CLASS     reduce using rule 43 (return_statement)
    KEYWORD_CLASS     [reduce using rule 103 (logical_expression)]
    KEYWORD_RETURN    reduce using rule 43 (return_statement)
    KEYWORD_RETURN    [reduce using rule 103 (logical_expression)]
    KEYWORD_AND       reduce using rule 103 (logical_expression)
    KEYWORD_CONTINUE  reduce using rule 43 (return_statement)
    KEYWORD_CONTINUE  [reduce using rule 103 (logical_expression)]
    KEYWORD_FOR       reduce using rule 43 (return_statement)
    KEYWORD_FOR       [reduce using rule 103 (logical_expression)]
    KEYWORD_TRY       reduce using rule 43 (return_statement)
    KEYWORD_TRY       [reduce using rule 103 (logical_expression)]
    KEYWORD_DEF       reduce using rule 43 (return_statement)
    KEYWORD_DEF       [reduce using rule 103 (logical_expression)]
    KEYWORD_NONLOCAL  reduce using rule 43 (return_statement)
    KEYWORD_NONLOCAL  [reduce using rule 103 (logical_expression)]
    KEYWORD_WHILE     reduce using rule 43 (return_statement)
    KEYWORD_WHILE     [reduce using rule 103 (logical_expression)]
    KEYWORD_ASSERT    reduce using rule 43 (return_statement)
    KEYWORD_ASSERT    [reduce using rule 103 (logical_expression)]
    KEYWORD_GLOBAL    reduce using rule 43 (return_statement)
    KEYWORD_GLOBAL    [reduce using rule 103 (logical_expression)]
    KEYWORD_OR        reduce using rule 103 (logical_expression)
    KEYWORD_YIELD     reduce using rule 43 (return_statement)
    KEYWORD_YIELD     [reduce using rule 103 (logical_expression)]
    DEDENT            reduce using rule 43 (return_statement)
    DEDENT            [reduce using rule 103 (logical_expression)]
    NEWLINE           reduce using rule 43 (return_statement)
    NEWLINE           [reduce using rule 103 (logical_expression)]
    KEYWORD_MATCH     reduce using rule 43 (return_statement)
    KEYWORD_MATCH     [reduce using rule 103 (logical_expression)]
    $default          reduce using rule 43 (return_statement)


state 66

   42 return_statement: KEYWORD_RETURN member_expression .
   90 member_expression: member_expression . IDENTIFIER

    IDENTIFIER  shift, and go to state 90

    IDENTIFIER  [reduce using rule 42 (return_statement)]
    $default    reduce using rule 42 (return_statement)


state 67

   47 return_statement: KEYWORD_RETURN logical_expression .
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117

    $default  reduce using rule 47 (return_statement)


state 68

  118 for_statement: KEYWORD_FOR IDENTIFIER . KEYWORD_IN function_call COLON block
  119              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN LIST COLON block
  121              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression COLON block
  122              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call COLON block
  123              | KEYWORD_FOR IDENTIFIER . KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block

    KEYWORD_IN  shift, and go to state 122


state 69

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES . args RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    IDENTIFIER     [reduce using rule 84 (args)]
    LITERALSTRING  [reduce using rule 84 (args)]
    INTEGER        [reduce using rule 84 (args)]
    FLOAT          [reduce using rule 84 (args)]
    '-'            [reduce using rule 84 (args)]
    '|'            [reduce using rule 84 (args)]
    '('            [reduce using rule 84 (args)]
    $default       reduce using rule 84 (args)

    expression     go to state 123
    number         go to state 55
    args           go to state 124
    function_call  go to state 57


state 70

   68 try: KEYWORD_TRY COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 126


state 71

   82 function: KEYWORD_DEF IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES COLON block

    LEFT_PARENTHES  shift, and go to state 127


state 72

   56 global_nonlocal_targets: IDENTIFIER .
   57                        | IDENTIFIER . COMMA global_nonlocal_targets

    COMMA  shift, and go to state 128

    $default  reduce using rule 56 (global_nonlocal_targets)


state 73

   55 nonlocal_statement: KEYWORD_NONLOCAL global_nonlocal_targets .

    $default  reduce using rule 55 (nonlocal_statement)


state 74

  125 while_statement: KEYWORD_WHILE LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 129
    function_call       go to state 57


state 75

  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression
  124 while_statement: KEYWORD_WHILE logical_expression . COLON block

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117
    COLON        shift, and go to state 130


state 76

   50 assert_statement: KEYWORD_ASSERT logical_expression .
   51                 | KEYWORD_ASSERT logical_expression . COMMA LITERALSTRING
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117
    COMMA        shift, and go to state 131

    $default  reduce using rule 50 (assert_statement)


state 77

   54 global_statement: KEYWORD_GLOBAL global_nonlocal_targets .

    $default  reduce using rule 54 (global_statement)


state 78

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   49 yield_statement: KEYWORD_YIELD expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 49 (yield_statement)


state 79

   48 yield_statement: KEYWORD_YIELD member_expression .
   90 member_expression: member_expression . IDENTIFIER

    IDENTIFIER  shift, and go to state 90

    IDENTIFIER  [reduce using rule 48 (yield_statement)]
    $default    reduce using rule 48 (yield_statement)


state 80

   58 match_statement: KEYWORD_MATCH IDENTIFIER . COLON match_block

    COLON  shift, and go to state 132


state 81

    0 $accept: prog $end .

    $default  accept


state 82

    2 prog: NEWLINE .
    6 statements: statements NEWLINE .

    $end      reduce using rule 2 (prog)
    $end      [reduce using rule 6 (statements)]
    $default  reduce using rule 6 (statements)


state 83

    3 prog: statements prog .

    $default  reduce using rule 3 (prog)


state 84

    4 statements: statements statement .
    5           | statement .

    $end              reduce using rule 4 (statements)
    $end              [reduce using rule 5 (statements)]
    IDENTIFIER        reduce using rule 4 (statements)
    IDENTIFIER        [reduce using rule 5 (statements)]
    KEYWORD_IF        reduce using rule 4 (statements)
    KEYWORD_IF        [reduce using rule 5 (statements)]
    KEYWORD_PASS      reduce using rule 4 (statements)
    KEYWORD_PASS      [reduce using rule 5 (statements)]
    KEYWORD_BREAK     reduce using rule 4 (statements)
    KEYWORD_BREAK     [reduce using rule 5 (statements)]
    KEYWORD_RAISE     reduce using rule 4 (statements)
    KEYWORD_RAISE     [reduce using rule 5 (statements)]
    KEYWORD_CLASS     reduce using rule 4 (statements)
    KEYWORD_CLASS     [reduce using rule 5 (statements)]
    KEYWORD_RETURN    reduce using rule 4 (statements)
    KEYWORD_RETURN    [reduce using rule 5 (statements)]
    KEYWORD_CONTINUE  reduce using rule 4 (statements)
    KEYWORD_CONTINUE  [reduce using rule 5 (statements)]
    KEYWORD_FOR       reduce using rule 4 (statements)
    KEYWORD_FOR       [reduce using rule 5 (statements)]
    KEYWORD_TRY       reduce using rule 4 (statements)
    KEYWORD_TRY       [reduce using rule 5 (statements)]
    KEYWORD_DEF       reduce using rule 4 (statements)
    KEYWORD_DEF       [reduce using rule 5 (statements)]
    KEYWORD_NONLOCAL  reduce using rule 4 (statements)
    KEYWORD_NONLOCAL  [reduce using rule 5 (statements)]
    KEYWORD_WHILE     reduce using rule 4 (statements)
    KEYWORD_WHILE     [reduce using rule 5 (statements)]
    KEYWORD_ASSERT    reduce using rule 4 (statements)
    KEYWORD_ASSERT    [reduce using rule 5 (statements)]
    KEYWORD_GLOBAL    reduce using rule 4 (statements)
    KEYWORD_GLOBAL    [reduce using rule 5 (statements)]
    KEYWORD_YIELD     reduce using rule 4 (statements)
    KEYWORD_YIELD     [reduce using rule 5 (statements)]
    NEWLINE           reduce using rule 4 (statements)
    NEWLINE           [reduce using rule 5 (statements)]
    KEYWORD_MATCH     reduce using rule 4 (statements)
    KEYWORD_MATCH     [reduce using rule 5 (statements)]
    $default          reduce using rule 4 (statements)


state 85

   69 except: KEYWORD_EXCEPT . COLON block
   70       | KEYWORD_EXCEPT . member_expression COLON block

    IDENTIFIER  shift, and go to state 1
    COLON       shift, and go to state 133

    member_expression  go to state 134


state 86

   71 finally: KEYWORD_FINALLY . COLON block

    COLON  shift, and go to state 135


state 87

   73 except_statements: except .

    $default  reduce using rule 73 (except_statements)


state 88

   63 try_statement: try finally .

    $default  reduce using rule 63 (try_statement)


state 89

   64 try_statement: try except_statements .
   65              | try except_statements . finally
   66              | try except_statements . else_statement
   67              | try except_statements . else_statement finally
   72 except_statements: except_statements . except

    KEYWORD_ELSE     shift, and go to state 92
    KEYWORD_EXCEPT   shift, and go to state 85
    KEYWORD_FINALLY  shift, and go to state 86

    $default  reduce using rule 64 (try_statement)

    except          go to state 136
    finally         go to state 137
    else_statement  go to state 138


state 90

   90 member_expression: member_expression IDENTIFIER .

    $default  reduce using rule 90 (member_expression)


state 91

   26 assignment: member_expression ASSIGN . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 139
    number         go to state 55
    function_call  go to state 57


state 92

  100 else_statement: KEYWORD_ELSE . COLON block

    COLON  shift, and go to state 140


state 93

  101 elif_statement: KEYWORD_ELSE_IF . logical_expression COLON block
  102               | KEYWORD_ELSE_IF . LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER      shift, and go to state 43
    LITERALSTRING   shift, and go to state 44
    KEYWORD_FALSE   shift, and go to state 45
    KEYWORD_TRUE    shift, and go to state 46
    KEYWORD_NOT     shift, and go to state 47
    LEFT_PARENTHES  shift, and go to state 141
    INTEGER         shift, and go to state 49
    FLOAT           shift, and go to state 50
    '-'             shift, and go to state 51
    '|'             shift, and go to state 52
    '('             shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 142
    function_call       go to state 57


state 94

   91 conditional_statement: if_statement elif_else .

    $default  reduce using rule 91 (conditional_statement)


state 95

   93 elif_else: elif_stmts . else_statement
   94          | elif_stmts .
   97 elif_stmts: elif_stmts . elif_statement

    KEYWORD_ELSE     shift, and go to state 92
    KEYWORD_ELSE_IF  shift, and go to state 93

    $default  reduce using rule 94 (elif_else)

    else_statement  go to state 143
    elif_statement  go to state 144


state 96

   95 elif_else: else_statement .

    $default  reduce using rule 95 (elif_else)


state 97

   96 elif_stmts: elif_statement .

    $default  reduce using rule 96 (elif_stmts)


state 98

  115 function_call: IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES
  116              | IDENTIFIER LEFT_PARENTHES . number RIGHT_PARENTHES
  117              | IDENTIFIER LEFT_PARENTHES . function_call RIGHT_PARENTHES

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    IDENTIFIER     [reduce using rule 84 (args)]
    LITERALSTRING  [reduce using rule 84 (args)]
    INTEGER        [reduce using rule 84 (args)]
    FLOAT          [reduce using rule 84 (args)]
    '-'            [reduce using rule 84 (args)]
    '|'            [reduce using rule 84 (args)]
    '('            [reduce using rule 84 (args)]
    $default       reduce using rule 84 (args)

    expression     go to state 123
    number         go to state 145
    args           go to state 146
    function_call  go to state 147


state 99

  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression
  112                   | KEYWORD_NOT logical_expression .

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117

    KEYWORD_AND  [reduce using rule 112 (logical_expression)]
    KEYWORD_OR   [reduce using rule 112 (logical_expression)]
    $default     reduce using rule 112 (logical_expression)


state 100

   99 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND      shift, and go to state 116
    KEYWORD_OR       shift, and go to state 117
    RIGHT_PARENTHES  shift, and go to state 148


state 101

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   35           | '-' expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 35 (expression)]
    MINUS     [reduce using rule 35 (expression)]
    MULTIPLY  [reduce using rule 35 (expression)]
    DIVIDE    [reduce using rule 35 (expression)]
    POWER     [reduce using rule 35 (expression)]
    MODULO    [reduce using rule 35 (expression)]
    $default  reduce using rule 35 (expression)


state 102

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   33           | '|' expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 33 (expression)]
    MINUS     [reduce using rule 33 (expression)]
    MULTIPLY  [reduce using rule 33 (expression)]
    DIVIDE    [reduce using rule 33 (expression)]
    POWER     [reduce using rule 33 (expression)]
    MODULO    [reduce using rule 33 (expression)]
    $default  reduce using rule 33 (expression)


state 103

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   34           | '(' expression . ')'

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109
    ')'       shift, and go to state 149


state 104

   27 expression: expression ADD . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 150
    number         go to state 55
    function_call  go to state 57


state 105

   28 expression: expression MINUS . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 151
    number         go to state 55
    function_call  go to state 57


state 106

   29 expression: expression MULTIPLY . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 152
    number         go to state 55
    function_call  go to state 57


state 107

   30 expression: expression DIVIDE . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 153
    number         go to state 55
    function_call  go to state 57


state 108

   31 expression: expression POWER . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 154
    number         go to state 55
    function_call  go to state 57


state 109

   32 expression: expression MODULO . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 155
    number         go to state 55
    function_call  go to state 57


state 110

  108 logical_expression: expression EQUAL . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 156
    number         go to state 55
    function_call  go to state 57


state 111

  109 logical_expression: expression NOTEQUAL . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 157
    number         go to state 55
    function_call  go to state 57


state 112

  105 logical_expression: expression GREATERTHAN . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 158
    number         go to state 55
    function_call  go to state 57


state 113

  104 logical_expression: expression GREATEROREQUAL . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 159
    number         go to state 55
    function_call  go to state 57


state 114

  107 logical_expression: expression LESSTHAN . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 160
    number         go to state 55
    function_call  go to state 57


state 115

  106 logical_expression: expression LESSOREQUAL . expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 161
    number         go to state 55
    function_call  go to state 57


state 116

  110 logical_expression: logical_expression KEYWORD_AND . logical_expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 162
    function_call       go to state 57


state 117

  111 logical_expression: logical_expression KEYWORD_OR . logical_expression

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 163
    function_call       go to state 57


state 118

   98 if_statement: KEYWORD_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 164


state 119

   53 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM . IDENTIFIER

    IDENTIFIER  shift, and go to state 165


state 120

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    IDENTIFIER     [reduce using rule 84 (args)]
    LITERALSTRING  [reduce using rule 84 (args)]
    INTEGER        [reduce using rule 84 (args)]
    FLOAT          [reduce using rule 84 (args)]
    '-'            [reduce using rule 84 (args)]
    '|'            [reduce using rule 84 (args)]
    '('            [reduce using rule 84 (args)]
    $default       reduce using rule 84 (args)

    expression     go to state 123
    number         go to state 55
    args           go to state 166
    function_call  go to state 57


state 121

   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON . NEWLINE INDENT class_block DEDENT

    NEWLINE  shift, and go to state 167


state 122

  118 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN . function_call COLON block
  119              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . LIST COLON block
  121              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression COLON block
  122              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call COLON block
  123              | KEYWORD_FOR IDENTIFIER KEYWORD_IN . member_expression function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 168
    LIST        shift, and go to state 169

    member_expression  go to state 170
    function_call      go to state 171


state 123

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   87 args: expression . COMMA
   88     | expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109
    COMMA     shift, and go to state 172

    $default  reduce using rule 88 (args)


state 124

   85 args: args . expression COMMA
   86     | args . expression
  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args . RIGHT_PARENTHES KEYWORD_IN function_call COLON block

    IDENTIFIER       shift, and go to state 43
    LITERALSTRING    shift, and go to state 44
    RIGHT_PARENTHES  shift, and go to state 173
    INTEGER          shift, and go to state 49
    FLOAT            shift, and go to state 50
    '-'              shift, and go to state 51
    '|'              shift, and go to state 52
    '('              shift, and go to state 53

    expression     go to state 174
    number         go to state 55
    function_call  go to state 57


state 125

   83 block: NEWLINE . INDENT statements DEDENT

    INDENT  shift, and go to state 175


state 126

   68 try: KEYWORD_TRY COLON block .

    $default  reduce using rule 68 (try)


state 127

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES . args RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    IDENTIFIER     [reduce using rule 84 (args)]
    LITERALSTRING  [reduce using rule 84 (args)]
    INTEGER        [reduce using rule 84 (args)]
    FLOAT          [reduce using rule 84 (args)]
    '-'            [reduce using rule 84 (args)]
    '|'            [reduce using rule 84 (args)]
    '('            [reduce using rule 84 (args)]
    $default       reduce using rule 84 (args)

    expression     go to state 123
    number         go to state 55
    args           go to state 176
    function_call  go to state 57


state 128

   57 global_nonlocal_targets: IDENTIFIER COMMA . global_nonlocal_targets

    IDENTIFIER  shift, and go to state 72

    global_nonlocal_targets  go to state 177


state 129

  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression
  125 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block

    KEYWORD_AND      shift, and go to state 116
    KEYWORD_OR       shift, and go to state 117
    RIGHT_PARENTHES  shift, and go to state 178


state 130

  124 while_statement: KEYWORD_WHILE logical_expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 179


state 131

   51 assert_statement: KEYWORD_ASSERT logical_expression COMMA . LITERALSTRING

    LITERALSTRING  shift, and go to state 180


state 132

   58 match_statement: KEYWORD_MATCH IDENTIFIER COLON . match_block

    NEWLINE  shift, and go to state 181

    match_block  go to state 182


state 133

   69 except: KEYWORD_EXCEPT COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 183


state 134

   70 except: KEYWORD_EXCEPT member_expression . COLON block
   90 member_expression: member_expression . IDENTIFIER

    IDENTIFIER  shift, and go to state 90
    COLON       shift, and go to state 184


state 135

   71 finally: KEYWORD_FINALLY COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 185


state 136

   72 except_statements: except_statements except .

    $default  reduce using rule 72 (except_statements)


state 137

   65 try_statement: try except_statements finally .

    $default  reduce using rule 65 (try_statement)


state 138

   66 try_statement: try except_statements else_statement .
   67              | try except_statements else_statement . finally

    KEYWORD_FINALLY  shift, and go to state 86

    $default  reduce using rule 66 (try_statement)

    finally  go to state 186


state 139

   26 assignment: member_expression ASSIGN expression .
   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 26 (assignment)


state 140

  100 else_statement: KEYWORD_ELSE COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 187


state 141

  102 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES . logical_expression RIGHT_PARENTHES COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    KEYWORD_FALSE  shift, and go to state 45
    KEYWORD_TRUE   shift, and go to state 46
    KEYWORD_NOT    shift, and go to state 47
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression          go to state 54
    number              go to state 55
    logical_expression  go to state 188
    function_call       go to state 57


state 142

  101 elif_statement: KEYWORD_ELSE_IF logical_expression . COLON block
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117
    COLON        shift, and go to state 189


state 143

   93 elif_else: elif_stmts else_statement .

    $default  reduce using rule 93 (elif_else)


state 144

   97 elif_stmts: elif_stmts elif_statement .

    $default  reduce using rule 97 (elif_stmts)


state 145

   36 expression: number .
  116 function_call: IDENTIFIER LEFT_PARENTHES number . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 190

    RIGHT_PARENTHES  [reduce using rule 36 (expression)]
    $default         reduce using rule 36 (expression)


state 146

   85 args: args . expression COMMA
   86     | args . expression
  115 function_call: IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES

    IDENTIFIER       shift, and go to state 43
    LITERALSTRING    shift, and go to state 44
    RIGHT_PARENTHES  shift, and go to state 191
    INTEGER          shift, and go to state 49
    FLOAT            shift, and go to state 50
    '-'              shift, and go to state 51
    '|'              shift, and go to state 52
    '('              shift, and go to state 53

    expression     go to state 174
    number         go to state 55
    function_call  go to state 57


state 147

   38 expression: function_call .
  117 function_call: IDENTIFIER LEFT_PARENTHES function_call . RIGHT_PARENTHES

    RIGHT_PARENTHES  shift, and go to state 192

    RIGHT_PARENTHES  [reduce using rule 38 (expression)]
    $default         reduce using rule 38 (expression)


state 148

   99 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 193


state 149

   34 expression: '(' expression ')' .

    $default  reduce using rule 34 (expression)


state 150

   27 expression: expression . ADD expression
   27           | expression ADD expression .
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 27 (expression)]
    MINUS     [reduce using rule 27 (expression)]
    MULTIPLY  [reduce using rule 27 (expression)]
    DIVIDE    [reduce using rule 27 (expression)]
    POWER     [reduce using rule 27 (expression)]
    MODULO    [reduce using rule 27 (expression)]
    $default  reduce using rule 27 (expression)


state 151

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   28           | expression MINUS expression .
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 28 (expression)]
    MINUS     [reduce using rule 28 (expression)]
    MULTIPLY  [reduce using rule 28 (expression)]
    DIVIDE    [reduce using rule 28 (expression)]
    POWER     [reduce using rule 28 (expression)]
    MODULO    [reduce using rule 28 (expression)]
    $default  reduce using rule 28 (expression)


state 152

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   29           | expression MULTIPLY expression .
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 29 (expression)]
    MINUS     [reduce using rule 29 (expression)]
    MULTIPLY  [reduce using rule 29 (expression)]
    DIVIDE    [reduce using rule 29 (expression)]
    POWER     [reduce using rule 29 (expression)]
    MODULO    [reduce using rule 29 (expression)]
    $default  reduce using rule 29 (expression)


state 153

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   30           | expression DIVIDE expression .
   31           | expression . POWER expression
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 30 (expression)]
    MINUS     [reduce using rule 30 (expression)]
    MULTIPLY  [reduce using rule 30 (expression)]
    DIVIDE    [reduce using rule 30 (expression)]
    POWER     [reduce using rule 30 (expression)]
    MODULO    [reduce using rule 30 (expression)]
    $default  reduce using rule 30 (expression)


state 154

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   31           | expression POWER expression .
   32           | expression . MODULO expression

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 31 (expression)]
    MINUS     [reduce using rule 31 (expression)]
    MULTIPLY  [reduce using rule 31 (expression)]
    DIVIDE    [reduce using rule 31 (expression)]
    POWER     [reduce using rule 31 (expression)]
    MODULO    [reduce using rule 31 (expression)]
    $default  reduce using rule 31 (expression)


state 155

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   32           | expression MODULO expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    ADD       [reduce using rule 32 (expression)]
    MINUS     [reduce using rule 32 (expression)]
    MULTIPLY  [reduce using rule 32 (expression)]
    DIVIDE    [reduce using rule 32 (expression)]
    POWER     [reduce using rule 32 (expression)]
    MODULO    [reduce using rule 32 (expression)]
    $default  reduce using rule 32 (expression)


state 156

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  108 logical_expression: expression EQUAL expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 108 (logical_expression)


state 157

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  109 logical_expression: expression NOTEQUAL expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 109 (logical_expression)


state 158

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  105 logical_expression: expression GREATERTHAN expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 105 (logical_expression)


state 159

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  104 logical_expression: expression GREATEROREQUAL expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 104 (logical_expression)


state 160

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  107 logical_expression: expression LESSTHAN expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 107 (logical_expression)


state 161

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
  106 logical_expression: expression LESSOREQUAL expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109

    $default  reduce using rule 106 (logical_expression)


state 162

  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  110                   | logical_expression KEYWORD_AND logical_expression .
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117

    KEYWORD_AND  [reduce using rule 110 (logical_expression)]
    KEYWORD_OR   [reduce using rule 110 (logical_expression)]
    $default     reduce using rule 110 (logical_expression)


state 163

  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression
  111                   | logical_expression KEYWORD_OR logical_expression .

    KEYWORD_AND  shift, and go to state 116
    KEYWORD_OR   shift, and go to state 117

    KEYWORD_AND  [reduce using rule 111 (logical_expression)]
    KEYWORD_OR   [reduce using rule 111 (logical_expression)]
    $default     reduce using rule 111 (logical_expression)


state 164

   98 if_statement: KEYWORD_IF logical_expression COLON block .

    $default  reduce using rule 98 (if_statement)


state 165

   53 raise_statement: KEYWORD_RAISE function_call KEYWORD_FROM IDENTIFIER .

    $default  reduce using rule 53 (raise_statement)


state 166

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT
   85 args: args . expression COMMA
   86     | args . expression

    IDENTIFIER       shift, and go to state 43
    LITERALSTRING    shift, and go to state 44
    RIGHT_PARENTHES  shift, and go to state 194
    INTEGER          shift, and go to state 49
    FLOAT            shift, and go to state 50
    '-'              shift, and go to state 51
    '|'              shift, and go to state 52
    '('              shift, and go to state 53

    expression     go to state 174
    number         go to state 55
    function_call  go to state 57


state 167

   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE . INDENT class_block DEDENT

    INDENT  shift, and go to state 195


state 168

   89 member_expression: IDENTIFIER .
  115 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 98

    $default  reduce using rule 89 (member_expression)


state 169

  119 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST . COLON block

    COLON  shift, and go to state 196


state 170

   90 member_expression: member_expression . IDENTIFIER
  121 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . COLON block
  122              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call COLON block
  123              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression . function_call '.' IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 197
    COLON       shift, and go to state 198

    function_call  go to state 199


state 171

  118 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 200


state 172

   87 args: expression COMMA .

    $default  reduce using rule 87 (args)


state 173

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES . KEYWORD_IN function_call COLON block

    KEYWORD_IN  shift, and go to state 201


state 174

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   85 args: args expression . COMMA
   86     | args expression .

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109
    COMMA     shift, and go to state 202

    $default  reduce using rule 86 (args)


state 175

   83 block: NEWLINE INDENT . statements DEDENT

    IDENTIFIER        shift, and go to state 1
    KEYWORD_IF        shift, and go to state 2
    KEYWORD_PASS      shift, and go to state 3
    KEYWORD_BREAK     shift, and go to state 4
    KEYWORD_RAISE     shift, and go to state 5
    KEYWORD_CLASS     shift, and go to state 6
    KEYWORD_RETURN    shift, and go to state 7
    KEYWORD_CONTINUE  shift, and go to state 8
    KEYWORD_FOR       shift, and go to state 9
    KEYWORD_TRY       shift, and go to state 10
    KEYWORD_DEF       shift, and go to state 11
    KEYWORD_NONLOCAL  shift, and go to state 12
    KEYWORD_WHILE     shift, and go to state 13
    KEYWORD_ASSERT    shift, and go to state 14
    KEYWORD_GLOBAL    shift, and go to state 15
    KEYWORD_YIELD     shift, and go to state 16
    KEYWORD_MATCH     shift, and go to state 18

    statements                 go to state 203
    statement                  go to state 21
    simple_statement           go to state 22
    compound_statement         go to state 23
    assignment                 go to state 24
    return_statement           go to state 25
    yield_statement            go to state 26
    assert_statement           go to state 27
    raise_statement            go to state 28
    global_statement           go to state 29
    nonlocal_statement         go to state 30
    match_statement            go to state 31
    try_statement              go to state 32
    try                        go to state 33
    class                      go to state 34
    class_with_inheritance     go to state 35
    class_without_inheritance  go to state 36
    function                   go to state 37
    member_expression          go to state 38
    conditional_statement      go to state 39
    if_statement               go to state 40
    for_statement              go to state 41
    while_statement            go to state 42


state 176

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args . RIGHT_PARENTHES COLON block
   85 args: args . expression COMMA
   86     | args . expression

    IDENTIFIER       shift, and go to state 43
    LITERALSTRING    shift, and go to state 44
    RIGHT_PARENTHES  shift, and go to state 204
    INTEGER          shift, and go to state 49
    FLOAT            shift, and go to state 50
    '-'              shift, and go to state 51
    '|'              shift, and go to state 52
    '('              shift, and go to state 53

    expression     go to state 174
    number         go to state 55
    function_call  go to state 57


state 177

   57 global_nonlocal_targets: IDENTIFIER COMMA global_nonlocal_targets .

    $default  reduce using rule 57 (global_nonlocal_targets)


state 178

  125 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 205


state 179

  124 while_statement: KEYWORD_WHILE logical_expression COLON block .

    $default  reduce using rule 124 (while_statement)


state 180

   51 assert_statement: KEYWORD_ASSERT logical_expression COMMA LITERALSTRING .

    $default  reduce using rule 51 (assert_statement)


state 181

   59 match_block: NEWLINE . INDENT cases DEDENT

    INDENT  shift, and go to state 206


state 182

   58 match_statement: KEYWORD_MATCH IDENTIFIER COLON match_block .

    $default  reduce using rule 58 (match_statement)


state 183

   69 except: KEYWORD_EXCEPT COLON block .

    $default  reduce using rule 69 (except)


state 184

   70 except: KEYWORD_EXCEPT member_expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 207


state 185

   71 finally: KEYWORD_FINALLY COLON block .

    $default  reduce using rule 71 (finally)


state 186

   67 try_statement: try except_statements else_statement finally .

    $default  reduce using rule 67 (try_statement)


state 187

  100 else_statement: KEYWORD_ELSE COLON block .

    $default  reduce using rule 100 (else_statement)


state 188

  102 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression . RIGHT_PARENTHES COLON block
  110 logical_expression: logical_expression . KEYWORD_AND logical_expression
  111                   | logical_expression . KEYWORD_OR logical_expression

    KEYWORD_AND      shift, and go to state 116
    KEYWORD_OR       shift, and go to state 117
    RIGHT_PARENTHES  shift, and go to state 208


state 189

  101 elif_statement: KEYWORD_ELSE_IF logical_expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 209


state 190

  116 function_call: IDENTIFIER LEFT_PARENTHES number RIGHT_PARENTHES .

    $default  reduce using rule 116 (function_call)


state 191

  115 function_call: IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES .

    $default  reduce using rule 115 (function_call)


state 192

  117 function_call: IDENTIFIER LEFT_PARENTHES function_call RIGHT_PARENTHES .

    $default  reduce using rule 117 (function_call)


state 193

   99 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 210


state 194

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON NEWLINE INDENT class_block DEDENT

    COLON  shift, and go to state 211


state 195

   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT . class_block DEDENT

    $default  reduce using rule 77 (class_block)

    class_block  go to state 212


state 196

  119 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 213


state 197

   90 member_expression: member_expression IDENTIFIER .
  115 function_call: IDENTIFIER . LEFT_PARENTHES args RIGHT_PARENTHES
  116              | IDENTIFIER . LEFT_PARENTHES number RIGHT_PARENTHES
  117              | IDENTIFIER . LEFT_PARENTHES function_call RIGHT_PARENTHES

    LEFT_PARENTHES  shift, and go to state 98

    $default  reduce using rule 90 (member_expression)


state 198

  121 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 214


state 199

  122 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . COLON block
  123              | KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call . '.' IDENTIFIER COLON block

    COLON  shift, and go to state 215
    '.'    shift, and go to state 216


state 200

  118 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 217


state 201

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN . function_call COLON block

    IDENTIFIER  shift, and go to state 58

    function_call  go to state 218


state 202

   85 args: args expression COMMA .

    $default  reduce using rule 85 (args)


state 203

    4 statements: statements . statement
    6           | statements . NEWLINE
   83 block: NEWLINE INDENT statements . DEDENT

    IDENTIFIER        shift, and go to state 1
    KEYWORD_IF        shift, and go to state 2
    KEYWORD_PASS      shift, and go to state 3
    KEYWORD_BREAK     shift, and go to state 4
    KEYWORD_RAISE     shift, and go to state 5
    KEYWORD_CLASS     shift, and go to state 6
    KEYWORD_RETURN    shift, and go to state 7
    KEYWORD_CONTINUE  shift, and go to state 8
    KEYWORD_FOR       shift, and go to state 9
    KEYWORD_TRY       shift, and go to state 10
    KEYWORD_DEF       shift, and go to state 11
    KEYWORD_NONLOCAL  shift, and go to state 12
    KEYWORD_WHILE     shift, and go to state 13
    KEYWORD_ASSERT    shift, and go to state 14
    KEYWORD_GLOBAL    shift, and go to state 15
    KEYWORD_YIELD     shift, and go to state 16
    DEDENT            shift, and go to state 219
    NEWLINE           shift, and go to state 220
    KEYWORD_MATCH     shift, and go to state 18

    statement                  go to state 221
    simple_statement           go to state 22
    compound_statement         go to state 23
    assignment                 go to state 24
    return_statement           go to state 25
    yield_statement            go to state 26
    assert_statement           go to state 27
    raise_statement            go to state 28
    global_statement           go to state 29
    nonlocal_statement         go to state 30
    match_statement            go to state 31
    try_statement              go to state 32
    try                        go to state 33
    class                      go to state 34
    class_with_inheritance     go to state 35
    class_without_inheritance  go to state 36
    function                   go to state 37
    member_expression          go to state 38
    conditional_statement      go to state 39
    if_statement               go to state 40
    for_statement              go to state 41
    while_statement            go to state 42


state 204

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 222


state 205

  125 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 223


state 206

   59 match_block: NEWLINE INDENT . cases DEDENT

    KEYWORD_CASE  shift, and go to state 224

    cases  go to state 225
    case   go to state 226


state 207

   70 except: KEYWORD_EXCEPT member_expression COLON block .

    $default  reduce using rule 70 (except)


state 208

  102 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES . COLON block

    COLON  shift, and go to state 227


state 209

  101 elif_statement: KEYWORD_ELSE_IF logical_expression COLON block .

    $default  reduce using rule 101 (elif_statement)


state 210

   99 if_statement: KEYWORD_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 99 (if_statement)


state 211

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . NEWLINE INDENT class_block DEDENT

    NEWLINE  shift, and go to state 228


state 212

   78 class_block: class_block . assignment
   79            | class_block . function
   80            | class_block . NEWLINE
   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block . DEDENT

    IDENTIFIER   shift, and go to state 1
    KEYWORD_DEF  shift, and go to state 11
    DEDENT       shift, and go to state 229
    NEWLINE      shift, and go to state 230

    assignment         go to state 231
    function           go to state 232
    member_expression  go to state 38


state 213

  119 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN LIST COLON block .

    $default  reduce using rule 119 (for_statement)


state 214

  121 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression COLON block .

    $default  reduce using rule 121 (for_statement)


state 215

  122 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 233


state 216

  123 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' . IDENTIFIER COLON block

    IDENTIFIER  shift, and go to state 234


state 217

  118 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN function_call COLON block .

    $default  reduce using rule 118 (for_statement)


state 218

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call . COLON block

    COLON  shift, and go to state 235


state 219

   83 block: NEWLINE INDENT statements DEDENT .

    $default  reduce using rule 83 (block)


state 220

    6 statements: statements NEWLINE .

    $default  reduce using rule 6 (statements)


state 221

    4 statements: statements statement .

    $default  reduce using rule 4 (statements)


state 222

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 236


state 223

  125 while_statement: KEYWORD_WHILE LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 125 (while_statement)


state 224

   62 case: KEYWORD_CASE . expression COLON block

    IDENTIFIER     shift, and go to state 43
    LITERALSTRING  shift, and go to state 44
    INTEGER        shift, and go to state 49
    FLOAT          shift, and go to state 50
    '-'            shift, and go to state 51
    '|'            shift, and go to state 52
    '('            shift, and go to state 53

    expression     go to state 237
    number         go to state 55
    function_call  go to state 57


state 225

   59 match_block: NEWLINE INDENT cases . DEDENT
   60 cases: cases . case

    DEDENT        shift, and go to state 238
    KEYWORD_CASE  shift, and go to state 224

    case  go to state 239


state 226

   61 cases: case .

    $default  reduce using rule 61 (cases)


state 227

  102 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 240


state 228

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE . INDENT class_block DEDENT

    INDENT  shift, and go to state 241


state 229

   81 class_without_inheritance: KEYWORD_CLASS IDENTIFIER COLON NEWLINE INDENT class_block DEDENT .

    $default  reduce using rule 81 (class_without_inheritance)


state 230

   80 class_block: class_block NEWLINE .

    $default  reduce using rule 80 (class_block)


state 231

   78 class_block: class_block assignment .

    $default  reduce using rule 78 (class_block)


state 232

   79 class_block: class_block function .

    $default  reduce using rule 79 (class_block)


state 233

  122 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call COLON block .

    $default  reduce using rule 122 (for_statement)


state 234

  123 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER . COLON block

    COLON  shift, and go to state 242


state 235

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 243


state 236

   82 function: KEYWORD_DEF IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON block .

    $default  reduce using rule 82 (function)


state 237

   27 expression: expression . ADD expression
   28           | expression . MINUS expression
   29           | expression . MULTIPLY expression
   30           | expression . DIVIDE expression
   31           | expression . POWER expression
   32           | expression . MODULO expression
   62 case: KEYWORD_CASE expression . COLON block

    ADD       shift, and go to state 104
    MINUS     shift, and go to state 105
    MULTIPLY  shift, and go to state 106
    DIVIDE    shift, and go to state 107
    POWER     shift, and go to state 108
    MODULO    shift, and go to state 109
    COLON     shift, and go to state 244


state 238

   59 match_block: NEWLINE INDENT cases DEDENT .

    $default  reduce using rule 59 (match_block)


state 239

   60 cases: cases case .

    $default  reduce using rule 60 (cases)


state 240

  102 elif_statement: KEYWORD_ELSE_IF LEFT_PARENTHES logical_expression RIGHT_PARENTHES COLON block .

    $default  reduce using rule 102 (elif_statement)


state 241

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT . class_block DEDENT

    $default  reduce using rule 77 (class_block)

    class_block  go to state 245


state 242

  123 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 246


state 243

  120 for_statement: KEYWORD_FOR LEFT_PARENTHES args RIGHT_PARENTHES KEYWORD_IN function_call COLON block .

    $default  reduce using rule 120 (for_statement)


state 244

   62 case: KEYWORD_CASE expression COLON . block

    NEWLINE  shift, and go to state 125

    block  go to state 247


state 245

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT class_block . DEDENT
   78 class_block: class_block . assignment
   79            | class_block . function
   80            | class_block . NEWLINE

    IDENTIFIER   shift, and go to state 1
    KEYWORD_DEF  shift, and go to state 11
    DEDENT       shift, and go to state 248
    NEWLINE      shift, and go to state 230

    assignment         go to state 231
    function           go to state 232
    member_expression  go to state 38


state 246

  123 for_statement: KEYWORD_FOR IDENTIFIER KEYWORD_IN member_expression function_call '.' IDENTIFIER COLON block .

    $default  reduce using rule 123 (for_statement)


state 247

   62 case: KEYWORD_CASE expression COLON block .

    $default  reduce using rule 62 (case)


state 248

   76 class_with_inheritance: KEYWORD_CLASS IDENTIFIER LEFT_PARENTHES args RIGHT_PARENTHES COLON NEWLINE INDENT class_block DEDENT .

    $default  reduce using rule 76 (class_with_inheritance)
